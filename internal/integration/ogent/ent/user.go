// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"ariga.io/ogent/internal/integration/ogent/ent/hat"
	"ariga.io/ogent/internal/integration/ogent/ent/schema"
	"ariga.io/ogent/internal/integration/ogent/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age uint `json:"age,omitempty"`
	// Height holds the value of the "height" field.
	Height uint `json:"height,omitempty"`
	// FavoriteCatBreed holds the value of the "favorite_cat_breed" field.
	FavoriteCatBreed user.FavoriteCatBreed `json:"favorite_cat_breed,omitempty"`
	// FavoriteColor holds the value of the "favorite_color" field.
	FavoriteColor user.FavoriteColor `json:"favorite_color,omitempty"`
	// FavoriteDogBreed holds the value of the "favorite_dog_breed" field.
	FavoriteDogBreed user.FavoriteDogBreed `json:"favorite_dog_breed,omitempty"`
	// FavoriteFishBreed holds the value of the "favorite_fish_breed" field.
	FavoriteFishBreed schema.FishBreed `json:"favorite_fish_breed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges            UserEdges `json:"edges"`
	user_best_friend *int
	selectValues     sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Pets holds the value of the pets edge.
	Pets []*Pet `json:"pets,omitempty"`
	// AnimalsSaved holds the value of the animals_saved edge.
	AnimalsSaved []*Pet `json:"animals_saved,omitempty"`
	// BestFriend holds the value of the best_friend edge.
	BestFriend *User `json:"best_friend,omitempty"`
	// FavoriteHat holds the value of the favorite_hat edge.
	FavoriteHat *Hat `json:"favorite_hat,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PetsOrErr returns the Pets value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PetsOrErr() ([]*Pet, error) {
	if e.loadedTypes[0] {
		return e.Pets, nil
	}
	return nil, &NotLoadedError{edge: "pets"}
}

// AnimalsSavedOrErr returns the AnimalsSaved value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AnimalsSavedOrErr() ([]*Pet, error) {
	if e.loadedTypes[1] {
		return e.AnimalsSaved, nil
	}
	return nil, &NotLoadedError{edge: "animals_saved"}
}

// BestFriendOrErr returns the BestFriend value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) BestFriendOrErr() (*User, error) {
	if e.BestFriend != nil {
		return e.BestFriend, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "best_friend"}
}

// FavoriteHatOrErr returns the FavoriteHat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) FavoriteHatOrErr() (*Hat, error) {
	if e.FavoriteHat != nil {
		return e.FavoriteHat, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: hat.Label}
	}
	return nil, &NotLoadedError{edge: "favorite_hat"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldAge, user.FieldHeight:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldFavoriteCatBreed, user.FieldFavoriteColor, user.FieldFavoriteDogBreed, user.FieldFavoriteFishBreed:
			values[i] = new(sql.NullString)
		case user.ForeignKeys[0]: // user_best_friend
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				u.Age = uint(value.Int64)
			}
		case user.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				u.Height = uint(value.Int64)
			}
		case user.FieldFavoriteCatBreed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favorite_cat_breed", values[i])
			} else if value.Valid {
				u.FavoriteCatBreed = user.FavoriteCatBreed(value.String)
			}
		case user.FieldFavoriteColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favorite_color", values[i])
			} else if value.Valid {
				u.FavoriteColor = user.FavoriteColor(value.String)
			}
		case user.FieldFavoriteDogBreed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favorite_dog_breed", values[i])
			} else if value.Valid {
				u.FavoriteDogBreed = user.FavoriteDogBreed(value.String)
			}
		case user.FieldFavoriteFishBreed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favorite_fish_breed", values[i])
			} else if value.Valid {
				u.FavoriteFishBreed = schema.FishBreed(value.String)
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_best_friend", value)
			} else if value.Valid {
				u.user_best_friend = new(int)
				*u.user_best_friend = int(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryPets queries the "pets" edge of the User entity.
func (u *User) QueryPets() *PetQuery {
	return NewUserClient(u.config).QueryPets(u)
}

// QueryAnimalsSaved queries the "animals_saved" edge of the User entity.
func (u *User) QueryAnimalsSaved() *PetQuery {
	return NewUserClient(u.config).QueryAnimalsSaved(u)
}

// QueryBestFriend queries the "best_friend" edge of the User entity.
func (u *User) QueryBestFriend() *UserQuery {
	return NewUserClient(u.config).QueryBestFriend(u)
}

// QueryFavoriteHat queries the "favorite_hat" edge of the User entity.
func (u *User) QueryFavoriteHat() *HatQuery {
	return NewUserClient(u.config).QueryFavoriteHat(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", u.Age))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", u.Height))
	builder.WriteString(", ")
	builder.WriteString("favorite_cat_breed=")
	builder.WriteString(fmt.Sprintf("%v", u.FavoriteCatBreed))
	builder.WriteString(", ")
	builder.WriteString("favorite_color=")
	builder.WriteString(fmt.Sprintf("%v", u.FavoriteColor))
	builder.WriteString(", ")
	builder.WriteString("favorite_dog_breed=")
	builder.WriteString(fmt.Sprintf("%v", u.FavoriteDogBreed))
	builder.WriteString(", ")
	builder.WriteString("favorite_fish_breed=")
	builder.WriteString(fmt.Sprintf("%v", u.FavoriteFishBreed))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
