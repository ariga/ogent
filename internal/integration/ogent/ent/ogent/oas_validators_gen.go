// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

func (s CreateUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Sex.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateUserReqGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CreateUserReqSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ListCategoryOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListCategoryPetsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListPetCategoriesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListPetFriendsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListPetOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ListUserPetsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s PetCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Owner.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PetCreateOwner) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Sex.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PetCreateOwnerGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PetCreateOwnerSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PetOwnerRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Sex.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PetOwnerReadGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PetOwnerReadSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UpdateUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Sex.Set {
			if err := func() error {
				if err := s.Sex.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UpdateUserReqGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UpdateUserReqSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserBestFriendRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Sex.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserBestFriendReadGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserBestFriendReadSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Sex.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserCreateGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserCreateSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Sex.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserListGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserListSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Sex.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserReadGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserReadSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Sex.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserUpdateGender) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	case "diverse":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UserUpdateSex) Validate() error {
	switch s {
	case "male":
		return nil
	case "female":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
