// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

// Encode implements json.Marshaler.
func (s CategoryCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// Decode decodes CategoryCreate from json.
func (s *CategoryCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CategoryCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CategoryList) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// Decode decodes CategoryList from json.
func (s *CategoryList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CategoryList to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CategoryPetsCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes CategoryPetsCreate from json.
func (s *CategoryPetsCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CategoryPetsCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CategoryPetsList) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes CategoryPetsList from json.
func (s *CategoryPetsList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CategoryPetsList to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CategoryRead) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// Decode decodes CategoryRead from json.
func (s *CategoryRead) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CategoryRead to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CategoryUpdate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// Decode decodes CategoryUpdate from json.
func (s *CategoryUpdate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CategoryUpdate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreateCategoryPetsReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	if s.Categories != nil {
		e.FieldStart("categories")
		e.ArrStart()
		for _, elem := range s.Categories {
			e.Int(elem)
		}
		e.ArrEnd()
	}

	e.FieldStart("owner")
	e.Int(s.Owner)
	if s.Friends != nil {
		e.FieldStart("friends")
		e.ArrStart()
		for _, elem := range s.Friends {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes CreateCategoryPetsReq from json.
func (s *CreateCategoryPetsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreateCategoryPetsReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		case "categories":
			s.Categories = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Categories = append(s.Categories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "owner":
			v, err := d.Int()
			s.Owner = int(v)
			if err != nil {
				return err
			}
		case "friends":
			s.Friends = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Friends = append(s.Friends, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreateCategoryReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Pets != nil {
		e.FieldStart("pets")
		e.ArrStart()
		for _, elem := range s.Pets {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes CreateCategoryReq from json.
func (s *CreateCategoryReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreateCategoryReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "pets":
			s.Pets = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Pets = append(s.Pets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreatePetCategoriesReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Pets != nil {
		e.FieldStart("pets")
		e.ArrStart()
		for _, elem := range s.Pets {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes CreatePetCategoriesReq from json.
func (s *CreatePetCategoriesReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreatePetCategoriesReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "pets":
			s.Pets = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Pets = append(s.Pets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreatePetFriendsReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	if s.Categories != nil {
		e.FieldStart("categories")
		e.ArrStart()
		for _, elem := range s.Categories {
			e.Int(elem)
		}
		e.ArrEnd()
	}

	e.FieldStart("owner")
	e.Int(s.Owner)
	if s.Friends != nil {
		e.FieldStart("friends")
		e.ArrStart()
		for _, elem := range s.Friends {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes CreatePetFriendsReq from json.
func (s *CreatePetFriendsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreatePetFriendsReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		case "categories":
			s.Categories = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Categories = append(s.Categories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "owner":
			v, err := d.Int()
			s.Owner = int(v)
			if err != nil {
				return err
			}
		case "friends":
			s.Friends = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Friends = append(s.Friends, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreatePetOwnerReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	if s.Pets != nil {
		e.FieldStart("pets")
		e.ArrStart()
		for _, elem := range s.Pets {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	if s.BestFriend.Set {
		e.FieldStart("best_friend")
		s.BestFriend.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes CreatePetOwnerReq from json.
func (s *CreatePetOwnerReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreatePetOwnerReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		case "pets":
			s.Pets = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Pets = append(s.Pets, elem)
				return nil
			}); err != nil {
				return err
			}
		case "best_friend":
			s.BestFriend.Reset()
			if err := s.BestFriend.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreatePetReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	if s.Categories != nil {
		e.FieldStart("categories")
		e.ArrStart()
		for _, elem := range s.Categories {
			e.Int(elem)
		}
		e.ArrEnd()
	}

	e.FieldStart("owner")
	e.Int(s.Owner)
	if s.Friends != nil {
		e.FieldStart("friends")
		e.ArrStart()
		for _, elem := range s.Friends {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes CreatePetReq from json.
func (s *CreatePetReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreatePetReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		case "categories":
			s.Categories = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Categories = append(s.Categories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "owner":
			v, err := d.Int()
			s.Owner = int(v)
			if err != nil {
				return err
			}
		case "friends":
			s.Friends = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Friends = append(s.Friends, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreateUserBestFriendReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	if s.Pets != nil {
		e.FieldStart("pets")
		e.ArrStart()
		for _, elem := range s.Pets {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	if s.BestFriend.Set {
		e.FieldStart("best_friend")
		s.BestFriend.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes CreateUserBestFriendReq from json.
func (s *CreateUserBestFriendReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreateUserBestFriendReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		case "pets":
			s.Pets = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Pets = append(s.Pets, elem)
				return nil
			}); err != nil {
				return err
			}
		case "best_friend":
			s.BestFriend.Reset()
			if err := s.BestFriend.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreateUserPetsReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	if s.Categories != nil {
		e.FieldStart("categories")
		e.ArrStart()
		for _, elem := range s.Categories {
			e.Int(elem)
		}
		e.ArrEnd()
	}

	e.FieldStart("owner")
	e.Int(s.Owner)
	if s.Friends != nil {
		e.FieldStart("friends")
		e.ArrStart()
		for _, elem := range s.Friends {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes CreateUserPetsReq from json.
func (s *CreateUserPetsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreateUserPetsReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		case "categories":
			s.Categories = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Categories = append(s.Categories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "owner":
			v, err := d.Int()
			s.Owner = int(v)
			if err != nil {
				return err
			}
		case "friends":
			s.Friends = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Friends = append(s.Friends, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s CreateUserReq) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	if s.Pets != nil {
		e.FieldStart("pets")
		e.ArrStart()
		for _, elem := range s.Pets {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	if s.BestFriend.Set {
		e.FieldStart("best_friend")
		s.BestFriend.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes CreateUserReq from json.
func (s *CreateUserReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreateUserReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		case "pets":
			s.Pets = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Pets = append(s.Pets, elem)
				return nil
			}); err != nil {
				return err
			}
		case "best_friend":
			s.BestFriend.Reset()
			if err := s.BestFriend.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeleteCategoryNoContent) Encode(e *jx.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// Decode decodes DeleteCategoryNoContent from json.
func (s *DeleteCategoryNoContent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeleteCategoryNoContent to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeletePetNoContent) Encode(e *jx.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// Decode decodes DeletePetNoContent from json.
func (s *DeletePetNoContent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeletePetNoContent to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeletePetOwnerNoContent) Encode(e *jx.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// Decode decodes DeletePetOwnerNoContent from json.
func (s *DeletePetOwnerNoContent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeletePetOwnerNoContent to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeleteUserBestFriendNoContent) Encode(e *jx.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// Decode decodes DeleteUserBestFriendNoContent from json.
func (s *DeleteUserBestFriendNoContent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeleteUserBestFriendNoContent to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeleteUserNoContent) Encode(e *jx.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// Decode decodes DeleteUserNoContent from json.
func (s *DeleteUserNoContent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeleteUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode encodes ListCategoryOKApplicationJSON as json.
func (s ListCategoryOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := []CategoryList(s)
	e.ArrStart()
	for _, elem := range unwrapped {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes ListCategoryOKApplicationJSON from json.
func (s *ListCategoryOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ListCategoryOKApplicationJSON to nil`)
	}
	var unwrapped []CategoryList
	if err := func() error {
		unwrapped = nil
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem CategoryList
			if err := elem.Decode(d); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ListCategoryOKApplicationJSON(unwrapped)
	return nil
}

// Encode encodes ListCategoryPetsOKApplicationJSON as json.
func (s ListCategoryPetsOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := []CategoryPetsList(s)
	e.ArrStart()
	for _, elem := range unwrapped {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes ListCategoryPetsOKApplicationJSON from json.
func (s *ListCategoryPetsOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ListCategoryPetsOKApplicationJSON to nil`)
	}
	var unwrapped []CategoryPetsList
	if err := func() error {
		unwrapped = nil
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem CategoryPetsList
			if err := elem.Decode(d); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ListCategoryPetsOKApplicationJSON(unwrapped)
	return nil
}

// Encode encodes ListPetCategoriesOKApplicationJSON as json.
func (s ListPetCategoriesOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := []PetCategoriesList(s)
	e.ArrStart()
	for _, elem := range unwrapped {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes ListPetCategoriesOKApplicationJSON from json.
func (s *ListPetCategoriesOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ListPetCategoriesOKApplicationJSON to nil`)
	}
	var unwrapped []PetCategoriesList
	if err := func() error {
		unwrapped = nil
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem PetCategoriesList
			if err := elem.Decode(d); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ListPetCategoriesOKApplicationJSON(unwrapped)
	return nil
}

// Encode encodes ListPetFriendsOKApplicationJSON as json.
func (s ListPetFriendsOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := []PetFriendsList(s)
	e.ArrStart()
	for _, elem := range unwrapped {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes ListPetFriendsOKApplicationJSON from json.
func (s *ListPetFriendsOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ListPetFriendsOKApplicationJSON to nil`)
	}
	var unwrapped []PetFriendsList
	if err := func() error {
		unwrapped = nil
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem PetFriendsList
			if err := elem.Decode(d); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ListPetFriendsOKApplicationJSON(unwrapped)
	return nil
}

// Encode encodes ListPetOKApplicationJSON as json.
func (s ListPetOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := []PetList(s)
	e.ArrStart()
	for _, elem := range unwrapped {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes ListPetOKApplicationJSON from json.
func (s *ListPetOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ListPetOKApplicationJSON to nil`)
	}
	var unwrapped []PetList
	if err := func() error {
		unwrapped = nil
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem PetList
			if err := elem.Decode(d); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ListPetOKApplicationJSON(unwrapped)
	return nil
}

// Encode encodes ListUserOKApplicationJSON as json.
func (s ListUserOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := []UserList(s)
	e.ArrStart()
	for _, elem := range unwrapped {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes ListUserOKApplicationJSON from json.
func (s *ListUserOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ListUserOKApplicationJSON to nil`)
	}
	var unwrapped []UserList
	if err := func() error {
		unwrapped = nil
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem UserList
			if err := elem.Decode(d); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ListUserOKApplicationJSON(unwrapped)
	return nil
}

// Encode encodes ListUserPetsOKApplicationJSON as json.
func (s ListUserPetsOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := []UserPetsList(s)
	e.ArrStart()
	for _, elem := range unwrapped {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes ListUserPetsOKApplicationJSON from json.
func (s *ListUserPetsOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ListUserPetsOKApplicationJSON to nil`)
	}
	var unwrapped []UserPetsList
	if err := func() error {
		unwrapped = nil
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem UserPetsList
			if err := elem.Decode(d); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ListUserPetsOKApplicationJSON(unwrapped)
	return nil
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptInt to nil`)
	}
	switch d.Next() {
	case jx.Number:
		o.Set = true
		v, err := d.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptInt`, d.Next())
	}
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptString to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptString`, d.Next())
	}
}

// Encode encodes time.Time as json.
func (o OptTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptTime to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptTime`, d.Next())
	}
}

// Encode implements json.Marshaler.
func (s PetCategoriesCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// Decode decodes PetCategoriesCreate from json.
func (s *PetCategoriesCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetCategoriesCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetCategoriesList) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// Decode decodes PetCategoriesList from json.
func (s *PetCategoriesList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetCategoriesList to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	if s.Categories != nil {
		e.FieldStart("categories")
		e.ArrStart()
		for _, elem := range s.Categories {
			elem.Encode(e)
		}
		e.ArrEnd()
	}

	e.FieldStart("owner")
	s.Owner.Encode(e)
	e.ObjEnd()
}

// Decode decodes PetCreate from json.
func (s *PetCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		case "categories":
			s.Categories = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem PetCreateCategories
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Categories = append(s.Categories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetCreateCategories) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// Decode decodes PetCreateCategories from json.
func (s *PetCreateCategories) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetCreateCategories to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetCreateOwner) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes PetCreateOwner from json.
func (s *PetCreateOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetCreateOwner to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetFriendsCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes PetFriendsCreate from json.
func (s *PetFriendsCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetFriendsCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetFriendsList) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes PetFriendsList from json.
func (s *PetFriendsList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetFriendsList to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetList) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes PetList from json.
func (s *PetList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetList to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetOwnerCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes PetOwnerCreate from json.
func (s *PetOwnerCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetOwnerCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetOwnerRead) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes PetOwnerRead from json.
func (s *PetOwnerRead) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetOwnerRead to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetRead) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes PetRead from json.
func (s *PetRead) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetRead to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PetUpdate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes PetUpdate from json.
func (s *PetUpdate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetUpdate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s R400) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("code")
	e.Int(s.Code)

	e.FieldStart("status")
	e.Str(s.Status)
	if s.Errors.Set {
		e.FieldStart("errors")
		s.Errors.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes R400 from json.
func (s *R400) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode R400 to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			v, err := d.Int()
			s.Code = int(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "errors":
			s.Errors.Reset()
			if err := s.Errors.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s R404) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("code")
	e.Int(s.Code)

	e.FieldStart("status")
	e.Str(s.Status)
	if s.Errors.Set {
		e.FieldStart("errors")
		s.Errors.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes R404 from json.
func (s *R404) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode R404 to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			v, err := d.Int()
			s.Code = int(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "errors":
			s.Errors.Reset()
			if err := s.Errors.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s R409) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("code")
	e.Int(s.Code)

	e.FieldStart("status")
	e.Str(s.Status)
	if s.Errors.Set {
		e.FieldStart("errors")
		s.Errors.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes R409 from json.
func (s *R409) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode R409 to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			v, err := d.Int()
			s.Code = int(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "errors":
			s.Errors.Reset()
			if err := s.Errors.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s R500) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("code")
	e.Int(s.Code)

	e.FieldStart("status")
	e.Str(s.Status)
	if s.Errors.Set {
		e.FieldStart("errors")
		s.Errors.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes R500 from json.
func (s *R500) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode R500 to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			v, err := d.Int()
			s.Code = int(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "errors":
			s.Errors.Reset()
			if err := s.Errors.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UpdateCategoryReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	if s.Name.Set {
		e.FieldStart("name")
		s.Name.Encode(e)
	}
	if s.Pets != nil {
		e.FieldStart("pets")
		e.ArrStart()
		for _, elem := range s.Pets {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes UpdateCategoryReq from json.
func (s *UpdateCategoryReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UpdateCategoryReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.Decode(d); err != nil {
				return err
			}
		case "pets":
			s.Pets = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Pets = append(s.Pets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UpdatePetReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	if s.Name.Set {
		e.FieldStart("name")
		s.Name.Encode(e)
	}
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	if s.Categories != nil {
		e.FieldStart("categories")
		e.ArrStart()
		for _, elem := range s.Categories {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	if s.Owner.Set {
		e.FieldStart("owner")
		s.Owner.Encode(e)
	}
	if s.Friends != nil {
		e.FieldStart("friends")
		e.ArrStart()
		for _, elem := range s.Friends {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes UpdatePetReq from json.
func (s *UpdatePetReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UpdatePetReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.Decode(d); err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		case "categories":
			s.Categories = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Categories = append(s.Categories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.Decode(d); err != nil {
				return err
			}
		case "friends":
			s.Friends = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Friends = append(s.Friends, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UpdateUserReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	if s.Name.Set {
		e.FieldStart("name")
		s.Name.Encode(e)
	}
	if s.Age.Set {
		e.FieldStart("age")
		s.Age.Encode(e)
	}
	if s.Pets != nil {
		e.FieldStart("pets")
		e.ArrStart()
		for _, elem := range s.Pets {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	if s.BestFriend.Set {
		e.FieldStart("best_friend")
		s.BestFriend.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes UpdateUserReq from json.
func (s *UpdateUserReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UpdateUserReq to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.Decode(d); err != nil {
				return err
			}
		case "age":
			s.Age.Reset()
			if err := s.Age.Decode(d); err != nil {
				return err
			}
		case "pets":
			s.Pets = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Pets = append(s.Pets, elem)
				return nil
			}); err != nil {
				return err
			}
		case "best_friend":
			s.BestFriend.Reset()
			if err := s.BestFriend.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserBestFriendCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes UserBestFriendCreate from json.
func (s *UserBestFriendCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserBestFriendCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserBestFriendRead) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes UserBestFriendRead from json.
func (s *UserBestFriendRead) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserBestFriendRead to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes UserCreate from json.
func (s *UserCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserList) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes UserList from json.
func (s *UserList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserList to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserPetsCreate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes UserPetsCreate from json.
func (s *UserPetsCreate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserPetsCreate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserPetsList) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)
	if s.Weight.Set {
		e.FieldStart("weight")
		s.Weight.Encode(e)
	}
	if s.Birthday.Set {
		e.FieldStart("birthday")
		s.Birthday.Encode(e, json.EncodeDateTime)
	}
	e.ObjEnd()
}

// Decode decodes UserPetsList from json.
func (s *UserPetsList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserPetsList to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "weight":
			s.Weight.Reset()
			if err := s.Weight.Decode(d); err != nil {
				return err
			}
		case "birthday":
			s.Birthday.Reset()
			if err := s.Birthday.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserRead) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes UserRead from json.
func (s *UserRead) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserRead to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserUpdate) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("age")
	e.Int(s.Age)
	e.ObjEnd()
}

// Decode decodes UserUpdate from json.
func (s *UserUpdate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserUpdate to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "age":
			v, err := d.Int()
			s.Age = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}
