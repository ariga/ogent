// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

// Ref: #/components/schemas/AllTypesCreate
type AllTypesCreate struct {
	ID         int64               "json:\"id\""
	Int        int                 "json:\"int\""
	Int8       int32               "json:\"int8\""
	Int16      int32               "json:\"int16\""
	Int32      int32               "json:\"int32\""
	Int64      int64               "json:\"int64\""
	Uint       int64               "json:\"uint\""
	Uint8      int32               "json:\"uint8\""
	Uint16     int32               "json:\"uint16\""
	Uint32     int64               "json:\"uint32\""
	Uint64     int64               "json:\"uint64\""
	Float32    float32             "json:\"float32\""
	Float64    float64             "json:\"float64\""
	StringType string              "json:\"string_type\""
	Bool       bool                "json:\"bool\""
	UUID       uuid.UUID           "json:\"uuid\""
	Time       time.Time           "json:\"time\""
	Text       string              "json:\"text\""
	State      AllTypesCreateState "json:\"state\""
	Bytes      []byte              "json:\"bytes\""
}

func (*AllTypesCreate) createAllTypesRes() {}

type AllTypesCreateState string

const (
	AllTypesCreateStateOn  AllTypesCreateState = "on"
	AllTypesCreateStateOff AllTypesCreateState = "off"
)

// Ref: #/components/schemas/AllTypesList
type AllTypesList struct {
	ID         int64             "json:\"id\""
	Int        int               "json:\"int\""
	Int8       int32             "json:\"int8\""
	Int16      int32             "json:\"int16\""
	Int32      int32             "json:\"int32\""
	Int64      int64             "json:\"int64\""
	Uint       int64             "json:\"uint\""
	Uint8      int32             "json:\"uint8\""
	Uint16     int32             "json:\"uint16\""
	Uint32     int64             "json:\"uint32\""
	Uint64     int64             "json:\"uint64\""
	Float32    float32           "json:\"float32\""
	Float64    float64           "json:\"float64\""
	StringType string            "json:\"string_type\""
	Bool       bool              "json:\"bool\""
	UUID       uuid.UUID         "json:\"uuid\""
	Time       time.Time         "json:\"time\""
	Text       string            "json:\"text\""
	State      AllTypesListState "json:\"state\""
	Bytes      []byte            "json:\"bytes\""
}

type AllTypesListState string

const (
	AllTypesListStateOn  AllTypesListState = "on"
	AllTypesListStateOff AllTypesListState = "off"
)

// Ref: #/components/schemas/AllTypesRead
type AllTypesRead struct {
	ID         int64             "json:\"id\""
	Int        int               "json:\"int\""
	Int8       int32             "json:\"int8\""
	Int16      int32             "json:\"int16\""
	Int32      int32             "json:\"int32\""
	Int64      int64             "json:\"int64\""
	Uint       int64             "json:\"uint\""
	Uint8      int32             "json:\"uint8\""
	Uint16     int32             "json:\"uint16\""
	Uint32     int64             "json:\"uint32\""
	Uint64     int64             "json:\"uint64\""
	Float32    float32           "json:\"float32\""
	Float64    float64           "json:\"float64\""
	StringType string            "json:\"string_type\""
	Bool       bool              "json:\"bool\""
	UUID       uuid.UUID         "json:\"uuid\""
	Time       time.Time         "json:\"time\""
	Text       string            "json:\"text\""
	State      AllTypesReadState "json:\"state\""
	Bytes      []byte            "json:\"bytes\""
}

func (*AllTypesRead) readAllTypesRes() {}

type AllTypesReadState string

const (
	AllTypesReadStateOn  AllTypesReadState = "on"
	AllTypesReadStateOff AllTypesReadState = "off"
)

// Ref: #/components/schemas/AllTypesUpdate
type AllTypesUpdate struct {
	ID         int64               "json:\"id\""
	Int        int                 "json:\"int\""
	Int8       int32               "json:\"int8\""
	Int16      int32               "json:\"int16\""
	Int32      int32               "json:\"int32\""
	Int64      int64               "json:\"int64\""
	Uint       int64               "json:\"uint\""
	Uint8      int32               "json:\"uint8\""
	Uint16     int32               "json:\"uint16\""
	Uint32     int64               "json:\"uint32\""
	Uint64     int64               "json:\"uint64\""
	Float32    float32             "json:\"float32\""
	Float64    float64             "json:\"float64\""
	StringType string              "json:\"string_type\""
	Bool       bool                "json:\"bool\""
	UUID       uuid.UUID           "json:\"uuid\""
	Time       time.Time           "json:\"time\""
	Text       string              "json:\"text\""
	State      AllTypesUpdateState "json:\"state\""
	Bytes      []byte              "json:\"bytes\""
}

func (*AllTypesUpdate) updateAllTypesRes() {}

type AllTypesUpdateState string

const (
	AllTypesUpdateStateOn  AllTypesUpdateState = "on"
	AllTypesUpdateStateOff AllTypesUpdateState = "off"
)

// Ref: #/components/schemas/CategoryCreate
type CategoryCreate struct {
	ID       int       "json:\"id\""
	Name     string    "json:\"name\""
	Readonly OptString "json:\"readonly\""
}

func (*CategoryCreate) createCategoryRes() {}

// Ref: #/components/schemas/CategoryList
type CategoryList struct {
	ID       int       "json:\"id\""
	Name     string    "json:\"name\""
	Readonly OptString "json:\"readonly\""
}

// Ref: #/components/schemas/Category_PetsList
type CategoryPetsList struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
	TagID    []byte      "json:\"tag_id\""
	Height   OptInt      "json:\"height\""
}

// Ref: #/components/schemas/CategoryRead
type CategoryRead struct {
	ID       int       "json:\"id\""
	Name     string    "json:\"name\""
	Readonly OptString "json:\"readonly\""
}

func (*CategoryRead) readCategoryRes() {}

// Ref: #/components/schemas/CategoryUpdate
type CategoryUpdate struct {
	ID       int       "json:\"id\""
	Name     string    "json:\"name\""
	Readonly OptString "json:\"readonly\""
}

func (*CategoryUpdate) updateCategoryRes() {}

type CreateAllTypesReq struct {
	Int        int                    "json:\"int\""
	Int8       int32                  "json:\"int8\""
	Int16      int32                  "json:\"int16\""
	Int32      int32                  "json:\"int32\""
	Int64      int64                  "json:\"int64\""
	Uint       int64                  "json:\"uint\""
	Uint8      int32                  "json:\"uint8\""
	Uint16     int32                  "json:\"uint16\""
	Uint32     int64                  "json:\"uint32\""
	Uint64     int64                  "json:\"uint64\""
	Float32    float32                "json:\"float32\""
	Float64    float64                "json:\"float64\""
	StringType string                 "json:\"string_type\""
	Bool       bool                   "json:\"bool\""
	UUID       uuid.UUID              "json:\"uuid\""
	Time       time.Time              "json:\"time\""
	Text       string                 "json:\"text\""
	State      CreateAllTypesReqState "json:\"state\""
	Bytes      []byte                 "json:\"bytes\""
}

type CreateAllTypesReqState string

const (
	CreateAllTypesReqStateOn  CreateAllTypesReqState = "on"
	CreateAllTypesReqStateOff CreateAllTypesReqState = "off"
)

type CreateCategoryReq struct {
	Name string "json:\"name\""
	Pets []int  "json:\"pets\""
}

type CreatePetReq struct {
	Name       string      "json:\"name\""
	Weight     OptInt      "json:\"weight\""
	Birthday   OptDateTime "json:\"birthday\""
	TagID      []byte      "json:\"tag_id\""
	Height     OptInt      "json:\"height\""
	Categories []int       "json:\"categories\""
	Owner      int         "json:\"owner\""
	Friends    []int       "json:\"friends\""
}

type CreateUserReq struct {
	Name              string                            "json:\"name\""
	Age               int64                             "json:\"age\""
	Height            OptInt64                          "json:\"height\""
	FavoriteCatBreed  CreateUserReqFavoriteCatBreed     "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptCreateUserReqFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptCreateUserReqFavoriteFishBreed "json:\"favorite_fish_breed\""
	Pets              []int                             "json:\"pets\""
	BestFriend        OptInt                            "json:\"best_friend\""
}

type CreateUserReqFavoriteCatBreed string

const (
	CreateUserReqFavoriteCatBreedSiamese CreateUserReqFavoriteCatBreed = "siamese"
	CreateUserReqFavoriteCatBreedBengal  CreateUserReqFavoriteCatBreed = "bengal"
	CreateUserReqFavoriteCatBreedLion    CreateUserReqFavoriteCatBreed = "lion"
	CreateUserReqFavoriteCatBreedTiger   CreateUserReqFavoriteCatBreed = "tiger"
	CreateUserReqFavoriteCatBreedLeopard CreateUserReqFavoriteCatBreed = "leopard"
	CreateUserReqFavoriteCatBreedOther   CreateUserReqFavoriteCatBreed = "other"
)

type CreateUserReqFavoriteDogBreed string

const (
	CreateUserReqFavoriteDogBreedKuro CreateUserReqFavoriteDogBreed = "Kuro"
)

type CreateUserReqFavoriteFishBreed string

const (
	CreateUserReqFavoriteFishBreedGold  CreateUserReqFavoriteFishBreed = "gold"
	CreateUserReqFavoriteFishBreedKoi   CreateUserReqFavoriteFishBreed = "koi"
	CreateUserReqFavoriteFishBreedShark CreateUserReqFavoriteFishBreed = "shark"
)

// DeleteAllTypesNoContent is response for DeleteAllTypes operation.
type DeleteAllTypesNoContent struct{}

func (*DeleteAllTypesNoContent) deleteAllTypesRes() {}

// DeleteCategoryNoContent is response for DeleteCategory operation.
type DeleteCategoryNoContent struct{}

func (*DeleteCategoryNoContent) deleteCategoryRes() {}

// DeletePetNoContent is response for DeletePet operation.
type DeletePetNoContent struct{}

func (*DeletePetNoContent) deletePetRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

type ListAllTypesOKApplicationJSON []AllTypesList

func (ListAllTypesOKApplicationJSON) listAllTypesRes() {}

type ListCategoryOKApplicationJSON []CategoryList

func (ListCategoryOKApplicationJSON) listCategoryRes() {}

type ListCategoryPetsOKApplicationJSON []CategoryPetsList

func (ListCategoryPetsOKApplicationJSON) listCategoryPetsRes() {}

type ListPetCategoriesOKApplicationJSON []PetCategoriesList

func (ListPetCategoriesOKApplicationJSON) listPetCategoriesRes() {}

type ListPetFriendsOKApplicationJSON []PetFriendsList

func (ListPetFriendsOKApplicationJSON) listPetFriendsRes() {}

type ListPetOKApplicationJSON []PetList

func (ListPetOKApplicationJSON) listPetRes() {}

type ListUserOKApplicationJSON []UserList

func (ListUserOKApplicationJSON) listUserRes() {}

type ListUserPetsOKApplicationJSON []UserPetsList

func (ListUserPetsOKApplicationJSON) listUserPetsRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateUserReqFavoriteDogBreed returns new OptCreateUserReqFavoriteDogBreed with value set to v.
func NewOptCreateUserReqFavoriteDogBreed(v CreateUserReqFavoriteDogBreed) OptCreateUserReqFavoriteDogBreed {
	return OptCreateUserReqFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptCreateUserReqFavoriteDogBreed is optional CreateUserReqFavoriteDogBreed.
type OptCreateUserReqFavoriteDogBreed struct {
	Value CreateUserReqFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptCreateUserReqFavoriteDogBreed was set.
func (o OptCreateUserReqFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateUserReqFavoriteDogBreed) Reset() {
	var v CreateUserReqFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateUserReqFavoriteDogBreed) SetTo(v CreateUserReqFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateUserReqFavoriteDogBreed) Get() (v CreateUserReqFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateUserReqFavoriteDogBreed) Or(d CreateUserReqFavoriteDogBreed) CreateUserReqFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateUserReqFavoriteFishBreed returns new OptCreateUserReqFavoriteFishBreed with value set to v.
func NewOptCreateUserReqFavoriteFishBreed(v CreateUserReqFavoriteFishBreed) OptCreateUserReqFavoriteFishBreed {
	return OptCreateUserReqFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptCreateUserReqFavoriteFishBreed is optional CreateUserReqFavoriteFishBreed.
type OptCreateUserReqFavoriteFishBreed struct {
	Value CreateUserReqFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptCreateUserReqFavoriteFishBreed was set.
func (o OptCreateUserReqFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateUserReqFavoriteFishBreed) Reset() {
	var v CreateUserReqFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateUserReqFavoriteFishBreed) SetTo(v CreateUserReqFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateUserReqFavoriteFishBreed) Get() (v CreateUserReqFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateUserReqFavoriteFishBreed) Or(d CreateUserReqFavoriteFishBreed) CreateUserReqFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetCreateOwnerFavoriteDogBreed returns new OptPetCreateOwnerFavoriteDogBreed with value set to v.
func NewOptPetCreateOwnerFavoriteDogBreed(v PetCreateOwnerFavoriteDogBreed) OptPetCreateOwnerFavoriteDogBreed {
	return OptPetCreateOwnerFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetCreateOwnerFavoriteDogBreed is optional PetCreateOwnerFavoriteDogBreed.
type OptPetCreateOwnerFavoriteDogBreed struct {
	Value PetCreateOwnerFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptPetCreateOwnerFavoriteDogBreed was set.
func (o OptPetCreateOwnerFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetCreateOwnerFavoriteDogBreed) Reset() {
	var v PetCreateOwnerFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetCreateOwnerFavoriteDogBreed) SetTo(v PetCreateOwnerFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetCreateOwnerFavoriteDogBreed) Get() (v PetCreateOwnerFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetCreateOwnerFavoriteDogBreed) Or(d PetCreateOwnerFavoriteDogBreed) PetCreateOwnerFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetCreateOwnerFavoriteFishBreed returns new OptPetCreateOwnerFavoriteFishBreed with value set to v.
func NewOptPetCreateOwnerFavoriteFishBreed(v PetCreateOwnerFavoriteFishBreed) OptPetCreateOwnerFavoriteFishBreed {
	return OptPetCreateOwnerFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetCreateOwnerFavoriteFishBreed is optional PetCreateOwnerFavoriteFishBreed.
type OptPetCreateOwnerFavoriteFishBreed struct {
	Value PetCreateOwnerFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptPetCreateOwnerFavoriteFishBreed was set.
func (o OptPetCreateOwnerFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetCreateOwnerFavoriteFishBreed) Reset() {
	var v PetCreateOwnerFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetCreateOwnerFavoriteFishBreed) SetTo(v PetCreateOwnerFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetCreateOwnerFavoriteFishBreed) Get() (v PetCreateOwnerFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetCreateOwnerFavoriteFishBreed) Or(d PetCreateOwnerFavoriteFishBreed) PetCreateOwnerFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetOwnerReadFavoriteDogBreed returns new OptPetOwnerReadFavoriteDogBreed with value set to v.
func NewOptPetOwnerReadFavoriteDogBreed(v PetOwnerReadFavoriteDogBreed) OptPetOwnerReadFavoriteDogBreed {
	return OptPetOwnerReadFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetOwnerReadFavoriteDogBreed is optional PetOwnerReadFavoriteDogBreed.
type OptPetOwnerReadFavoriteDogBreed struct {
	Value PetOwnerReadFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptPetOwnerReadFavoriteDogBreed was set.
func (o OptPetOwnerReadFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetOwnerReadFavoriteDogBreed) Reset() {
	var v PetOwnerReadFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetOwnerReadFavoriteDogBreed) SetTo(v PetOwnerReadFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetOwnerReadFavoriteDogBreed) Get() (v PetOwnerReadFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetOwnerReadFavoriteDogBreed) Or(d PetOwnerReadFavoriteDogBreed) PetOwnerReadFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetOwnerReadFavoriteFishBreed returns new OptPetOwnerReadFavoriteFishBreed with value set to v.
func NewOptPetOwnerReadFavoriteFishBreed(v PetOwnerReadFavoriteFishBreed) OptPetOwnerReadFavoriteFishBreed {
	return OptPetOwnerReadFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetOwnerReadFavoriteFishBreed is optional PetOwnerReadFavoriteFishBreed.
type OptPetOwnerReadFavoriteFishBreed struct {
	Value PetOwnerReadFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptPetOwnerReadFavoriteFishBreed was set.
func (o OptPetOwnerReadFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetOwnerReadFavoriteFishBreed) Reset() {
	var v PetOwnerReadFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetOwnerReadFavoriteFishBreed) SetTo(v PetOwnerReadFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetOwnerReadFavoriteFishBreed) Get() (v PetOwnerReadFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetOwnerReadFavoriteFishBreed) Or(d PetOwnerReadFavoriteFishBreed) PetOwnerReadFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAllTypesReqState returns new OptUpdateAllTypesReqState with value set to v.
func NewOptUpdateAllTypesReqState(v UpdateAllTypesReqState) OptUpdateAllTypesReqState {
	return OptUpdateAllTypesReqState{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAllTypesReqState is optional UpdateAllTypesReqState.
type OptUpdateAllTypesReqState struct {
	Value UpdateAllTypesReqState
	Set   bool
}

// IsSet returns true if OptUpdateAllTypesReqState was set.
func (o OptUpdateAllTypesReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAllTypesReqState) Reset() {
	var v UpdateAllTypesReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAllTypesReqState) SetTo(v UpdateAllTypesReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAllTypesReqState) Get() (v UpdateAllTypesReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAllTypesReqState) Or(d UpdateAllTypesReqState) UpdateAllTypesReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReqFavoriteCatBreed returns new OptUpdateUserReqFavoriteCatBreed with value set to v.
func NewOptUpdateUserReqFavoriteCatBreed(v UpdateUserReqFavoriteCatBreed) OptUpdateUserReqFavoriteCatBreed {
	return OptUpdateUserReqFavoriteCatBreed{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReqFavoriteCatBreed is optional UpdateUserReqFavoriteCatBreed.
type OptUpdateUserReqFavoriteCatBreed struct {
	Value UpdateUserReqFavoriteCatBreed
	Set   bool
}

// IsSet returns true if OptUpdateUserReqFavoriteCatBreed was set.
func (o OptUpdateUserReqFavoriteCatBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReqFavoriteCatBreed) Reset() {
	var v UpdateUserReqFavoriteCatBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReqFavoriteCatBreed) SetTo(v UpdateUserReqFavoriteCatBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReqFavoriteCatBreed) Get() (v UpdateUserReqFavoriteCatBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReqFavoriteCatBreed) Or(d UpdateUserReqFavoriteCatBreed) UpdateUserReqFavoriteCatBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReqFavoriteDogBreed returns new OptUpdateUserReqFavoriteDogBreed with value set to v.
func NewOptUpdateUserReqFavoriteDogBreed(v UpdateUserReqFavoriteDogBreed) OptUpdateUserReqFavoriteDogBreed {
	return OptUpdateUserReqFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReqFavoriteDogBreed is optional UpdateUserReqFavoriteDogBreed.
type OptUpdateUserReqFavoriteDogBreed struct {
	Value UpdateUserReqFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUpdateUserReqFavoriteDogBreed was set.
func (o OptUpdateUserReqFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReqFavoriteDogBreed) Reset() {
	var v UpdateUserReqFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReqFavoriteDogBreed) SetTo(v UpdateUserReqFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReqFavoriteDogBreed) Get() (v UpdateUserReqFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReqFavoriteDogBreed) Or(d UpdateUserReqFavoriteDogBreed) UpdateUserReqFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReqFavoriteFishBreed returns new OptUpdateUserReqFavoriteFishBreed with value set to v.
func NewOptUpdateUserReqFavoriteFishBreed(v UpdateUserReqFavoriteFishBreed) OptUpdateUserReqFavoriteFishBreed {
	return OptUpdateUserReqFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReqFavoriteFishBreed is optional UpdateUserReqFavoriteFishBreed.
type OptUpdateUserReqFavoriteFishBreed struct {
	Value UpdateUserReqFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUpdateUserReqFavoriteFishBreed was set.
func (o OptUpdateUserReqFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReqFavoriteFishBreed) Reset() {
	var v UpdateUserReqFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReqFavoriteFishBreed) SetTo(v UpdateUserReqFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReqFavoriteFishBreed) Get() (v UpdateUserReqFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReqFavoriteFishBreed) Or(d UpdateUserReqFavoriteFishBreed) UpdateUserReqFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBestFriendReadFavoriteDogBreed returns new OptUserBestFriendReadFavoriteDogBreed with value set to v.
func NewOptUserBestFriendReadFavoriteDogBreed(v UserBestFriendReadFavoriteDogBreed) OptUserBestFriendReadFavoriteDogBreed {
	return OptUserBestFriendReadFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserBestFriendReadFavoriteDogBreed is optional UserBestFriendReadFavoriteDogBreed.
type OptUserBestFriendReadFavoriteDogBreed struct {
	Value UserBestFriendReadFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserBestFriendReadFavoriteDogBreed was set.
func (o OptUserBestFriendReadFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBestFriendReadFavoriteDogBreed) Reset() {
	var v UserBestFriendReadFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBestFriendReadFavoriteDogBreed) SetTo(v UserBestFriendReadFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBestFriendReadFavoriteDogBreed) Get() (v UserBestFriendReadFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBestFriendReadFavoriteDogBreed) Or(d UserBestFriendReadFavoriteDogBreed) UserBestFriendReadFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBestFriendReadFavoriteFishBreed returns new OptUserBestFriendReadFavoriteFishBreed with value set to v.
func NewOptUserBestFriendReadFavoriteFishBreed(v UserBestFriendReadFavoriteFishBreed) OptUserBestFriendReadFavoriteFishBreed {
	return OptUserBestFriendReadFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserBestFriendReadFavoriteFishBreed is optional UserBestFriendReadFavoriteFishBreed.
type OptUserBestFriendReadFavoriteFishBreed struct {
	Value UserBestFriendReadFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserBestFriendReadFavoriteFishBreed was set.
func (o OptUserBestFriendReadFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBestFriendReadFavoriteFishBreed) Reset() {
	var v UserBestFriendReadFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBestFriendReadFavoriteFishBreed) SetTo(v UserBestFriendReadFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBestFriendReadFavoriteFishBreed) Get() (v UserBestFriendReadFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBestFriendReadFavoriteFishBreed) Or(d UserBestFriendReadFavoriteFishBreed) UserBestFriendReadFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCreateFavoriteDogBreed returns new OptUserCreateFavoriteDogBreed with value set to v.
func NewOptUserCreateFavoriteDogBreed(v UserCreateFavoriteDogBreed) OptUserCreateFavoriteDogBreed {
	return OptUserCreateFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserCreateFavoriteDogBreed is optional UserCreateFavoriteDogBreed.
type OptUserCreateFavoriteDogBreed struct {
	Value UserCreateFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserCreateFavoriteDogBreed was set.
func (o OptUserCreateFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCreateFavoriteDogBreed) Reset() {
	var v UserCreateFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCreateFavoriteDogBreed) SetTo(v UserCreateFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCreateFavoriteDogBreed) Get() (v UserCreateFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCreateFavoriteDogBreed) Or(d UserCreateFavoriteDogBreed) UserCreateFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCreateFavoriteFishBreed returns new OptUserCreateFavoriteFishBreed with value set to v.
func NewOptUserCreateFavoriteFishBreed(v UserCreateFavoriteFishBreed) OptUserCreateFavoriteFishBreed {
	return OptUserCreateFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserCreateFavoriteFishBreed is optional UserCreateFavoriteFishBreed.
type OptUserCreateFavoriteFishBreed struct {
	Value UserCreateFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserCreateFavoriteFishBreed was set.
func (o OptUserCreateFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCreateFavoriteFishBreed) Reset() {
	var v UserCreateFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCreateFavoriteFishBreed) SetTo(v UserCreateFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCreateFavoriteFishBreed) Get() (v UserCreateFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCreateFavoriteFishBreed) Or(d UserCreateFavoriteFishBreed) UserCreateFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserListFavoriteDogBreed returns new OptUserListFavoriteDogBreed with value set to v.
func NewOptUserListFavoriteDogBreed(v UserListFavoriteDogBreed) OptUserListFavoriteDogBreed {
	return OptUserListFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserListFavoriteDogBreed is optional UserListFavoriteDogBreed.
type OptUserListFavoriteDogBreed struct {
	Value UserListFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserListFavoriteDogBreed was set.
func (o OptUserListFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserListFavoriteDogBreed) Reset() {
	var v UserListFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserListFavoriteDogBreed) SetTo(v UserListFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserListFavoriteDogBreed) Get() (v UserListFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserListFavoriteDogBreed) Or(d UserListFavoriteDogBreed) UserListFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserListFavoriteFishBreed returns new OptUserListFavoriteFishBreed with value set to v.
func NewOptUserListFavoriteFishBreed(v UserListFavoriteFishBreed) OptUserListFavoriteFishBreed {
	return OptUserListFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserListFavoriteFishBreed is optional UserListFavoriteFishBreed.
type OptUserListFavoriteFishBreed struct {
	Value UserListFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserListFavoriteFishBreed was set.
func (o OptUserListFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserListFavoriteFishBreed) Reset() {
	var v UserListFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserListFavoriteFishBreed) SetTo(v UserListFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserListFavoriteFishBreed) Get() (v UserListFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserListFavoriteFishBreed) Or(d UserListFavoriteFishBreed) UserListFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserReadFavoriteDogBreed returns new OptUserReadFavoriteDogBreed with value set to v.
func NewOptUserReadFavoriteDogBreed(v UserReadFavoriteDogBreed) OptUserReadFavoriteDogBreed {
	return OptUserReadFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserReadFavoriteDogBreed is optional UserReadFavoriteDogBreed.
type OptUserReadFavoriteDogBreed struct {
	Value UserReadFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserReadFavoriteDogBreed was set.
func (o OptUserReadFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserReadFavoriteDogBreed) Reset() {
	var v UserReadFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserReadFavoriteDogBreed) SetTo(v UserReadFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserReadFavoriteDogBreed) Get() (v UserReadFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserReadFavoriteDogBreed) Or(d UserReadFavoriteDogBreed) UserReadFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserReadFavoriteFishBreed returns new OptUserReadFavoriteFishBreed with value set to v.
func NewOptUserReadFavoriteFishBreed(v UserReadFavoriteFishBreed) OptUserReadFavoriteFishBreed {
	return OptUserReadFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserReadFavoriteFishBreed is optional UserReadFavoriteFishBreed.
type OptUserReadFavoriteFishBreed struct {
	Value UserReadFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserReadFavoriteFishBreed was set.
func (o OptUserReadFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserReadFavoriteFishBreed) Reset() {
	var v UserReadFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserReadFavoriteFishBreed) SetTo(v UserReadFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserReadFavoriteFishBreed) Get() (v UserReadFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserReadFavoriteFishBreed) Or(d UserReadFavoriteFishBreed) UserReadFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserUpdateFavoriteDogBreed returns new OptUserUpdateFavoriteDogBreed with value set to v.
func NewOptUserUpdateFavoriteDogBreed(v UserUpdateFavoriteDogBreed) OptUserUpdateFavoriteDogBreed {
	return OptUserUpdateFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserUpdateFavoriteDogBreed is optional UserUpdateFavoriteDogBreed.
type OptUserUpdateFavoriteDogBreed struct {
	Value UserUpdateFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserUpdateFavoriteDogBreed was set.
func (o OptUserUpdateFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserUpdateFavoriteDogBreed) Reset() {
	var v UserUpdateFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserUpdateFavoriteDogBreed) SetTo(v UserUpdateFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserUpdateFavoriteDogBreed) Get() (v UserUpdateFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserUpdateFavoriteDogBreed) Or(d UserUpdateFavoriteDogBreed) UserUpdateFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserUpdateFavoriteFishBreed returns new OptUserUpdateFavoriteFishBreed with value set to v.
func NewOptUserUpdateFavoriteFishBreed(v UserUpdateFavoriteFishBreed) OptUserUpdateFavoriteFishBreed {
	return OptUserUpdateFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserUpdateFavoriteFishBreed is optional UserUpdateFavoriteFishBreed.
type OptUserUpdateFavoriteFishBreed struct {
	Value UserUpdateFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserUpdateFavoriteFishBreed was set.
func (o OptUserUpdateFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserUpdateFavoriteFishBreed) Reset() {
	var v UserUpdateFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserUpdateFavoriteFishBreed) SetTo(v UserUpdateFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserUpdateFavoriteFishBreed) Get() (v UserUpdateFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserUpdateFavoriteFishBreed) Or(d UserUpdateFavoriteFishBreed) UserUpdateFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Pet_CategoriesList
type PetCategoriesList struct {
	ID       int       "json:\"id\""
	Name     string    "json:\"name\""
	Readonly OptString "json:\"readonly\""
}

// Ref: #/components/schemas/PetCreate
type PetCreate struct {
	ID         int                   "json:\"id\""
	Name       string                "json:\"name\""
	Weight     OptInt                "json:\"weight\""
	Birthday   OptDateTime           "json:\"birthday\""
	TagID      []byte                "json:\"tag_id\""
	Height     OptInt                "json:\"height\""
	Categories []PetCreateCategories "json:\"categories\""
	Owner      PetCreateOwner        "json:\"owner\""
}

func (*PetCreate) createPetRes() {}

// Ref: #/components/schemas/PetCreate_Categories
type PetCreateCategories struct {
	ID       int       "json:\"id\""
	Name     string    "json:\"name\""
	Readonly OptString "json:\"readonly\""
}

// Ref: #/components/schemas/PetCreate_Owner
type PetCreateOwner struct {
	ID                int                                "json:\"id\""
	Name              string                             "json:\"name\""
	Age               int64                              "json:\"age\""
	Height            OptInt64                           "json:\"height\""
	FavoriteCatBreed  PetCreateOwnerFavoriteCatBreed     "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptPetCreateOwnerFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptPetCreateOwnerFavoriteFishBreed "json:\"favorite_fish_breed\""
}

type PetCreateOwnerFavoriteCatBreed string

const (
	PetCreateOwnerFavoriteCatBreedSiamese PetCreateOwnerFavoriteCatBreed = "siamese"
	PetCreateOwnerFavoriteCatBreedBengal  PetCreateOwnerFavoriteCatBreed = "bengal"
	PetCreateOwnerFavoriteCatBreedLion    PetCreateOwnerFavoriteCatBreed = "lion"
	PetCreateOwnerFavoriteCatBreedTiger   PetCreateOwnerFavoriteCatBreed = "tiger"
	PetCreateOwnerFavoriteCatBreedLeopard PetCreateOwnerFavoriteCatBreed = "leopard"
	PetCreateOwnerFavoriteCatBreedOther   PetCreateOwnerFavoriteCatBreed = "other"
)

type PetCreateOwnerFavoriteDogBreed string

const (
	PetCreateOwnerFavoriteDogBreedKuro PetCreateOwnerFavoriteDogBreed = "Kuro"
)

type PetCreateOwnerFavoriteFishBreed string

const (
	PetCreateOwnerFavoriteFishBreedGold  PetCreateOwnerFavoriteFishBreed = "gold"
	PetCreateOwnerFavoriteFishBreedKoi   PetCreateOwnerFavoriteFishBreed = "koi"
	PetCreateOwnerFavoriteFishBreedShark PetCreateOwnerFavoriteFishBreed = "shark"
)

// Ref: #/components/schemas/Pet_FriendsList
type PetFriendsList struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
	TagID    []byte      "json:\"tag_id\""
	Height   OptInt      "json:\"height\""
}

// Ref: #/components/schemas/PetList
type PetList struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
	TagID    []byte      "json:\"tag_id\""
	Height   OptInt      "json:\"height\""
}

// Ref: #/components/schemas/Pet_OwnerRead
type PetOwnerRead struct {
	ID                int                              "json:\"id\""
	Name              string                           "json:\"name\""
	Age               int64                            "json:\"age\""
	Height            OptInt64                         "json:\"height\""
	FavoriteCatBreed  PetOwnerReadFavoriteCatBreed     "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptPetOwnerReadFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptPetOwnerReadFavoriteFishBreed "json:\"favorite_fish_breed\""
}

func (*PetOwnerRead) readPetOwnerRes() {}

type PetOwnerReadFavoriteCatBreed string

const (
	PetOwnerReadFavoriteCatBreedSiamese PetOwnerReadFavoriteCatBreed = "siamese"
	PetOwnerReadFavoriteCatBreedBengal  PetOwnerReadFavoriteCatBreed = "bengal"
	PetOwnerReadFavoriteCatBreedLion    PetOwnerReadFavoriteCatBreed = "lion"
	PetOwnerReadFavoriteCatBreedTiger   PetOwnerReadFavoriteCatBreed = "tiger"
	PetOwnerReadFavoriteCatBreedLeopard PetOwnerReadFavoriteCatBreed = "leopard"
	PetOwnerReadFavoriteCatBreedOther   PetOwnerReadFavoriteCatBreed = "other"
)

type PetOwnerReadFavoriteDogBreed string

const (
	PetOwnerReadFavoriteDogBreedKuro PetOwnerReadFavoriteDogBreed = "Kuro"
)

type PetOwnerReadFavoriteFishBreed string

const (
	PetOwnerReadFavoriteFishBreedGold  PetOwnerReadFavoriteFishBreed = "gold"
	PetOwnerReadFavoriteFishBreedKoi   PetOwnerReadFavoriteFishBreed = "koi"
	PetOwnerReadFavoriteFishBreedShark PetOwnerReadFavoriteFishBreed = "shark"
)

// Ref: #/components/schemas/PetRead
type PetRead struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
	TagID    []byte      "json:\"tag_id\""
	Height   OptInt      "json:\"height\""
}

func (*PetRead) readPetRes() {}

// Ref: #/components/schemas/PetUpdate
type PetUpdate struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
	TagID    []byte      "json:\"tag_id\""
	Height   OptInt      "json:\"height\""
}

func (*PetUpdate) updatePetRes() {}

type R400 struct {
	Code   int    "json:\"code\""
	Status string "json:\"status\""
	Errors jx.Raw "json:\"errors\""
}

func (*R400) createAllTypesRes()     {}
func (*R400) createCategoryRes()     {}
func (*R400) createPetRes()          {}
func (*R400) createUserRes()         {}
func (*R400) deleteAllTypesRes()     {}
func (*R400) deleteCategoryRes()     {}
func (*R400) deletePetRes()          {}
func (*R400) deleteUserRes()         {}
func (*R400) listAllTypesRes()       {}
func (*R400) listCategoryPetsRes()   {}
func (*R400) listCategoryRes()       {}
func (*R400) listPetCategoriesRes()  {}
func (*R400) listPetFriendsRes()     {}
func (*R400) listPetRes()            {}
func (*R400) listUserPetsRes()       {}
func (*R400) listUserRes()           {}
func (*R400) readAllTypesRes()       {}
func (*R400) readCategoryRes()       {}
func (*R400) readPetOwnerRes()       {}
func (*R400) readPetRes()            {}
func (*R400) readUserBestFriendRes() {}
func (*R400) readUserRes()           {}
func (*R400) updateAllTypesRes()     {}
func (*R400) updateCategoryRes()     {}
func (*R400) updatePetRes()          {}
func (*R400) updateUserRes()         {}

type R404 struct {
	Code   int    "json:\"code\""
	Status string "json:\"status\""
	Errors jx.Raw "json:\"errors\""
}

func (*R404) deleteAllTypesRes()     {}
func (*R404) deleteCategoryRes()     {}
func (*R404) deletePetRes()          {}
func (*R404) deleteUserRes()         {}
func (*R404) listAllTypesRes()       {}
func (*R404) listCategoryPetsRes()   {}
func (*R404) listCategoryRes()       {}
func (*R404) listPetCategoriesRes()  {}
func (*R404) listPetFriendsRes()     {}
func (*R404) listPetRes()            {}
func (*R404) listUserPetsRes()       {}
func (*R404) listUserRes()           {}
func (*R404) readAllTypesRes()       {}
func (*R404) readCategoryRes()       {}
func (*R404) readPetOwnerRes()       {}
func (*R404) readPetRes()            {}
func (*R404) readUserBestFriendRes() {}
func (*R404) readUserRes()           {}
func (*R404) updateAllTypesRes()     {}
func (*R404) updateCategoryRes()     {}
func (*R404) updatePetRes()          {}
func (*R404) updateUserRes()         {}

type R409 struct {
	Code   int    "json:\"code\""
	Status string "json:\"status\""
	Errors jx.Raw "json:\"errors\""
}

func (*R409) createAllTypesRes()     {}
func (*R409) createCategoryRes()     {}
func (*R409) createPetRes()          {}
func (*R409) createUserRes()         {}
func (*R409) deleteAllTypesRes()     {}
func (*R409) deleteCategoryRes()     {}
func (*R409) deletePetRes()          {}
func (*R409) deleteUserRes()         {}
func (*R409) listAllTypesRes()       {}
func (*R409) listCategoryPetsRes()   {}
func (*R409) listCategoryRes()       {}
func (*R409) listPetCategoriesRes()  {}
func (*R409) listPetFriendsRes()     {}
func (*R409) listPetRes()            {}
func (*R409) listUserPetsRes()       {}
func (*R409) listUserRes()           {}
func (*R409) readAllTypesRes()       {}
func (*R409) readCategoryRes()       {}
func (*R409) readPetOwnerRes()       {}
func (*R409) readPetRes()            {}
func (*R409) readUserBestFriendRes() {}
func (*R409) readUserRes()           {}
func (*R409) updateAllTypesRes()     {}
func (*R409) updateCategoryRes()     {}
func (*R409) updatePetRes()          {}
func (*R409) updateUserRes()         {}

type R500 struct {
	Code   int    "json:\"code\""
	Status string "json:\"status\""
	Errors jx.Raw "json:\"errors\""
}

func (*R500) createAllTypesRes()     {}
func (*R500) createCategoryRes()     {}
func (*R500) createPetRes()          {}
func (*R500) createUserRes()         {}
func (*R500) deleteAllTypesRes()     {}
func (*R500) deleteCategoryRes()     {}
func (*R500) deletePetRes()          {}
func (*R500) deleteUserRes()         {}
func (*R500) listAllTypesRes()       {}
func (*R500) listCategoryPetsRes()   {}
func (*R500) listCategoryRes()       {}
func (*R500) listPetCategoriesRes()  {}
func (*R500) listPetFriendsRes()     {}
func (*R500) listPetRes()            {}
func (*R500) listUserPetsRes()       {}
func (*R500) listUserRes()           {}
func (*R500) readAllTypesRes()       {}
func (*R500) readCategoryRes()       {}
func (*R500) readPetOwnerRes()       {}
func (*R500) readPetRes()            {}
func (*R500) readUserBestFriendRes() {}
func (*R500) readUserRes()           {}
func (*R500) updateAllTypesRes()     {}
func (*R500) updateCategoryRes()     {}
func (*R500) updatePetRes()          {}
func (*R500) updateUserRes()         {}

type UpdateAllTypesReq struct {
	Int        OptInt                    "json:\"int\""
	Int8       OptInt32                  "json:\"int8\""
	Int16      OptInt32                  "json:\"int16\""
	Int32      OptInt32                  "json:\"int32\""
	Int64      OptInt64                  "json:\"int64\""
	Uint       OptInt64                  "json:\"uint\""
	Uint8      OptInt32                  "json:\"uint8\""
	Uint16     OptInt32                  "json:\"uint16\""
	Uint32     OptInt64                  "json:\"uint32\""
	Uint64     OptInt64                  "json:\"uint64\""
	Float32    OptFloat32                "json:\"float32\""
	Float64    OptFloat64                "json:\"float64\""
	StringType OptString                 "json:\"string_type\""
	Bool       OptBool                   "json:\"bool\""
	UUID       OptUUID                   "json:\"uuid\""
	Time       OptDateTime               "json:\"time\""
	Text       OptString                 "json:\"text\""
	State      OptUpdateAllTypesReqState "json:\"state\""
	Bytes      []byte                    "json:\"bytes\""
}

type UpdateAllTypesReqState string

const (
	UpdateAllTypesReqStateOn  UpdateAllTypesReqState = "on"
	UpdateAllTypesReqStateOff UpdateAllTypesReqState = "off"
)

type UpdateCategoryReq struct {
	Name OptString "json:\"name\""
	Pets []int     "json:\"pets\""
}

type UpdatePetReq struct {
	Name       OptString   "json:\"name\""
	Weight     OptInt      "json:\"weight\""
	Birthday   OptDateTime "json:\"birthday\""
	TagID      []byte      "json:\"tag_id\""
	Height     OptInt      "json:\"height\""
	Categories []int       "json:\"categories\""
	Owner      OptInt      "json:\"owner\""
	Friends    []int       "json:\"friends\""
}

type UpdateUserReq struct {
	Name              OptString                         "json:\"name\""
	Age               OptInt64                          "json:\"age\""
	Height            OptInt64                          "json:\"height\""
	FavoriteCatBreed  OptUpdateUserReqFavoriteCatBreed  "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptUpdateUserReqFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptUpdateUserReqFavoriteFishBreed "json:\"favorite_fish_breed\""
	Pets              []int                             "json:\"pets\""
	BestFriend        OptInt                            "json:\"best_friend\""
}

type UpdateUserReqFavoriteCatBreed string

const (
	UpdateUserReqFavoriteCatBreedSiamese UpdateUserReqFavoriteCatBreed = "siamese"
	UpdateUserReqFavoriteCatBreedBengal  UpdateUserReqFavoriteCatBreed = "bengal"
	UpdateUserReqFavoriteCatBreedLion    UpdateUserReqFavoriteCatBreed = "lion"
	UpdateUserReqFavoriteCatBreedTiger   UpdateUserReqFavoriteCatBreed = "tiger"
	UpdateUserReqFavoriteCatBreedLeopard UpdateUserReqFavoriteCatBreed = "leopard"
	UpdateUserReqFavoriteCatBreedOther   UpdateUserReqFavoriteCatBreed = "other"
)

type UpdateUserReqFavoriteDogBreed string

const (
	UpdateUserReqFavoriteDogBreedKuro UpdateUserReqFavoriteDogBreed = "Kuro"
)

type UpdateUserReqFavoriteFishBreed string

const (
	UpdateUserReqFavoriteFishBreedGold  UpdateUserReqFavoriteFishBreed = "gold"
	UpdateUserReqFavoriteFishBreedKoi   UpdateUserReqFavoriteFishBreed = "koi"
	UpdateUserReqFavoriteFishBreedShark UpdateUserReqFavoriteFishBreed = "shark"
)

// Ref: #/components/schemas/User_BestFriendRead
type UserBestFriendRead struct {
	ID                int                                    "json:\"id\""
	Name              string                                 "json:\"name\""
	Age               int64                                  "json:\"age\""
	Height            OptInt64                               "json:\"height\""
	FavoriteCatBreed  UserBestFriendReadFavoriteCatBreed     "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptUserBestFriendReadFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptUserBestFriendReadFavoriteFishBreed "json:\"favorite_fish_breed\""
}

func (*UserBestFriendRead) readUserBestFriendRes() {}

type UserBestFriendReadFavoriteCatBreed string

const (
	UserBestFriendReadFavoriteCatBreedSiamese UserBestFriendReadFavoriteCatBreed = "siamese"
	UserBestFriendReadFavoriteCatBreedBengal  UserBestFriendReadFavoriteCatBreed = "bengal"
	UserBestFriendReadFavoriteCatBreedLion    UserBestFriendReadFavoriteCatBreed = "lion"
	UserBestFriendReadFavoriteCatBreedTiger   UserBestFriendReadFavoriteCatBreed = "tiger"
	UserBestFriendReadFavoriteCatBreedLeopard UserBestFriendReadFavoriteCatBreed = "leopard"
	UserBestFriendReadFavoriteCatBreedOther   UserBestFriendReadFavoriteCatBreed = "other"
)

type UserBestFriendReadFavoriteDogBreed string

const (
	UserBestFriendReadFavoriteDogBreedKuro UserBestFriendReadFavoriteDogBreed = "Kuro"
)

type UserBestFriendReadFavoriteFishBreed string

const (
	UserBestFriendReadFavoriteFishBreedGold  UserBestFriendReadFavoriteFishBreed = "gold"
	UserBestFriendReadFavoriteFishBreedKoi   UserBestFriendReadFavoriteFishBreed = "koi"
	UserBestFriendReadFavoriteFishBreedShark UserBestFriendReadFavoriteFishBreed = "shark"
)

// Ref: #/components/schemas/UserCreate
type UserCreate struct {
	ID                int                            "json:\"id\""
	Name              string                         "json:\"name\""
	Age               int64                          "json:\"age\""
	Height            OptInt64                       "json:\"height\""
	FavoriteCatBreed  UserCreateFavoriteCatBreed     "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptUserCreateFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptUserCreateFavoriteFishBreed "json:\"favorite_fish_breed\""
}

func (*UserCreate) createUserRes() {}

type UserCreateFavoriteCatBreed string

const (
	UserCreateFavoriteCatBreedSiamese UserCreateFavoriteCatBreed = "siamese"
	UserCreateFavoriteCatBreedBengal  UserCreateFavoriteCatBreed = "bengal"
	UserCreateFavoriteCatBreedLion    UserCreateFavoriteCatBreed = "lion"
	UserCreateFavoriteCatBreedTiger   UserCreateFavoriteCatBreed = "tiger"
	UserCreateFavoriteCatBreedLeopard UserCreateFavoriteCatBreed = "leopard"
	UserCreateFavoriteCatBreedOther   UserCreateFavoriteCatBreed = "other"
)

type UserCreateFavoriteDogBreed string

const (
	UserCreateFavoriteDogBreedKuro UserCreateFavoriteDogBreed = "Kuro"
)

type UserCreateFavoriteFishBreed string

const (
	UserCreateFavoriteFishBreedGold  UserCreateFavoriteFishBreed = "gold"
	UserCreateFavoriteFishBreedKoi   UserCreateFavoriteFishBreed = "koi"
	UserCreateFavoriteFishBreedShark UserCreateFavoriteFishBreed = "shark"
)

// Ref: #/components/schemas/UserList
type UserList struct {
	ID                int                          "json:\"id\""
	Name              string                       "json:\"name\""
	Age               int64                        "json:\"age\""
	Height            OptInt64                     "json:\"height\""
	FavoriteCatBreed  UserListFavoriteCatBreed     "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptUserListFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptUserListFavoriteFishBreed "json:\"favorite_fish_breed\""
}

type UserListFavoriteCatBreed string

const (
	UserListFavoriteCatBreedSiamese UserListFavoriteCatBreed = "siamese"
	UserListFavoriteCatBreedBengal  UserListFavoriteCatBreed = "bengal"
	UserListFavoriteCatBreedLion    UserListFavoriteCatBreed = "lion"
	UserListFavoriteCatBreedTiger   UserListFavoriteCatBreed = "tiger"
	UserListFavoriteCatBreedLeopard UserListFavoriteCatBreed = "leopard"
	UserListFavoriteCatBreedOther   UserListFavoriteCatBreed = "other"
)

type UserListFavoriteDogBreed string

const (
	UserListFavoriteDogBreedKuro UserListFavoriteDogBreed = "Kuro"
)

type UserListFavoriteFishBreed string

const (
	UserListFavoriteFishBreedGold  UserListFavoriteFishBreed = "gold"
	UserListFavoriteFishBreedKoi   UserListFavoriteFishBreed = "koi"
	UserListFavoriteFishBreedShark UserListFavoriteFishBreed = "shark"
)

// Ref: #/components/schemas/User_PetsList
type UserPetsList struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
	TagID    []byte      "json:\"tag_id\""
	Height   OptInt      "json:\"height\""
}

// Ref: #/components/schemas/UserRead
type UserRead struct {
	ID                int                          "json:\"id\""
	Name              string                       "json:\"name\""
	Age               int64                        "json:\"age\""
	Height            OptInt64                     "json:\"height\""
	FavoriteCatBreed  UserReadFavoriteCatBreed     "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptUserReadFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptUserReadFavoriteFishBreed "json:\"favorite_fish_breed\""
}

func (*UserRead) readUserRes() {}

type UserReadFavoriteCatBreed string

const (
	UserReadFavoriteCatBreedSiamese UserReadFavoriteCatBreed = "siamese"
	UserReadFavoriteCatBreedBengal  UserReadFavoriteCatBreed = "bengal"
	UserReadFavoriteCatBreedLion    UserReadFavoriteCatBreed = "lion"
	UserReadFavoriteCatBreedTiger   UserReadFavoriteCatBreed = "tiger"
	UserReadFavoriteCatBreedLeopard UserReadFavoriteCatBreed = "leopard"
	UserReadFavoriteCatBreedOther   UserReadFavoriteCatBreed = "other"
)

type UserReadFavoriteDogBreed string

const (
	UserReadFavoriteDogBreedKuro UserReadFavoriteDogBreed = "Kuro"
)

type UserReadFavoriteFishBreed string

const (
	UserReadFavoriteFishBreedGold  UserReadFavoriteFishBreed = "gold"
	UserReadFavoriteFishBreedKoi   UserReadFavoriteFishBreed = "koi"
	UserReadFavoriteFishBreedShark UserReadFavoriteFishBreed = "shark"
)

// Ref: #/components/schemas/UserUpdate
type UserUpdate struct {
	ID                int                            "json:\"id\""
	Name              string                         "json:\"name\""
	Age               int64                          "json:\"age\""
	Height            OptInt64                       "json:\"height\""
	FavoriteCatBreed  UserUpdateFavoriteCatBreed     "json:\"favorite_cat_breed\""
	FavoriteDogBreed  OptUserUpdateFavoriteDogBreed  "json:\"favorite_dog_breed\""
	FavoriteFishBreed OptUserUpdateFavoriteFishBreed "json:\"favorite_fish_breed\""
}

func (*UserUpdate) updateUserRes() {}

type UserUpdateFavoriteCatBreed string

const (
	UserUpdateFavoriteCatBreedSiamese UserUpdateFavoriteCatBreed = "siamese"
	UserUpdateFavoriteCatBreedBengal  UserUpdateFavoriteCatBreed = "bengal"
	UserUpdateFavoriteCatBreedLion    UserUpdateFavoriteCatBreed = "lion"
	UserUpdateFavoriteCatBreedTiger   UserUpdateFavoriteCatBreed = "tiger"
	UserUpdateFavoriteCatBreedLeopard UserUpdateFavoriteCatBreed = "leopard"
	UserUpdateFavoriteCatBreedOther   UserUpdateFavoriteCatBreed = "other"
)

type UserUpdateFavoriteDogBreed string

const (
	UserUpdateFavoriteDogBreedKuro UserUpdateFavoriteDogBreed = "Kuro"
)

type UserUpdateFavoriteFishBreed string

const (
	UserUpdateFavoriteFishBreedGold  UserUpdateFavoriteFishBreed = "gold"
	UserUpdateFavoriteFishBreedKoi   UserUpdateFavoriteFishBreed = "koi"
	UserUpdateFavoriteFishBreedShark UserUpdateFavoriteFishBreed = "shark"
)
