// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/AllTypesCreate
type AllTypesCreate struct {
	ID         int64               `json:"id"`
	Int        int                 `json:"int"`
	Int8       int32               `json:"int8"`
	Int16      int32               `json:"int16"`
	Int32      int32               `json:"int32"`
	Int64      int64               `json:"int64"`
	Uint       int64               `json:"uint"`
	Uint8      int32               `json:"uint8"`
	Uint16     int32               `json:"uint16"`
	Uint32     int64               `json:"uint32"`
	Uint64     int64               `json:"uint64"`
	Float32    float32             `json:"float32"`
	Float64    float64             `json:"float64"`
	StringType string              `json:"string_type"`
	Bool       bool                `json:"bool"`
	UUID       uuid.UUID           `json:"uuid"`
	Time       time.Time           `json:"time"`
	Text       string              `json:"text"`
	State      AllTypesCreateState `json:"state"`
	Bytes      []byte              `json:"bytes"`
	Nilable    OptString           `json:"nilable"`
}

// GetID returns the value of ID.
func (s *AllTypesCreate) GetID() int64 {
	return s.ID
}

// GetInt returns the value of Int.
func (s *AllTypesCreate) GetInt() int {
	return s.Int
}

// GetInt8 returns the value of Int8.
func (s *AllTypesCreate) GetInt8() int32 {
	return s.Int8
}

// GetInt16 returns the value of Int16.
func (s *AllTypesCreate) GetInt16() int32 {
	return s.Int16
}

// GetInt32 returns the value of Int32.
func (s *AllTypesCreate) GetInt32() int32 {
	return s.Int32
}

// GetInt64 returns the value of Int64.
func (s *AllTypesCreate) GetInt64() int64 {
	return s.Int64
}

// GetUint returns the value of Uint.
func (s *AllTypesCreate) GetUint() int64 {
	return s.Uint
}

// GetUint8 returns the value of Uint8.
func (s *AllTypesCreate) GetUint8() int32 {
	return s.Uint8
}

// GetUint16 returns the value of Uint16.
func (s *AllTypesCreate) GetUint16() int32 {
	return s.Uint16
}

// GetUint32 returns the value of Uint32.
func (s *AllTypesCreate) GetUint32() int64 {
	return s.Uint32
}

// GetUint64 returns the value of Uint64.
func (s *AllTypesCreate) GetUint64() int64 {
	return s.Uint64
}

// GetFloat32 returns the value of Float32.
func (s *AllTypesCreate) GetFloat32() float32 {
	return s.Float32
}

// GetFloat64 returns the value of Float64.
func (s *AllTypesCreate) GetFloat64() float64 {
	return s.Float64
}

// GetStringType returns the value of StringType.
func (s *AllTypesCreate) GetStringType() string {
	return s.StringType
}

// GetBool returns the value of Bool.
func (s *AllTypesCreate) GetBool() bool {
	return s.Bool
}

// GetUUID returns the value of UUID.
func (s *AllTypesCreate) GetUUID() uuid.UUID {
	return s.UUID
}

// GetTime returns the value of Time.
func (s *AllTypesCreate) GetTime() time.Time {
	return s.Time
}

// GetText returns the value of Text.
func (s *AllTypesCreate) GetText() string {
	return s.Text
}

// GetState returns the value of State.
func (s *AllTypesCreate) GetState() AllTypesCreateState {
	return s.State
}

// GetBytes returns the value of Bytes.
func (s *AllTypesCreate) GetBytes() []byte {
	return s.Bytes
}

// GetNilable returns the value of Nilable.
func (s *AllTypesCreate) GetNilable() OptString {
	return s.Nilable
}

// SetID sets the value of ID.
func (s *AllTypesCreate) SetID(val int64) {
	s.ID = val
}

// SetInt sets the value of Int.
func (s *AllTypesCreate) SetInt(val int) {
	s.Int = val
}

// SetInt8 sets the value of Int8.
func (s *AllTypesCreate) SetInt8(val int32) {
	s.Int8 = val
}

// SetInt16 sets the value of Int16.
func (s *AllTypesCreate) SetInt16(val int32) {
	s.Int16 = val
}

// SetInt32 sets the value of Int32.
func (s *AllTypesCreate) SetInt32(val int32) {
	s.Int32 = val
}

// SetInt64 sets the value of Int64.
func (s *AllTypesCreate) SetInt64(val int64) {
	s.Int64 = val
}

// SetUint sets the value of Uint.
func (s *AllTypesCreate) SetUint(val int64) {
	s.Uint = val
}

// SetUint8 sets the value of Uint8.
func (s *AllTypesCreate) SetUint8(val int32) {
	s.Uint8 = val
}

// SetUint16 sets the value of Uint16.
func (s *AllTypesCreate) SetUint16(val int32) {
	s.Uint16 = val
}

// SetUint32 sets the value of Uint32.
func (s *AllTypesCreate) SetUint32(val int64) {
	s.Uint32 = val
}

// SetUint64 sets the value of Uint64.
func (s *AllTypesCreate) SetUint64(val int64) {
	s.Uint64 = val
}

// SetFloat32 sets the value of Float32.
func (s *AllTypesCreate) SetFloat32(val float32) {
	s.Float32 = val
}

// SetFloat64 sets the value of Float64.
func (s *AllTypesCreate) SetFloat64(val float64) {
	s.Float64 = val
}

// SetStringType sets the value of StringType.
func (s *AllTypesCreate) SetStringType(val string) {
	s.StringType = val
}

// SetBool sets the value of Bool.
func (s *AllTypesCreate) SetBool(val bool) {
	s.Bool = val
}

// SetUUID sets the value of UUID.
func (s *AllTypesCreate) SetUUID(val uuid.UUID) {
	s.UUID = val
}

// SetTime sets the value of Time.
func (s *AllTypesCreate) SetTime(val time.Time) {
	s.Time = val
}

// SetText sets the value of Text.
func (s *AllTypesCreate) SetText(val string) {
	s.Text = val
}

// SetState sets the value of State.
func (s *AllTypesCreate) SetState(val AllTypesCreateState) {
	s.State = val
}

// SetBytes sets the value of Bytes.
func (s *AllTypesCreate) SetBytes(val []byte) {
	s.Bytes = val
}

// SetNilable sets the value of Nilable.
func (s *AllTypesCreate) SetNilable(val OptString) {
	s.Nilable = val
}

func (*AllTypesCreate) createAllTypesRes() {}

type AllTypesCreateState string

const (
	AllTypesCreateStateOn  AllTypesCreateState = "on"
	AllTypesCreateStateOff AllTypesCreateState = "off"
)

// MarshalText implements encoding.TextMarshaler.
func (s AllTypesCreateState) MarshalText() ([]byte, error) {
	switch s {
	case AllTypesCreateStateOn:
		return []byte(s), nil
	case AllTypesCreateStateOff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AllTypesCreateState) UnmarshalText(data []byte) error {
	switch AllTypesCreateState(data) {
	case AllTypesCreateStateOn:
		*s = AllTypesCreateStateOn
		return nil
	case AllTypesCreateStateOff:
		*s = AllTypesCreateStateOff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AllTypesList
type AllTypesList struct {
	ID         int64             `json:"id"`
	Int        int               `json:"int"`
	Int8       int32             `json:"int8"`
	Int16      int32             `json:"int16"`
	Int32      int32             `json:"int32"`
	Int64      int64             `json:"int64"`
	Uint       int64             `json:"uint"`
	Uint8      int32             `json:"uint8"`
	Uint16     int32             `json:"uint16"`
	Uint32     int64             `json:"uint32"`
	Uint64     int64             `json:"uint64"`
	Float32    float32           `json:"float32"`
	Float64    float64           `json:"float64"`
	StringType string            `json:"string_type"`
	Bool       bool              `json:"bool"`
	UUID       uuid.UUID         `json:"uuid"`
	Time       time.Time         `json:"time"`
	Text       string            `json:"text"`
	State      AllTypesListState `json:"state"`
	Bytes      []byte            `json:"bytes"`
	Nilable    OptString         `json:"nilable"`
}

// GetID returns the value of ID.
func (s *AllTypesList) GetID() int64 {
	return s.ID
}

// GetInt returns the value of Int.
func (s *AllTypesList) GetInt() int {
	return s.Int
}

// GetInt8 returns the value of Int8.
func (s *AllTypesList) GetInt8() int32 {
	return s.Int8
}

// GetInt16 returns the value of Int16.
func (s *AllTypesList) GetInt16() int32 {
	return s.Int16
}

// GetInt32 returns the value of Int32.
func (s *AllTypesList) GetInt32() int32 {
	return s.Int32
}

// GetInt64 returns the value of Int64.
func (s *AllTypesList) GetInt64() int64 {
	return s.Int64
}

// GetUint returns the value of Uint.
func (s *AllTypesList) GetUint() int64 {
	return s.Uint
}

// GetUint8 returns the value of Uint8.
func (s *AllTypesList) GetUint8() int32 {
	return s.Uint8
}

// GetUint16 returns the value of Uint16.
func (s *AllTypesList) GetUint16() int32 {
	return s.Uint16
}

// GetUint32 returns the value of Uint32.
func (s *AllTypesList) GetUint32() int64 {
	return s.Uint32
}

// GetUint64 returns the value of Uint64.
func (s *AllTypesList) GetUint64() int64 {
	return s.Uint64
}

// GetFloat32 returns the value of Float32.
func (s *AllTypesList) GetFloat32() float32 {
	return s.Float32
}

// GetFloat64 returns the value of Float64.
func (s *AllTypesList) GetFloat64() float64 {
	return s.Float64
}

// GetStringType returns the value of StringType.
func (s *AllTypesList) GetStringType() string {
	return s.StringType
}

// GetBool returns the value of Bool.
func (s *AllTypesList) GetBool() bool {
	return s.Bool
}

// GetUUID returns the value of UUID.
func (s *AllTypesList) GetUUID() uuid.UUID {
	return s.UUID
}

// GetTime returns the value of Time.
func (s *AllTypesList) GetTime() time.Time {
	return s.Time
}

// GetText returns the value of Text.
func (s *AllTypesList) GetText() string {
	return s.Text
}

// GetState returns the value of State.
func (s *AllTypesList) GetState() AllTypesListState {
	return s.State
}

// GetBytes returns the value of Bytes.
func (s *AllTypesList) GetBytes() []byte {
	return s.Bytes
}

// GetNilable returns the value of Nilable.
func (s *AllTypesList) GetNilable() OptString {
	return s.Nilable
}

// SetID sets the value of ID.
func (s *AllTypesList) SetID(val int64) {
	s.ID = val
}

// SetInt sets the value of Int.
func (s *AllTypesList) SetInt(val int) {
	s.Int = val
}

// SetInt8 sets the value of Int8.
func (s *AllTypesList) SetInt8(val int32) {
	s.Int8 = val
}

// SetInt16 sets the value of Int16.
func (s *AllTypesList) SetInt16(val int32) {
	s.Int16 = val
}

// SetInt32 sets the value of Int32.
func (s *AllTypesList) SetInt32(val int32) {
	s.Int32 = val
}

// SetInt64 sets the value of Int64.
func (s *AllTypesList) SetInt64(val int64) {
	s.Int64 = val
}

// SetUint sets the value of Uint.
func (s *AllTypesList) SetUint(val int64) {
	s.Uint = val
}

// SetUint8 sets the value of Uint8.
func (s *AllTypesList) SetUint8(val int32) {
	s.Uint8 = val
}

// SetUint16 sets the value of Uint16.
func (s *AllTypesList) SetUint16(val int32) {
	s.Uint16 = val
}

// SetUint32 sets the value of Uint32.
func (s *AllTypesList) SetUint32(val int64) {
	s.Uint32 = val
}

// SetUint64 sets the value of Uint64.
func (s *AllTypesList) SetUint64(val int64) {
	s.Uint64 = val
}

// SetFloat32 sets the value of Float32.
func (s *AllTypesList) SetFloat32(val float32) {
	s.Float32 = val
}

// SetFloat64 sets the value of Float64.
func (s *AllTypesList) SetFloat64(val float64) {
	s.Float64 = val
}

// SetStringType sets the value of StringType.
func (s *AllTypesList) SetStringType(val string) {
	s.StringType = val
}

// SetBool sets the value of Bool.
func (s *AllTypesList) SetBool(val bool) {
	s.Bool = val
}

// SetUUID sets the value of UUID.
func (s *AllTypesList) SetUUID(val uuid.UUID) {
	s.UUID = val
}

// SetTime sets the value of Time.
func (s *AllTypesList) SetTime(val time.Time) {
	s.Time = val
}

// SetText sets the value of Text.
func (s *AllTypesList) SetText(val string) {
	s.Text = val
}

// SetState sets the value of State.
func (s *AllTypesList) SetState(val AllTypesListState) {
	s.State = val
}

// SetBytes sets the value of Bytes.
func (s *AllTypesList) SetBytes(val []byte) {
	s.Bytes = val
}

// SetNilable sets the value of Nilable.
func (s *AllTypesList) SetNilable(val OptString) {
	s.Nilable = val
}

type AllTypesListState string

const (
	AllTypesListStateOn  AllTypesListState = "on"
	AllTypesListStateOff AllTypesListState = "off"
)

// MarshalText implements encoding.TextMarshaler.
func (s AllTypesListState) MarshalText() ([]byte, error) {
	switch s {
	case AllTypesListStateOn:
		return []byte(s), nil
	case AllTypesListStateOff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AllTypesListState) UnmarshalText(data []byte) error {
	switch AllTypesListState(data) {
	case AllTypesListStateOn:
		*s = AllTypesListStateOn
		return nil
	case AllTypesListStateOff:
		*s = AllTypesListStateOff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AllTypesRead
type AllTypesRead struct {
	ID         int64             `json:"id"`
	Int        int               `json:"int"`
	Int8       int32             `json:"int8"`
	Int16      int32             `json:"int16"`
	Int32      int32             `json:"int32"`
	Int64      int64             `json:"int64"`
	Uint       int64             `json:"uint"`
	Uint8      int32             `json:"uint8"`
	Uint16     int32             `json:"uint16"`
	Uint32     int64             `json:"uint32"`
	Uint64     int64             `json:"uint64"`
	Float32    float32           `json:"float32"`
	Float64    float64           `json:"float64"`
	StringType string            `json:"string_type"`
	Bool       bool              `json:"bool"`
	UUID       uuid.UUID         `json:"uuid"`
	Time       time.Time         `json:"time"`
	Text       string            `json:"text"`
	State      AllTypesReadState `json:"state"`
	Bytes      []byte            `json:"bytes"`
	Nilable    OptString         `json:"nilable"`
}

// GetID returns the value of ID.
func (s *AllTypesRead) GetID() int64 {
	return s.ID
}

// GetInt returns the value of Int.
func (s *AllTypesRead) GetInt() int {
	return s.Int
}

// GetInt8 returns the value of Int8.
func (s *AllTypesRead) GetInt8() int32 {
	return s.Int8
}

// GetInt16 returns the value of Int16.
func (s *AllTypesRead) GetInt16() int32 {
	return s.Int16
}

// GetInt32 returns the value of Int32.
func (s *AllTypesRead) GetInt32() int32 {
	return s.Int32
}

// GetInt64 returns the value of Int64.
func (s *AllTypesRead) GetInt64() int64 {
	return s.Int64
}

// GetUint returns the value of Uint.
func (s *AllTypesRead) GetUint() int64 {
	return s.Uint
}

// GetUint8 returns the value of Uint8.
func (s *AllTypesRead) GetUint8() int32 {
	return s.Uint8
}

// GetUint16 returns the value of Uint16.
func (s *AllTypesRead) GetUint16() int32 {
	return s.Uint16
}

// GetUint32 returns the value of Uint32.
func (s *AllTypesRead) GetUint32() int64 {
	return s.Uint32
}

// GetUint64 returns the value of Uint64.
func (s *AllTypesRead) GetUint64() int64 {
	return s.Uint64
}

// GetFloat32 returns the value of Float32.
func (s *AllTypesRead) GetFloat32() float32 {
	return s.Float32
}

// GetFloat64 returns the value of Float64.
func (s *AllTypesRead) GetFloat64() float64 {
	return s.Float64
}

// GetStringType returns the value of StringType.
func (s *AllTypesRead) GetStringType() string {
	return s.StringType
}

// GetBool returns the value of Bool.
func (s *AllTypesRead) GetBool() bool {
	return s.Bool
}

// GetUUID returns the value of UUID.
func (s *AllTypesRead) GetUUID() uuid.UUID {
	return s.UUID
}

// GetTime returns the value of Time.
func (s *AllTypesRead) GetTime() time.Time {
	return s.Time
}

// GetText returns the value of Text.
func (s *AllTypesRead) GetText() string {
	return s.Text
}

// GetState returns the value of State.
func (s *AllTypesRead) GetState() AllTypesReadState {
	return s.State
}

// GetBytes returns the value of Bytes.
func (s *AllTypesRead) GetBytes() []byte {
	return s.Bytes
}

// GetNilable returns the value of Nilable.
func (s *AllTypesRead) GetNilable() OptString {
	return s.Nilable
}

// SetID sets the value of ID.
func (s *AllTypesRead) SetID(val int64) {
	s.ID = val
}

// SetInt sets the value of Int.
func (s *AllTypesRead) SetInt(val int) {
	s.Int = val
}

// SetInt8 sets the value of Int8.
func (s *AllTypesRead) SetInt8(val int32) {
	s.Int8 = val
}

// SetInt16 sets the value of Int16.
func (s *AllTypesRead) SetInt16(val int32) {
	s.Int16 = val
}

// SetInt32 sets the value of Int32.
func (s *AllTypesRead) SetInt32(val int32) {
	s.Int32 = val
}

// SetInt64 sets the value of Int64.
func (s *AllTypesRead) SetInt64(val int64) {
	s.Int64 = val
}

// SetUint sets the value of Uint.
func (s *AllTypesRead) SetUint(val int64) {
	s.Uint = val
}

// SetUint8 sets the value of Uint8.
func (s *AllTypesRead) SetUint8(val int32) {
	s.Uint8 = val
}

// SetUint16 sets the value of Uint16.
func (s *AllTypesRead) SetUint16(val int32) {
	s.Uint16 = val
}

// SetUint32 sets the value of Uint32.
func (s *AllTypesRead) SetUint32(val int64) {
	s.Uint32 = val
}

// SetUint64 sets the value of Uint64.
func (s *AllTypesRead) SetUint64(val int64) {
	s.Uint64 = val
}

// SetFloat32 sets the value of Float32.
func (s *AllTypesRead) SetFloat32(val float32) {
	s.Float32 = val
}

// SetFloat64 sets the value of Float64.
func (s *AllTypesRead) SetFloat64(val float64) {
	s.Float64 = val
}

// SetStringType sets the value of StringType.
func (s *AllTypesRead) SetStringType(val string) {
	s.StringType = val
}

// SetBool sets the value of Bool.
func (s *AllTypesRead) SetBool(val bool) {
	s.Bool = val
}

// SetUUID sets the value of UUID.
func (s *AllTypesRead) SetUUID(val uuid.UUID) {
	s.UUID = val
}

// SetTime sets the value of Time.
func (s *AllTypesRead) SetTime(val time.Time) {
	s.Time = val
}

// SetText sets the value of Text.
func (s *AllTypesRead) SetText(val string) {
	s.Text = val
}

// SetState sets the value of State.
func (s *AllTypesRead) SetState(val AllTypesReadState) {
	s.State = val
}

// SetBytes sets the value of Bytes.
func (s *AllTypesRead) SetBytes(val []byte) {
	s.Bytes = val
}

// SetNilable sets the value of Nilable.
func (s *AllTypesRead) SetNilable(val OptString) {
	s.Nilable = val
}

func (*AllTypesRead) readAllTypesRes() {}

type AllTypesReadState string

const (
	AllTypesReadStateOn  AllTypesReadState = "on"
	AllTypesReadStateOff AllTypesReadState = "off"
)

// MarshalText implements encoding.TextMarshaler.
func (s AllTypesReadState) MarshalText() ([]byte, error) {
	switch s {
	case AllTypesReadStateOn:
		return []byte(s), nil
	case AllTypesReadStateOff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AllTypesReadState) UnmarshalText(data []byte) error {
	switch AllTypesReadState(data) {
	case AllTypesReadStateOn:
		*s = AllTypesReadStateOn
		return nil
	case AllTypesReadStateOff:
		*s = AllTypesReadStateOff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AllTypesUpdate
type AllTypesUpdate struct {
	ID         int64               `json:"id"`
	Int        int                 `json:"int"`
	Int8       int32               `json:"int8"`
	Int16      int32               `json:"int16"`
	Int32      int32               `json:"int32"`
	Int64      int64               `json:"int64"`
	Uint       int64               `json:"uint"`
	Uint8      int32               `json:"uint8"`
	Uint16     int32               `json:"uint16"`
	Uint32     int64               `json:"uint32"`
	Uint64     int64               `json:"uint64"`
	Float32    float32             `json:"float32"`
	Float64    float64             `json:"float64"`
	StringType string              `json:"string_type"`
	Bool       bool                `json:"bool"`
	UUID       uuid.UUID           `json:"uuid"`
	Time       time.Time           `json:"time"`
	Text       string              `json:"text"`
	State      AllTypesUpdateState `json:"state"`
	Bytes      []byte              `json:"bytes"`
	Nilable    OptString           `json:"nilable"`
}

// GetID returns the value of ID.
func (s *AllTypesUpdate) GetID() int64 {
	return s.ID
}

// GetInt returns the value of Int.
func (s *AllTypesUpdate) GetInt() int {
	return s.Int
}

// GetInt8 returns the value of Int8.
func (s *AllTypesUpdate) GetInt8() int32 {
	return s.Int8
}

// GetInt16 returns the value of Int16.
func (s *AllTypesUpdate) GetInt16() int32 {
	return s.Int16
}

// GetInt32 returns the value of Int32.
func (s *AllTypesUpdate) GetInt32() int32 {
	return s.Int32
}

// GetInt64 returns the value of Int64.
func (s *AllTypesUpdate) GetInt64() int64 {
	return s.Int64
}

// GetUint returns the value of Uint.
func (s *AllTypesUpdate) GetUint() int64 {
	return s.Uint
}

// GetUint8 returns the value of Uint8.
func (s *AllTypesUpdate) GetUint8() int32 {
	return s.Uint8
}

// GetUint16 returns the value of Uint16.
func (s *AllTypesUpdate) GetUint16() int32 {
	return s.Uint16
}

// GetUint32 returns the value of Uint32.
func (s *AllTypesUpdate) GetUint32() int64 {
	return s.Uint32
}

// GetUint64 returns the value of Uint64.
func (s *AllTypesUpdate) GetUint64() int64 {
	return s.Uint64
}

// GetFloat32 returns the value of Float32.
func (s *AllTypesUpdate) GetFloat32() float32 {
	return s.Float32
}

// GetFloat64 returns the value of Float64.
func (s *AllTypesUpdate) GetFloat64() float64 {
	return s.Float64
}

// GetStringType returns the value of StringType.
func (s *AllTypesUpdate) GetStringType() string {
	return s.StringType
}

// GetBool returns the value of Bool.
func (s *AllTypesUpdate) GetBool() bool {
	return s.Bool
}

// GetUUID returns the value of UUID.
func (s *AllTypesUpdate) GetUUID() uuid.UUID {
	return s.UUID
}

// GetTime returns the value of Time.
func (s *AllTypesUpdate) GetTime() time.Time {
	return s.Time
}

// GetText returns the value of Text.
func (s *AllTypesUpdate) GetText() string {
	return s.Text
}

// GetState returns the value of State.
func (s *AllTypesUpdate) GetState() AllTypesUpdateState {
	return s.State
}

// GetBytes returns the value of Bytes.
func (s *AllTypesUpdate) GetBytes() []byte {
	return s.Bytes
}

// GetNilable returns the value of Nilable.
func (s *AllTypesUpdate) GetNilable() OptString {
	return s.Nilable
}

// SetID sets the value of ID.
func (s *AllTypesUpdate) SetID(val int64) {
	s.ID = val
}

// SetInt sets the value of Int.
func (s *AllTypesUpdate) SetInt(val int) {
	s.Int = val
}

// SetInt8 sets the value of Int8.
func (s *AllTypesUpdate) SetInt8(val int32) {
	s.Int8 = val
}

// SetInt16 sets the value of Int16.
func (s *AllTypesUpdate) SetInt16(val int32) {
	s.Int16 = val
}

// SetInt32 sets the value of Int32.
func (s *AllTypesUpdate) SetInt32(val int32) {
	s.Int32 = val
}

// SetInt64 sets the value of Int64.
func (s *AllTypesUpdate) SetInt64(val int64) {
	s.Int64 = val
}

// SetUint sets the value of Uint.
func (s *AllTypesUpdate) SetUint(val int64) {
	s.Uint = val
}

// SetUint8 sets the value of Uint8.
func (s *AllTypesUpdate) SetUint8(val int32) {
	s.Uint8 = val
}

// SetUint16 sets the value of Uint16.
func (s *AllTypesUpdate) SetUint16(val int32) {
	s.Uint16 = val
}

// SetUint32 sets the value of Uint32.
func (s *AllTypesUpdate) SetUint32(val int64) {
	s.Uint32 = val
}

// SetUint64 sets the value of Uint64.
func (s *AllTypesUpdate) SetUint64(val int64) {
	s.Uint64 = val
}

// SetFloat32 sets the value of Float32.
func (s *AllTypesUpdate) SetFloat32(val float32) {
	s.Float32 = val
}

// SetFloat64 sets the value of Float64.
func (s *AllTypesUpdate) SetFloat64(val float64) {
	s.Float64 = val
}

// SetStringType sets the value of StringType.
func (s *AllTypesUpdate) SetStringType(val string) {
	s.StringType = val
}

// SetBool sets the value of Bool.
func (s *AllTypesUpdate) SetBool(val bool) {
	s.Bool = val
}

// SetUUID sets the value of UUID.
func (s *AllTypesUpdate) SetUUID(val uuid.UUID) {
	s.UUID = val
}

// SetTime sets the value of Time.
func (s *AllTypesUpdate) SetTime(val time.Time) {
	s.Time = val
}

// SetText sets the value of Text.
func (s *AllTypesUpdate) SetText(val string) {
	s.Text = val
}

// SetState sets the value of State.
func (s *AllTypesUpdate) SetState(val AllTypesUpdateState) {
	s.State = val
}

// SetBytes sets the value of Bytes.
func (s *AllTypesUpdate) SetBytes(val []byte) {
	s.Bytes = val
}

// SetNilable sets the value of Nilable.
func (s *AllTypesUpdate) SetNilable(val OptString) {
	s.Nilable = val
}

func (*AllTypesUpdate) updateAllTypesRes() {}

type AllTypesUpdateState string

const (
	AllTypesUpdateStateOn  AllTypesUpdateState = "on"
	AllTypesUpdateStateOff AllTypesUpdateState = "off"
)

// MarshalText implements encoding.TextMarshaler.
func (s AllTypesUpdateState) MarshalText() ([]byte, error) {
	switch s {
	case AllTypesUpdateStateOn:
		return []byte(s), nil
	case AllTypesUpdateStateOff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AllTypesUpdateState) UnmarshalText(data []byte) error {
	switch AllTypesUpdateState(data) {
	case AllTypesUpdateStateOn:
		*s = AllTypesUpdateStateOn
		return nil
	case AllTypesUpdateStateOff:
		*s = AllTypesUpdateStateOff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CategoryCreate
type CategoryCreate struct {
	ID       int       `json:"id"`
	Name     string    `json:"name"`
	Readonly OptString `json:"readonly"`
}

// GetID returns the value of ID.
func (s *CategoryCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *CategoryCreate) GetName() string {
	return s.Name
}

// GetReadonly returns the value of Readonly.
func (s *CategoryCreate) GetReadonly() OptString {
	return s.Readonly
}

// SetID sets the value of ID.
func (s *CategoryCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CategoryCreate) SetName(val string) {
	s.Name = val
}

// SetReadonly sets the value of Readonly.
func (s *CategoryCreate) SetReadonly(val OptString) {
	s.Readonly = val
}

func (*CategoryCreate) createCategoryRes() {}

// Ref: #/components/schemas/CategoryList
type CategoryList struct {
	ID       int       `json:"id"`
	Name     string    `json:"name"`
	Readonly OptString `json:"readonly"`
}

// GetID returns the value of ID.
func (s *CategoryList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *CategoryList) GetName() string {
	return s.Name
}

// GetReadonly returns the value of Readonly.
func (s *CategoryList) GetReadonly() OptString {
	return s.Readonly
}

// SetID sets the value of ID.
func (s *CategoryList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CategoryList) SetName(val string) {
	s.Name = val
}

// SetReadonly sets the value of Readonly.
func (s *CategoryList) SetReadonly(val OptString) {
	s.Readonly = val
}

// Ref: #/components/schemas/Category_PetsList
type CategoryPetsList struct {
	ID       int         `json:"id"`
	Name     string      `json:"name"`
	Weight   OptInt      `json:"weight"`
	Birthday OptDateTime `json:"birthday"`
	TagID    []byte      `json:"tag_id"`
	Height   OptInt      `json:"height"`
}

// GetID returns the value of ID.
func (s *CategoryPetsList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *CategoryPetsList) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *CategoryPetsList) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *CategoryPetsList) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *CategoryPetsList) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *CategoryPetsList) GetHeight() OptInt {
	return s.Height
}

// SetID sets the value of ID.
func (s *CategoryPetsList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CategoryPetsList) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *CategoryPetsList) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *CategoryPetsList) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *CategoryPetsList) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *CategoryPetsList) SetHeight(val OptInt) {
	s.Height = val
}

// Ref: #/components/schemas/CategoryRead
type CategoryRead struct {
	ID       int       `json:"id"`
	Name     string    `json:"name"`
	Readonly OptString `json:"readonly"`
}

// GetID returns the value of ID.
func (s *CategoryRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *CategoryRead) GetName() string {
	return s.Name
}

// GetReadonly returns the value of Readonly.
func (s *CategoryRead) GetReadonly() OptString {
	return s.Readonly
}

// SetID sets the value of ID.
func (s *CategoryRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CategoryRead) SetName(val string) {
	s.Name = val
}

// SetReadonly sets the value of Readonly.
func (s *CategoryRead) SetReadonly(val OptString) {
	s.Readonly = val
}

func (*CategoryRead) readCategoryRes() {}

// Ref: #/components/schemas/CategoryUpdate
type CategoryUpdate struct {
	ID       int       `json:"id"`
	Name     string    `json:"name"`
	Readonly OptString `json:"readonly"`
}

// GetID returns the value of ID.
func (s *CategoryUpdate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *CategoryUpdate) GetName() string {
	return s.Name
}

// GetReadonly returns the value of Readonly.
func (s *CategoryUpdate) GetReadonly() OptString {
	return s.Readonly
}

// SetID sets the value of ID.
func (s *CategoryUpdate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CategoryUpdate) SetName(val string) {
	s.Name = val
}

// SetReadonly sets the value of Readonly.
func (s *CategoryUpdate) SetReadonly(val OptString) {
	s.Readonly = val
}

func (*CategoryUpdate) updateCategoryRes() {}

type CreateAllTypesReq struct {
	Int        int                    `json:"int"`
	Int8       int32                  `json:"int8"`
	Int16      int32                  `json:"int16"`
	Int32      int32                  `json:"int32"`
	Int64      int64                  `json:"int64"`
	Uint       int64                  `json:"uint"`
	Uint8      int32                  `json:"uint8"`
	Uint16     int32                  `json:"uint16"`
	Uint32     int64                  `json:"uint32"`
	Uint64     int64                  `json:"uint64"`
	Float32    float32                `json:"float32"`
	Float64    float64                `json:"float64"`
	StringType string                 `json:"string_type"`
	Bool       bool                   `json:"bool"`
	UUID       uuid.UUID              `json:"uuid"`
	Time       time.Time              `json:"time"`
	Text       string                 `json:"text"`
	State      CreateAllTypesReqState `json:"state"`
	Bytes      []byte                 `json:"bytes"`
	Nilable    string                 `json:"nilable"`
}

// GetInt returns the value of Int.
func (s *CreateAllTypesReq) GetInt() int {
	return s.Int
}

// GetInt8 returns the value of Int8.
func (s *CreateAllTypesReq) GetInt8() int32 {
	return s.Int8
}

// GetInt16 returns the value of Int16.
func (s *CreateAllTypesReq) GetInt16() int32 {
	return s.Int16
}

// GetInt32 returns the value of Int32.
func (s *CreateAllTypesReq) GetInt32() int32 {
	return s.Int32
}

// GetInt64 returns the value of Int64.
func (s *CreateAllTypesReq) GetInt64() int64 {
	return s.Int64
}

// GetUint returns the value of Uint.
func (s *CreateAllTypesReq) GetUint() int64 {
	return s.Uint
}

// GetUint8 returns the value of Uint8.
func (s *CreateAllTypesReq) GetUint8() int32 {
	return s.Uint8
}

// GetUint16 returns the value of Uint16.
func (s *CreateAllTypesReq) GetUint16() int32 {
	return s.Uint16
}

// GetUint32 returns the value of Uint32.
func (s *CreateAllTypesReq) GetUint32() int64 {
	return s.Uint32
}

// GetUint64 returns the value of Uint64.
func (s *CreateAllTypesReq) GetUint64() int64 {
	return s.Uint64
}

// GetFloat32 returns the value of Float32.
func (s *CreateAllTypesReq) GetFloat32() float32 {
	return s.Float32
}

// GetFloat64 returns the value of Float64.
func (s *CreateAllTypesReq) GetFloat64() float64 {
	return s.Float64
}

// GetStringType returns the value of StringType.
func (s *CreateAllTypesReq) GetStringType() string {
	return s.StringType
}

// GetBool returns the value of Bool.
func (s *CreateAllTypesReq) GetBool() bool {
	return s.Bool
}

// GetUUID returns the value of UUID.
func (s *CreateAllTypesReq) GetUUID() uuid.UUID {
	return s.UUID
}

// GetTime returns the value of Time.
func (s *CreateAllTypesReq) GetTime() time.Time {
	return s.Time
}

// GetText returns the value of Text.
func (s *CreateAllTypesReq) GetText() string {
	return s.Text
}

// GetState returns the value of State.
func (s *CreateAllTypesReq) GetState() CreateAllTypesReqState {
	return s.State
}

// GetBytes returns the value of Bytes.
func (s *CreateAllTypesReq) GetBytes() []byte {
	return s.Bytes
}

// GetNilable returns the value of Nilable.
func (s *CreateAllTypesReq) GetNilable() string {
	return s.Nilable
}

// SetInt sets the value of Int.
func (s *CreateAllTypesReq) SetInt(val int) {
	s.Int = val
}

// SetInt8 sets the value of Int8.
func (s *CreateAllTypesReq) SetInt8(val int32) {
	s.Int8 = val
}

// SetInt16 sets the value of Int16.
func (s *CreateAllTypesReq) SetInt16(val int32) {
	s.Int16 = val
}

// SetInt32 sets the value of Int32.
func (s *CreateAllTypesReq) SetInt32(val int32) {
	s.Int32 = val
}

// SetInt64 sets the value of Int64.
func (s *CreateAllTypesReq) SetInt64(val int64) {
	s.Int64 = val
}

// SetUint sets the value of Uint.
func (s *CreateAllTypesReq) SetUint(val int64) {
	s.Uint = val
}

// SetUint8 sets the value of Uint8.
func (s *CreateAllTypesReq) SetUint8(val int32) {
	s.Uint8 = val
}

// SetUint16 sets the value of Uint16.
func (s *CreateAllTypesReq) SetUint16(val int32) {
	s.Uint16 = val
}

// SetUint32 sets the value of Uint32.
func (s *CreateAllTypesReq) SetUint32(val int64) {
	s.Uint32 = val
}

// SetUint64 sets the value of Uint64.
func (s *CreateAllTypesReq) SetUint64(val int64) {
	s.Uint64 = val
}

// SetFloat32 sets the value of Float32.
func (s *CreateAllTypesReq) SetFloat32(val float32) {
	s.Float32 = val
}

// SetFloat64 sets the value of Float64.
func (s *CreateAllTypesReq) SetFloat64(val float64) {
	s.Float64 = val
}

// SetStringType sets the value of StringType.
func (s *CreateAllTypesReq) SetStringType(val string) {
	s.StringType = val
}

// SetBool sets the value of Bool.
func (s *CreateAllTypesReq) SetBool(val bool) {
	s.Bool = val
}

// SetUUID sets the value of UUID.
func (s *CreateAllTypesReq) SetUUID(val uuid.UUID) {
	s.UUID = val
}

// SetTime sets the value of Time.
func (s *CreateAllTypesReq) SetTime(val time.Time) {
	s.Time = val
}

// SetText sets the value of Text.
func (s *CreateAllTypesReq) SetText(val string) {
	s.Text = val
}

// SetState sets the value of State.
func (s *CreateAllTypesReq) SetState(val CreateAllTypesReqState) {
	s.State = val
}

// SetBytes sets the value of Bytes.
func (s *CreateAllTypesReq) SetBytes(val []byte) {
	s.Bytes = val
}

// SetNilable sets the value of Nilable.
func (s *CreateAllTypesReq) SetNilable(val string) {
	s.Nilable = val
}

type CreateAllTypesReqState string

const (
	CreateAllTypesReqStateOn  CreateAllTypesReqState = "on"
	CreateAllTypesReqStateOff CreateAllTypesReqState = "off"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateAllTypesReqState) MarshalText() ([]byte, error) {
	switch s {
	case CreateAllTypesReqStateOn:
		return []byte(s), nil
	case CreateAllTypesReqStateOff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateAllTypesReqState) UnmarshalText(data []byte) error {
	switch CreateAllTypesReqState(data) {
	case CreateAllTypesReqStateOn:
		*s = CreateAllTypesReqStateOn
		return nil
	case CreateAllTypesReqStateOff:
		*s = CreateAllTypesReqStateOff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateCategoryReq struct {
	Name string `json:"name"`
	Pets []int  `json:"pets"`
}

// GetName returns the value of Name.
func (s *CreateCategoryReq) GetName() string {
	return s.Name
}

// GetPets returns the value of Pets.
func (s *CreateCategoryReq) GetPets() []int {
	return s.Pets
}

// SetName sets the value of Name.
func (s *CreateCategoryReq) SetName(val string) {
	s.Name = val
}

// SetPets sets the value of Pets.
func (s *CreateCategoryReq) SetPets(val []int) {
	s.Pets = val
}

type CreateHatReq struct {
	Name   string           `json:"name"`
	Type   CreateHatReqType `json:"type"`
	Wearer OptInt           `json:"wearer"`
}

// GetName returns the value of Name.
func (s *CreateHatReq) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *CreateHatReq) GetType() CreateHatReqType {
	return s.Type
}

// GetWearer returns the value of Wearer.
func (s *CreateHatReq) GetWearer() OptInt {
	return s.Wearer
}

// SetName sets the value of Name.
func (s *CreateHatReq) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *CreateHatReq) SetType(val CreateHatReqType) {
	s.Type = val
}

// SetWearer sets the value of Wearer.
func (s *CreateHatReq) SetWearer(val OptInt) {
	s.Wearer = val
}

type CreateHatReqType string

const (
	CreateHatReqTypeDad      CreateHatReqType = "dad"
	CreateHatReqTypeTrucker  CreateHatReqType = "trucker"
	CreateHatReqTypeSnapback CreateHatReqType = "snapback"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateHatReqType) MarshalText() ([]byte, error) {
	switch s {
	case CreateHatReqTypeDad:
		return []byte(s), nil
	case CreateHatReqTypeTrucker:
		return []byte(s), nil
	case CreateHatReqTypeSnapback:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateHatReqType) UnmarshalText(data []byte) error {
	switch CreateHatReqType(data) {
	case CreateHatReqTypeDad:
		*s = CreateHatReqTypeDad
		return nil
	case CreateHatReqTypeTrucker:
		*s = CreateHatReqTypeTrucker
		return nil
	case CreateHatReqTypeSnapback:
		*s = CreateHatReqTypeSnapback
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePetReq struct {
	Name       string      `json:"name"`
	Weight     OptInt      `json:"weight"`
	Birthday   OptDateTime `json:"birthday"`
	TagID      []byte      `json:"tag_id"`
	Height     OptInt      `json:"height"`
	Categories []int       `json:"categories"`
	Owner      int         `json:"owner"`
	Rescuer    []int       `json:"rescuer"`
	Friends    []int       `json:"friends"`
}

// GetName returns the value of Name.
func (s *CreatePetReq) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *CreatePetReq) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *CreatePetReq) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *CreatePetReq) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *CreatePetReq) GetHeight() OptInt {
	return s.Height
}

// GetCategories returns the value of Categories.
func (s *CreatePetReq) GetCategories() []int {
	return s.Categories
}

// GetOwner returns the value of Owner.
func (s *CreatePetReq) GetOwner() int {
	return s.Owner
}

// GetRescuer returns the value of Rescuer.
func (s *CreatePetReq) GetRescuer() []int {
	return s.Rescuer
}

// GetFriends returns the value of Friends.
func (s *CreatePetReq) GetFriends() []int {
	return s.Friends
}

// SetName sets the value of Name.
func (s *CreatePetReq) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *CreatePetReq) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *CreatePetReq) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *CreatePetReq) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *CreatePetReq) SetHeight(val OptInt) {
	s.Height = val
}

// SetCategories sets the value of Categories.
func (s *CreatePetReq) SetCategories(val []int) {
	s.Categories = val
}

// SetOwner sets the value of Owner.
func (s *CreatePetReq) SetOwner(val int) {
	s.Owner = val
}

// SetRescuer sets the value of Rescuer.
func (s *CreatePetReq) SetRescuer(val []int) {
	s.Rescuer = val
}

// SetFriends sets the value of Friends.
func (s *CreatePetReq) SetFriends(val []int) {
	s.Friends = val
}

type CreateUserReq struct {
	Name              string                            `json:"name"`
	Age               int64                             `json:"age"`
	Height            OptInt64                          `json:"height"`
	FavoriteCatBreed  CreateUserReqFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     CreateUserReqFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptCreateUserReqFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptCreateUserReqFavoriteFishBreed `json:"favorite_fish_breed"`
	Pets              []int                             `json:"pets"`
	AnimalsSaved      []int                             `json:"animals_saved"`
	BestFriend        OptInt                            `json:"best_friend"`
	FavoriteHat       OptInt                            `json:"favorite_hat"`
}

// GetName returns the value of Name.
func (s *CreateUserReq) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *CreateUserReq) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *CreateUserReq) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *CreateUserReq) GetFavoriteCatBreed() CreateUserReqFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *CreateUserReq) GetFavoriteColor() CreateUserReqFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *CreateUserReq) GetFavoriteDogBreed() OptCreateUserReqFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *CreateUserReq) GetFavoriteFishBreed() OptCreateUserReqFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// GetPets returns the value of Pets.
func (s *CreateUserReq) GetPets() []int {
	return s.Pets
}

// GetAnimalsSaved returns the value of AnimalsSaved.
func (s *CreateUserReq) GetAnimalsSaved() []int {
	return s.AnimalsSaved
}

// GetBestFriend returns the value of BestFriend.
func (s *CreateUserReq) GetBestFriend() OptInt {
	return s.BestFriend
}

// GetFavoriteHat returns the value of FavoriteHat.
func (s *CreateUserReq) GetFavoriteHat() OptInt {
	return s.FavoriteHat
}

// SetName sets the value of Name.
func (s *CreateUserReq) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *CreateUserReq) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *CreateUserReq) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *CreateUserReq) SetFavoriteCatBreed(val CreateUserReqFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *CreateUserReq) SetFavoriteColor(val CreateUserReqFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *CreateUserReq) SetFavoriteDogBreed(val OptCreateUserReqFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *CreateUserReq) SetFavoriteFishBreed(val OptCreateUserReqFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

// SetPets sets the value of Pets.
func (s *CreateUserReq) SetPets(val []int) {
	s.Pets = val
}

// SetAnimalsSaved sets the value of AnimalsSaved.
func (s *CreateUserReq) SetAnimalsSaved(val []int) {
	s.AnimalsSaved = val
}

// SetBestFriend sets the value of BestFriend.
func (s *CreateUserReq) SetBestFriend(val OptInt) {
	s.BestFriend = val
}

// SetFavoriteHat sets the value of FavoriteHat.
func (s *CreateUserReq) SetFavoriteHat(val OptInt) {
	s.FavoriteHat = val
}

type CreateUserReqFavoriteCatBreed string

const (
	CreateUserReqFavoriteCatBreedSiamese CreateUserReqFavoriteCatBreed = "siamese"
	CreateUserReqFavoriteCatBreedBengal  CreateUserReqFavoriteCatBreed = "bengal"
	CreateUserReqFavoriteCatBreedLion    CreateUserReqFavoriteCatBreed = "lion"
	CreateUserReqFavoriteCatBreedTiger   CreateUserReqFavoriteCatBreed = "tiger"
	CreateUserReqFavoriteCatBreedLeopard CreateUserReqFavoriteCatBreed = "leopard"
	CreateUserReqFavoriteCatBreedOther   CreateUserReqFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateUserReqFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case CreateUserReqFavoriteCatBreedSiamese:
		return []byte(s), nil
	case CreateUserReqFavoriteCatBreedBengal:
		return []byte(s), nil
	case CreateUserReqFavoriteCatBreedLion:
		return []byte(s), nil
	case CreateUserReqFavoriteCatBreedTiger:
		return []byte(s), nil
	case CreateUserReqFavoriteCatBreedLeopard:
		return []byte(s), nil
	case CreateUserReqFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateUserReqFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch CreateUserReqFavoriteCatBreed(data) {
	case CreateUserReqFavoriteCatBreedSiamese:
		*s = CreateUserReqFavoriteCatBreedSiamese
		return nil
	case CreateUserReqFavoriteCatBreedBengal:
		*s = CreateUserReqFavoriteCatBreedBengal
		return nil
	case CreateUserReqFavoriteCatBreedLion:
		*s = CreateUserReqFavoriteCatBreedLion
		return nil
	case CreateUserReqFavoriteCatBreedTiger:
		*s = CreateUserReqFavoriteCatBreedTiger
		return nil
	case CreateUserReqFavoriteCatBreedLeopard:
		*s = CreateUserReqFavoriteCatBreedLeopard
		return nil
	case CreateUserReqFavoriteCatBreedOther:
		*s = CreateUserReqFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateUserReqFavoriteColor string

const (
	CreateUserReqFavoriteColorRed   CreateUserReqFavoriteColor = "red"
	CreateUserReqFavoriteColorGreen CreateUserReqFavoriteColor = "green"
	CreateUserReqFavoriteColorBlue  CreateUserReqFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateUserReqFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case CreateUserReqFavoriteColorRed:
		return []byte(s), nil
	case CreateUserReqFavoriteColorGreen:
		return []byte(s), nil
	case CreateUserReqFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateUserReqFavoriteColor) UnmarshalText(data []byte) error {
	switch CreateUserReqFavoriteColor(data) {
	case CreateUserReqFavoriteColorRed:
		*s = CreateUserReqFavoriteColorRed
		return nil
	case CreateUserReqFavoriteColorGreen:
		*s = CreateUserReqFavoriteColorGreen
		return nil
	case CreateUserReqFavoriteColorBlue:
		*s = CreateUserReqFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateUserReqFavoriteDogBreed string

const (
	CreateUserReqFavoriteDogBreedKuro CreateUserReqFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateUserReqFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case CreateUserReqFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateUserReqFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch CreateUserReqFavoriteDogBreed(data) {
	case CreateUserReqFavoriteDogBreedKuro:
		*s = CreateUserReqFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateUserReqFavoriteFishBreed string

const (
	CreateUserReqFavoriteFishBreedGold  CreateUserReqFavoriteFishBreed = "gold"
	CreateUserReqFavoriteFishBreedKoi   CreateUserReqFavoriteFishBreed = "koi"
	CreateUserReqFavoriteFishBreedShark CreateUserReqFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateUserReqFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case CreateUserReqFavoriteFishBreedGold:
		return []byte(s), nil
	case CreateUserReqFavoriteFishBreedKoi:
		return []byte(s), nil
	case CreateUserReqFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateUserReqFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch CreateUserReqFavoriteFishBreed(data) {
	case CreateUserReqFavoriteFishBreedGold:
		*s = CreateUserReqFavoriteFishBreedGold
		return nil
	case CreateUserReqFavoriteFishBreedKoi:
		*s = CreateUserReqFavoriteFishBreedKoi
		return nil
	case CreateUserReqFavoriteFishBreedShark:
		*s = CreateUserReqFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DeleteAllTypesNoContent is response for DeleteAllTypes operation.
type DeleteAllTypesNoContent struct{}

func (*DeleteAllTypesNoContent) deleteAllTypesRes() {}

// DeleteCategoryNoContent is response for DeleteCategory operation.
type DeleteCategoryNoContent struct{}

func (*DeleteCategoryNoContent) deleteCategoryRes() {}

// DeleteHatNoContent is response for DeleteHat operation.
type DeleteHatNoContent struct{}

func (*DeleteHatNoContent) deleteHatRes() {}

// DeletePetNoContent is response for DeletePet operation.
type DeletePetNoContent struct{}

func (*DeletePetNoContent) deletePetRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

// Ref: #/components/schemas/HatCreate
type HatCreate struct {
	ID   int           `json:"id"`
	Name string        `json:"name"`
	Type HatCreateType `json:"type"`
}

// GetID returns the value of ID.
func (s *HatCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *HatCreate) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *HatCreate) GetType() HatCreateType {
	return s.Type
}

// SetID sets the value of ID.
func (s *HatCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HatCreate) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *HatCreate) SetType(val HatCreateType) {
	s.Type = val
}

func (*HatCreate) createHatRes() {}

type HatCreateType string

const (
	HatCreateTypeDad      HatCreateType = "dad"
	HatCreateTypeTrucker  HatCreateType = "trucker"
	HatCreateTypeSnapback HatCreateType = "snapback"
)

// MarshalText implements encoding.TextMarshaler.
func (s HatCreateType) MarshalText() ([]byte, error) {
	switch s {
	case HatCreateTypeDad:
		return []byte(s), nil
	case HatCreateTypeTrucker:
		return []byte(s), nil
	case HatCreateTypeSnapback:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HatCreateType) UnmarshalText(data []byte) error {
	switch HatCreateType(data) {
	case HatCreateTypeDad:
		*s = HatCreateTypeDad
		return nil
	case HatCreateTypeTrucker:
		*s = HatCreateTypeTrucker
		return nil
	case HatCreateTypeSnapback:
		*s = HatCreateTypeSnapback
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/HatList
type HatList struct {
	ID   int         `json:"id"`
	Name string      `json:"name"`
	Type HatListType `json:"type"`
}

// GetID returns the value of ID.
func (s *HatList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *HatList) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *HatList) GetType() HatListType {
	return s.Type
}

// SetID sets the value of ID.
func (s *HatList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HatList) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *HatList) SetType(val HatListType) {
	s.Type = val
}

type HatListType string

const (
	HatListTypeDad      HatListType = "dad"
	HatListTypeTrucker  HatListType = "trucker"
	HatListTypeSnapback HatListType = "snapback"
)

// MarshalText implements encoding.TextMarshaler.
func (s HatListType) MarshalText() ([]byte, error) {
	switch s {
	case HatListTypeDad:
		return []byte(s), nil
	case HatListTypeTrucker:
		return []byte(s), nil
	case HatListTypeSnapback:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HatListType) UnmarshalText(data []byte) error {
	switch HatListType(data) {
	case HatListTypeDad:
		*s = HatListTypeDad
		return nil
	case HatListTypeTrucker:
		*s = HatListTypeTrucker
		return nil
	case HatListTypeSnapback:
		*s = HatListTypeSnapback
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/HatRead
type HatRead struct {
	ID   int         `json:"id"`
	Name string      `json:"name"`
	Type HatReadType `json:"type"`
}

// GetID returns the value of ID.
func (s *HatRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *HatRead) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *HatRead) GetType() HatReadType {
	return s.Type
}

// SetID sets the value of ID.
func (s *HatRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HatRead) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *HatRead) SetType(val HatReadType) {
	s.Type = val
}

func (*HatRead) readHatRes() {}

type HatReadType string

const (
	HatReadTypeDad      HatReadType = "dad"
	HatReadTypeTrucker  HatReadType = "trucker"
	HatReadTypeSnapback HatReadType = "snapback"
)

// MarshalText implements encoding.TextMarshaler.
func (s HatReadType) MarshalText() ([]byte, error) {
	switch s {
	case HatReadTypeDad:
		return []byte(s), nil
	case HatReadTypeTrucker:
		return []byte(s), nil
	case HatReadTypeSnapback:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HatReadType) UnmarshalText(data []byte) error {
	switch HatReadType(data) {
	case HatReadTypeDad:
		*s = HatReadTypeDad
		return nil
	case HatReadTypeTrucker:
		*s = HatReadTypeTrucker
		return nil
	case HatReadTypeSnapback:
		*s = HatReadTypeSnapback
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/HatUpdate
type HatUpdate struct {
	ID   int           `json:"id"`
	Name string        `json:"name"`
	Type HatUpdateType `json:"type"`
}

// GetID returns the value of ID.
func (s *HatUpdate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *HatUpdate) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *HatUpdate) GetType() HatUpdateType {
	return s.Type
}

// SetID sets the value of ID.
func (s *HatUpdate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HatUpdate) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *HatUpdate) SetType(val HatUpdateType) {
	s.Type = val
}

func (*HatUpdate) updateHatRes() {}

type HatUpdateType string

const (
	HatUpdateTypeDad      HatUpdateType = "dad"
	HatUpdateTypeTrucker  HatUpdateType = "trucker"
	HatUpdateTypeSnapback HatUpdateType = "snapback"
)

// MarshalText implements encoding.TextMarshaler.
func (s HatUpdateType) MarshalText() ([]byte, error) {
	switch s {
	case HatUpdateTypeDad:
		return []byte(s), nil
	case HatUpdateTypeTrucker:
		return []byte(s), nil
	case HatUpdateTypeSnapback:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HatUpdateType) UnmarshalText(data []byte) error {
	switch HatUpdateType(data) {
	case HatUpdateTypeDad:
		*s = HatUpdateTypeDad
		return nil
	case HatUpdateTypeTrucker:
		*s = HatUpdateTypeTrucker
		return nil
	case HatUpdateTypeSnapback:
		*s = HatUpdateTypeSnapback
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Hat_WearerRead
type HatWearerRead struct {
	ID                int                               `json:"id"`
	Name              string                            `json:"name"`
	Age               int64                             `json:"age"`
	Height            OptInt64                          `json:"height"`
	FavoriteCatBreed  HatWearerReadFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     HatWearerReadFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptHatWearerReadFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptHatWearerReadFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *HatWearerRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *HatWearerRead) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *HatWearerRead) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *HatWearerRead) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *HatWearerRead) GetFavoriteCatBreed() HatWearerReadFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *HatWearerRead) GetFavoriteColor() HatWearerReadFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *HatWearerRead) GetFavoriteDogBreed() OptHatWearerReadFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *HatWearerRead) GetFavoriteFishBreed() OptHatWearerReadFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *HatWearerRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HatWearerRead) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *HatWearerRead) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *HatWearerRead) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *HatWearerRead) SetFavoriteCatBreed(val HatWearerReadFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *HatWearerRead) SetFavoriteColor(val HatWearerReadFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *HatWearerRead) SetFavoriteDogBreed(val OptHatWearerReadFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *HatWearerRead) SetFavoriteFishBreed(val OptHatWearerReadFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

func (*HatWearerRead) readHatWearerRes() {}

type HatWearerReadFavoriteCatBreed string

const (
	HatWearerReadFavoriteCatBreedSiamese HatWearerReadFavoriteCatBreed = "siamese"
	HatWearerReadFavoriteCatBreedBengal  HatWearerReadFavoriteCatBreed = "bengal"
	HatWearerReadFavoriteCatBreedLion    HatWearerReadFavoriteCatBreed = "lion"
	HatWearerReadFavoriteCatBreedTiger   HatWearerReadFavoriteCatBreed = "tiger"
	HatWearerReadFavoriteCatBreedLeopard HatWearerReadFavoriteCatBreed = "leopard"
	HatWearerReadFavoriteCatBreedOther   HatWearerReadFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s HatWearerReadFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case HatWearerReadFavoriteCatBreedSiamese:
		return []byte(s), nil
	case HatWearerReadFavoriteCatBreedBengal:
		return []byte(s), nil
	case HatWearerReadFavoriteCatBreedLion:
		return []byte(s), nil
	case HatWearerReadFavoriteCatBreedTiger:
		return []byte(s), nil
	case HatWearerReadFavoriteCatBreedLeopard:
		return []byte(s), nil
	case HatWearerReadFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HatWearerReadFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch HatWearerReadFavoriteCatBreed(data) {
	case HatWearerReadFavoriteCatBreedSiamese:
		*s = HatWearerReadFavoriteCatBreedSiamese
		return nil
	case HatWearerReadFavoriteCatBreedBengal:
		*s = HatWearerReadFavoriteCatBreedBengal
		return nil
	case HatWearerReadFavoriteCatBreedLion:
		*s = HatWearerReadFavoriteCatBreedLion
		return nil
	case HatWearerReadFavoriteCatBreedTiger:
		*s = HatWearerReadFavoriteCatBreedTiger
		return nil
	case HatWearerReadFavoriteCatBreedLeopard:
		*s = HatWearerReadFavoriteCatBreedLeopard
		return nil
	case HatWearerReadFavoriteCatBreedOther:
		*s = HatWearerReadFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HatWearerReadFavoriteColor string

const (
	HatWearerReadFavoriteColorRed   HatWearerReadFavoriteColor = "red"
	HatWearerReadFavoriteColorGreen HatWearerReadFavoriteColor = "green"
	HatWearerReadFavoriteColorBlue  HatWearerReadFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s HatWearerReadFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case HatWearerReadFavoriteColorRed:
		return []byte(s), nil
	case HatWearerReadFavoriteColorGreen:
		return []byte(s), nil
	case HatWearerReadFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HatWearerReadFavoriteColor) UnmarshalText(data []byte) error {
	switch HatWearerReadFavoriteColor(data) {
	case HatWearerReadFavoriteColorRed:
		*s = HatWearerReadFavoriteColorRed
		return nil
	case HatWearerReadFavoriteColorGreen:
		*s = HatWearerReadFavoriteColorGreen
		return nil
	case HatWearerReadFavoriteColorBlue:
		*s = HatWearerReadFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HatWearerReadFavoriteDogBreed string

const (
	HatWearerReadFavoriteDogBreedKuro HatWearerReadFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s HatWearerReadFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case HatWearerReadFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HatWearerReadFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch HatWearerReadFavoriteDogBreed(data) {
	case HatWearerReadFavoriteDogBreedKuro:
		*s = HatWearerReadFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HatWearerReadFavoriteFishBreed string

const (
	HatWearerReadFavoriteFishBreedGold  HatWearerReadFavoriteFishBreed = "gold"
	HatWearerReadFavoriteFishBreedKoi   HatWearerReadFavoriteFishBreed = "koi"
	HatWearerReadFavoriteFishBreedShark HatWearerReadFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s HatWearerReadFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case HatWearerReadFavoriteFishBreedGold:
		return []byte(s), nil
	case HatWearerReadFavoriteFishBreedKoi:
		return []byte(s), nil
	case HatWearerReadFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HatWearerReadFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch HatWearerReadFavoriteFishBreed(data) {
	case HatWearerReadFavoriteFishBreedGold:
		*s = HatWearerReadFavoriteFishBreedGold
		return nil
	case HatWearerReadFavoriteFishBreedKoi:
		*s = HatWearerReadFavoriteFishBreedKoi
		return nil
	case HatWearerReadFavoriteFishBreedShark:
		*s = HatWearerReadFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAllTypesOKApplicationJSON []AllTypesList

func (*ListAllTypesOKApplicationJSON) listAllTypesRes() {}

type ListCategoryOKApplicationJSON []CategoryList

func (*ListCategoryOKApplicationJSON) listCategoryRes() {}

type ListCategoryPetsOKApplicationJSON []CategoryPetsList

func (*ListCategoryPetsOKApplicationJSON) listCategoryPetsRes() {}

type ListHatOKApplicationJSON []HatList

func (*ListHatOKApplicationJSON) listHatRes() {}

type ListPetCategoriesOKApplicationJSON []PetCategoriesList

func (*ListPetCategoriesOKApplicationJSON) listPetCategoriesRes() {}

type ListPetFriendsOKApplicationJSON []PetFriendsList

func (*ListPetFriendsOKApplicationJSON) listPetFriendsRes() {}

type ListPetOKApplicationJSON []PetList

func (*ListPetOKApplicationJSON) listPetRes() {}

type ListPetRescuerOKApplicationJSON []PetRescuerList

func (*ListPetRescuerOKApplicationJSON) listPetRescuerRes() {}

type ListUserAnimalsSavedOKApplicationJSON []UserAnimalsSavedList

func (*ListUserAnimalsSavedOKApplicationJSON) listUserAnimalsSavedRes() {}

type ListUserOKApplicationJSON []UserList

func (*ListUserOKApplicationJSON) listUserRes() {}

type ListUserPetsOKApplicationJSON []UserPetsList

func (*ListUserPetsOKApplicationJSON) listUserPetsRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateUserReqFavoriteDogBreed returns new OptCreateUserReqFavoriteDogBreed with value set to v.
func NewOptCreateUserReqFavoriteDogBreed(v CreateUserReqFavoriteDogBreed) OptCreateUserReqFavoriteDogBreed {
	return OptCreateUserReqFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptCreateUserReqFavoriteDogBreed is optional CreateUserReqFavoriteDogBreed.
type OptCreateUserReqFavoriteDogBreed struct {
	Value CreateUserReqFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptCreateUserReqFavoriteDogBreed was set.
func (o OptCreateUserReqFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateUserReqFavoriteDogBreed) Reset() {
	var v CreateUserReqFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateUserReqFavoriteDogBreed) SetTo(v CreateUserReqFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateUserReqFavoriteDogBreed) Get() (v CreateUserReqFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateUserReqFavoriteDogBreed) Or(d CreateUserReqFavoriteDogBreed) CreateUserReqFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateUserReqFavoriteFishBreed returns new OptCreateUserReqFavoriteFishBreed with value set to v.
func NewOptCreateUserReqFavoriteFishBreed(v CreateUserReqFavoriteFishBreed) OptCreateUserReqFavoriteFishBreed {
	return OptCreateUserReqFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptCreateUserReqFavoriteFishBreed is optional CreateUserReqFavoriteFishBreed.
type OptCreateUserReqFavoriteFishBreed struct {
	Value CreateUserReqFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptCreateUserReqFavoriteFishBreed was set.
func (o OptCreateUserReqFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateUserReqFavoriteFishBreed) Reset() {
	var v CreateUserReqFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateUserReqFavoriteFishBreed) SetTo(v CreateUserReqFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateUserReqFavoriteFishBreed) Get() (v CreateUserReqFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateUserReqFavoriteFishBreed) Or(d CreateUserReqFavoriteFishBreed) CreateUserReqFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHatWearerReadFavoriteDogBreed returns new OptHatWearerReadFavoriteDogBreed with value set to v.
func NewOptHatWearerReadFavoriteDogBreed(v HatWearerReadFavoriteDogBreed) OptHatWearerReadFavoriteDogBreed {
	return OptHatWearerReadFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptHatWearerReadFavoriteDogBreed is optional HatWearerReadFavoriteDogBreed.
type OptHatWearerReadFavoriteDogBreed struct {
	Value HatWearerReadFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptHatWearerReadFavoriteDogBreed was set.
func (o OptHatWearerReadFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHatWearerReadFavoriteDogBreed) Reset() {
	var v HatWearerReadFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHatWearerReadFavoriteDogBreed) SetTo(v HatWearerReadFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHatWearerReadFavoriteDogBreed) Get() (v HatWearerReadFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHatWearerReadFavoriteDogBreed) Or(d HatWearerReadFavoriteDogBreed) HatWearerReadFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHatWearerReadFavoriteFishBreed returns new OptHatWearerReadFavoriteFishBreed with value set to v.
func NewOptHatWearerReadFavoriteFishBreed(v HatWearerReadFavoriteFishBreed) OptHatWearerReadFavoriteFishBreed {
	return OptHatWearerReadFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptHatWearerReadFavoriteFishBreed is optional HatWearerReadFavoriteFishBreed.
type OptHatWearerReadFavoriteFishBreed struct {
	Value HatWearerReadFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptHatWearerReadFavoriteFishBreed was set.
func (o OptHatWearerReadFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHatWearerReadFavoriteFishBreed) Reset() {
	var v HatWearerReadFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHatWearerReadFavoriteFishBreed) SetTo(v HatWearerReadFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHatWearerReadFavoriteFishBreed) Get() (v HatWearerReadFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHatWearerReadFavoriteFishBreed) Or(d HatWearerReadFavoriteFishBreed) HatWearerReadFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetCreateOwnerFavoriteDogBreed returns new OptPetCreateOwnerFavoriteDogBreed with value set to v.
func NewOptPetCreateOwnerFavoriteDogBreed(v PetCreateOwnerFavoriteDogBreed) OptPetCreateOwnerFavoriteDogBreed {
	return OptPetCreateOwnerFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetCreateOwnerFavoriteDogBreed is optional PetCreateOwnerFavoriteDogBreed.
type OptPetCreateOwnerFavoriteDogBreed struct {
	Value PetCreateOwnerFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptPetCreateOwnerFavoriteDogBreed was set.
func (o OptPetCreateOwnerFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetCreateOwnerFavoriteDogBreed) Reset() {
	var v PetCreateOwnerFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetCreateOwnerFavoriteDogBreed) SetTo(v PetCreateOwnerFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetCreateOwnerFavoriteDogBreed) Get() (v PetCreateOwnerFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetCreateOwnerFavoriteDogBreed) Or(d PetCreateOwnerFavoriteDogBreed) PetCreateOwnerFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetCreateOwnerFavoriteFishBreed returns new OptPetCreateOwnerFavoriteFishBreed with value set to v.
func NewOptPetCreateOwnerFavoriteFishBreed(v PetCreateOwnerFavoriteFishBreed) OptPetCreateOwnerFavoriteFishBreed {
	return OptPetCreateOwnerFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetCreateOwnerFavoriteFishBreed is optional PetCreateOwnerFavoriteFishBreed.
type OptPetCreateOwnerFavoriteFishBreed struct {
	Value PetCreateOwnerFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptPetCreateOwnerFavoriteFishBreed was set.
func (o OptPetCreateOwnerFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetCreateOwnerFavoriteFishBreed) Reset() {
	var v PetCreateOwnerFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetCreateOwnerFavoriteFishBreed) SetTo(v PetCreateOwnerFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetCreateOwnerFavoriteFishBreed) Get() (v PetCreateOwnerFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetCreateOwnerFavoriteFishBreed) Or(d PetCreateOwnerFavoriteFishBreed) PetCreateOwnerFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetOwnerReadFavoriteDogBreed returns new OptPetOwnerReadFavoriteDogBreed with value set to v.
func NewOptPetOwnerReadFavoriteDogBreed(v PetOwnerReadFavoriteDogBreed) OptPetOwnerReadFavoriteDogBreed {
	return OptPetOwnerReadFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetOwnerReadFavoriteDogBreed is optional PetOwnerReadFavoriteDogBreed.
type OptPetOwnerReadFavoriteDogBreed struct {
	Value PetOwnerReadFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptPetOwnerReadFavoriteDogBreed was set.
func (o OptPetOwnerReadFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetOwnerReadFavoriteDogBreed) Reset() {
	var v PetOwnerReadFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetOwnerReadFavoriteDogBreed) SetTo(v PetOwnerReadFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetOwnerReadFavoriteDogBreed) Get() (v PetOwnerReadFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetOwnerReadFavoriteDogBreed) Or(d PetOwnerReadFavoriteDogBreed) PetOwnerReadFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetOwnerReadFavoriteFishBreed returns new OptPetOwnerReadFavoriteFishBreed with value set to v.
func NewOptPetOwnerReadFavoriteFishBreed(v PetOwnerReadFavoriteFishBreed) OptPetOwnerReadFavoriteFishBreed {
	return OptPetOwnerReadFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetOwnerReadFavoriteFishBreed is optional PetOwnerReadFavoriteFishBreed.
type OptPetOwnerReadFavoriteFishBreed struct {
	Value PetOwnerReadFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptPetOwnerReadFavoriteFishBreed was set.
func (o OptPetOwnerReadFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetOwnerReadFavoriteFishBreed) Reset() {
	var v PetOwnerReadFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetOwnerReadFavoriteFishBreed) SetTo(v PetOwnerReadFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetOwnerReadFavoriteFishBreed) Get() (v PetOwnerReadFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetOwnerReadFavoriteFishBreed) Or(d PetOwnerReadFavoriteFishBreed) PetOwnerReadFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetRescuerListFavoriteDogBreed returns new OptPetRescuerListFavoriteDogBreed with value set to v.
func NewOptPetRescuerListFavoriteDogBreed(v PetRescuerListFavoriteDogBreed) OptPetRescuerListFavoriteDogBreed {
	return OptPetRescuerListFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetRescuerListFavoriteDogBreed is optional PetRescuerListFavoriteDogBreed.
type OptPetRescuerListFavoriteDogBreed struct {
	Value PetRescuerListFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptPetRescuerListFavoriteDogBreed was set.
func (o OptPetRescuerListFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetRescuerListFavoriteDogBreed) Reset() {
	var v PetRescuerListFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetRescuerListFavoriteDogBreed) SetTo(v PetRescuerListFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetRescuerListFavoriteDogBreed) Get() (v PetRescuerListFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetRescuerListFavoriteDogBreed) Or(d PetRescuerListFavoriteDogBreed) PetRescuerListFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetRescuerListFavoriteFishBreed returns new OptPetRescuerListFavoriteFishBreed with value set to v.
func NewOptPetRescuerListFavoriteFishBreed(v PetRescuerListFavoriteFishBreed) OptPetRescuerListFavoriteFishBreed {
	return OptPetRescuerListFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptPetRescuerListFavoriteFishBreed is optional PetRescuerListFavoriteFishBreed.
type OptPetRescuerListFavoriteFishBreed struct {
	Value PetRescuerListFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptPetRescuerListFavoriteFishBreed was set.
func (o OptPetRescuerListFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetRescuerListFavoriteFishBreed) Reset() {
	var v PetRescuerListFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetRescuerListFavoriteFishBreed) SetTo(v PetRescuerListFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetRescuerListFavoriteFishBreed) Get() (v PetRescuerListFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetRescuerListFavoriteFishBreed) Or(d PetRescuerListFavoriteFishBreed) PetRescuerListFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAllTypesReqState returns new OptUpdateAllTypesReqState with value set to v.
func NewOptUpdateAllTypesReqState(v UpdateAllTypesReqState) OptUpdateAllTypesReqState {
	return OptUpdateAllTypesReqState{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAllTypesReqState is optional UpdateAllTypesReqState.
type OptUpdateAllTypesReqState struct {
	Value UpdateAllTypesReqState
	Set   bool
}

// IsSet returns true if OptUpdateAllTypesReqState was set.
func (o OptUpdateAllTypesReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAllTypesReqState) Reset() {
	var v UpdateAllTypesReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAllTypesReqState) SetTo(v UpdateAllTypesReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAllTypesReqState) Get() (v UpdateAllTypesReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAllTypesReqState) Or(d UpdateAllTypesReqState) UpdateAllTypesReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReqFavoriteCatBreed returns new OptUpdateUserReqFavoriteCatBreed with value set to v.
func NewOptUpdateUserReqFavoriteCatBreed(v UpdateUserReqFavoriteCatBreed) OptUpdateUserReqFavoriteCatBreed {
	return OptUpdateUserReqFavoriteCatBreed{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReqFavoriteCatBreed is optional UpdateUserReqFavoriteCatBreed.
type OptUpdateUserReqFavoriteCatBreed struct {
	Value UpdateUserReqFavoriteCatBreed
	Set   bool
}

// IsSet returns true if OptUpdateUserReqFavoriteCatBreed was set.
func (o OptUpdateUserReqFavoriteCatBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReqFavoriteCatBreed) Reset() {
	var v UpdateUserReqFavoriteCatBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReqFavoriteCatBreed) SetTo(v UpdateUserReqFavoriteCatBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReqFavoriteCatBreed) Get() (v UpdateUserReqFavoriteCatBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReqFavoriteCatBreed) Or(d UpdateUserReqFavoriteCatBreed) UpdateUserReqFavoriteCatBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReqFavoriteDogBreed returns new OptUpdateUserReqFavoriteDogBreed with value set to v.
func NewOptUpdateUserReqFavoriteDogBreed(v UpdateUserReqFavoriteDogBreed) OptUpdateUserReqFavoriteDogBreed {
	return OptUpdateUserReqFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReqFavoriteDogBreed is optional UpdateUserReqFavoriteDogBreed.
type OptUpdateUserReqFavoriteDogBreed struct {
	Value UpdateUserReqFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUpdateUserReqFavoriteDogBreed was set.
func (o OptUpdateUserReqFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReqFavoriteDogBreed) Reset() {
	var v UpdateUserReqFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReqFavoriteDogBreed) SetTo(v UpdateUserReqFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReqFavoriteDogBreed) Get() (v UpdateUserReqFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReqFavoriteDogBreed) Or(d UpdateUserReqFavoriteDogBreed) UpdateUserReqFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReqFavoriteFishBreed returns new OptUpdateUserReqFavoriteFishBreed with value set to v.
func NewOptUpdateUserReqFavoriteFishBreed(v UpdateUserReqFavoriteFishBreed) OptUpdateUserReqFavoriteFishBreed {
	return OptUpdateUserReqFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReqFavoriteFishBreed is optional UpdateUserReqFavoriteFishBreed.
type OptUpdateUserReqFavoriteFishBreed struct {
	Value UpdateUserReqFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUpdateUserReqFavoriteFishBreed was set.
func (o OptUpdateUserReqFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReqFavoriteFishBreed) Reset() {
	var v UpdateUserReqFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReqFavoriteFishBreed) SetTo(v UpdateUserReqFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReqFavoriteFishBreed) Get() (v UpdateUserReqFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReqFavoriteFishBreed) Or(d UpdateUserReqFavoriteFishBreed) UpdateUserReqFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBestFriendReadFavoriteDogBreed returns new OptUserBestFriendReadFavoriteDogBreed with value set to v.
func NewOptUserBestFriendReadFavoriteDogBreed(v UserBestFriendReadFavoriteDogBreed) OptUserBestFriendReadFavoriteDogBreed {
	return OptUserBestFriendReadFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserBestFriendReadFavoriteDogBreed is optional UserBestFriendReadFavoriteDogBreed.
type OptUserBestFriendReadFavoriteDogBreed struct {
	Value UserBestFriendReadFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserBestFriendReadFavoriteDogBreed was set.
func (o OptUserBestFriendReadFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBestFriendReadFavoriteDogBreed) Reset() {
	var v UserBestFriendReadFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBestFriendReadFavoriteDogBreed) SetTo(v UserBestFriendReadFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBestFriendReadFavoriteDogBreed) Get() (v UserBestFriendReadFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBestFriendReadFavoriteDogBreed) Or(d UserBestFriendReadFavoriteDogBreed) UserBestFriendReadFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBestFriendReadFavoriteFishBreed returns new OptUserBestFriendReadFavoriteFishBreed with value set to v.
func NewOptUserBestFriendReadFavoriteFishBreed(v UserBestFriendReadFavoriteFishBreed) OptUserBestFriendReadFavoriteFishBreed {
	return OptUserBestFriendReadFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserBestFriendReadFavoriteFishBreed is optional UserBestFriendReadFavoriteFishBreed.
type OptUserBestFriendReadFavoriteFishBreed struct {
	Value UserBestFriendReadFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserBestFriendReadFavoriteFishBreed was set.
func (o OptUserBestFriendReadFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBestFriendReadFavoriteFishBreed) Reset() {
	var v UserBestFriendReadFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBestFriendReadFavoriteFishBreed) SetTo(v UserBestFriendReadFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBestFriendReadFavoriteFishBreed) Get() (v UserBestFriendReadFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBestFriendReadFavoriteFishBreed) Or(d UserBestFriendReadFavoriteFishBreed) UserBestFriendReadFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCreateFavoriteDogBreed returns new OptUserCreateFavoriteDogBreed with value set to v.
func NewOptUserCreateFavoriteDogBreed(v UserCreateFavoriteDogBreed) OptUserCreateFavoriteDogBreed {
	return OptUserCreateFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserCreateFavoriteDogBreed is optional UserCreateFavoriteDogBreed.
type OptUserCreateFavoriteDogBreed struct {
	Value UserCreateFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserCreateFavoriteDogBreed was set.
func (o OptUserCreateFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCreateFavoriteDogBreed) Reset() {
	var v UserCreateFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCreateFavoriteDogBreed) SetTo(v UserCreateFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCreateFavoriteDogBreed) Get() (v UserCreateFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCreateFavoriteDogBreed) Or(d UserCreateFavoriteDogBreed) UserCreateFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCreateFavoriteFishBreed returns new OptUserCreateFavoriteFishBreed with value set to v.
func NewOptUserCreateFavoriteFishBreed(v UserCreateFavoriteFishBreed) OptUserCreateFavoriteFishBreed {
	return OptUserCreateFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserCreateFavoriteFishBreed is optional UserCreateFavoriteFishBreed.
type OptUserCreateFavoriteFishBreed struct {
	Value UserCreateFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserCreateFavoriteFishBreed was set.
func (o OptUserCreateFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCreateFavoriteFishBreed) Reset() {
	var v UserCreateFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCreateFavoriteFishBreed) SetTo(v UserCreateFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCreateFavoriteFishBreed) Get() (v UserCreateFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCreateFavoriteFishBreed) Or(d UserCreateFavoriteFishBreed) UserCreateFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserListFavoriteDogBreed returns new OptUserListFavoriteDogBreed with value set to v.
func NewOptUserListFavoriteDogBreed(v UserListFavoriteDogBreed) OptUserListFavoriteDogBreed {
	return OptUserListFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserListFavoriteDogBreed is optional UserListFavoriteDogBreed.
type OptUserListFavoriteDogBreed struct {
	Value UserListFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserListFavoriteDogBreed was set.
func (o OptUserListFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserListFavoriteDogBreed) Reset() {
	var v UserListFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserListFavoriteDogBreed) SetTo(v UserListFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserListFavoriteDogBreed) Get() (v UserListFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserListFavoriteDogBreed) Or(d UserListFavoriteDogBreed) UserListFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserListFavoriteFishBreed returns new OptUserListFavoriteFishBreed with value set to v.
func NewOptUserListFavoriteFishBreed(v UserListFavoriteFishBreed) OptUserListFavoriteFishBreed {
	return OptUserListFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserListFavoriteFishBreed is optional UserListFavoriteFishBreed.
type OptUserListFavoriteFishBreed struct {
	Value UserListFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserListFavoriteFishBreed was set.
func (o OptUserListFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserListFavoriteFishBreed) Reset() {
	var v UserListFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserListFavoriteFishBreed) SetTo(v UserListFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserListFavoriteFishBreed) Get() (v UserListFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserListFavoriteFishBreed) Or(d UserListFavoriteFishBreed) UserListFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserReadFavoriteDogBreed returns new OptUserReadFavoriteDogBreed with value set to v.
func NewOptUserReadFavoriteDogBreed(v UserReadFavoriteDogBreed) OptUserReadFavoriteDogBreed {
	return OptUserReadFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserReadFavoriteDogBreed is optional UserReadFavoriteDogBreed.
type OptUserReadFavoriteDogBreed struct {
	Value UserReadFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserReadFavoriteDogBreed was set.
func (o OptUserReadFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserReadFavoriteDogBreed) Reset() {
	var v UserReadFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserReadFavoriteDogBreed) SetTo(v UserReadFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserReadFavoriteDogBreed) Get() (v UserReadFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserReadFavoriteDogBreed) Or(d UserReadFavoriteDogBreed) UserReadFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserReadFavoriteFishBreed returns new OptUserReadFavoriteFishBreed with value set to v.
func NewOptUserReadFavoriteFishBreed(v UserReadFavoriteFishBreed) OptUserReadFavoriteFishBreed {
	return OptUserReadFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserReadFavoriteFishBreed is optional UserReadFavoriteFishBreed.
type OptUserReadFavoriteFishBreed struct {
	Value UserReadFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserReadFavoriteFishBreed was set.
func (o OptUserReadFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserReadFavoriteFishBreed) Reset() {
	var v UserReadFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserReadFavoriteFishBreed) SetTo(v UserReadFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserReadFavoriteFishBreed) Get() (v UserReadFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserReadFavoriteFishBreed) Or(d UserReadFavoriteFishBreed) UserReadFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserUpdateFavoriteDogBreed returns new OptUserUpdateFavoriteDogBreed with value set to v.
func NewOptUserUpdateFavoriteDogBreed(v UserUpdateFavoriteDogBreed) OptUserUpdateFavoriteDogBreed {
	return OptUserUpdateFavoriteDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserUpdateFavoriteDogBreed is optional UserUpdateFavoriteDogBreed.
type OptUserUpdateFavoriteDogBreed struct {
	Value UserUpdateFavoriteDogBreed
	Set   bool
}

// IsSet returns true if OptUserUpdateFavoriteDogBreed was set.
func (o OptUserUpdateFavoriteDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserUpdateFavoriteDogBreed) Reset() {
	var v UserUpdateFavoriteDogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserUpdateFavoriteDogBreed) SetTo(v UserUpdateFavoriteDogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserUpdateFavoriteDogBreed) Get() (v UserUpdateFavoriteDogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserUpdateFavoriteDogBreed) Or(d UserUpdateFavoriteDogBreed) UserUpdateFavoriteDogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserUpdateFavoriteFishBreed returns new OptUserUpdateFavoriteFishBreed with value set to v.
func NewOptUserUpdateFavoriteFishBreed(v UserUpdateFavoriteFishBreed) OptUserUpdateFavoriteFishBreed {
	return OptUserUpdateFavoriteFishBreed{
		Value: v,
		Set:   true,
	}
}

// OptUserUpdateFavoriteFishBreed is optional UserUpdateFavoriteFishBreed.
type OptUserUpdateFavoriteFishBreed struct {
	Value UserUpdateFavoriteFishBreed
	Set   bool
}

// IsSet returns true if OptUserUpdateFavoriteFishBreed was set.
func (o OptUserUpdateFavoriteFishBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserUpdateFavoriteFishBreed) Reset() {
	var v UserUpdateFavoriteFishBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserUpdateFavoriteFishBreed) SetTo(v UserUpdateFavoriteFishBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserUpdateFavoriteFishBreed) Get() (v UserUpdateFavoriteFishBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserUpdateFavoriteFishBreed) Or(d UserUpdateFavoriteFishBreed) UserUpdateFavoriteFishBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Pet_CategoriesList
type PetCategoriesList struct {
	ID       int       `json:"id"`
	Name     string    `json:"name"`
	Readonly OptString `json:"readonly"`
}

// GetID returns the value of ID.
func (s *PetCategoriesList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetCategoriesList) GetName() string {
	return s.Name
}

// GetReadonly returns the value of Readonly.
func (s *PetCategoriesList) GetReadonly() OptString {
	return s.Readonly
}

// SetID sets the value of ID.
func (s *PetCategoriesList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetCategoriesList) SetName(val string) {
	s.Name = val
}

// SetReadonly sets the value of Readonly.
func (s *PetCategoriesList) SetReadonly(val OptString) {
	s.Readonly = val
}

// Ref: #/components/schemas/PetCreate
type PetCreate struct {
	ID         int                   `json:"id"`
	Name       string                `json:"name"`
	Weight     OptInt                `json:"weight"`
	Birthday   OptDateTime           `json:"birthday"`
	TagID      []byte                `json:"tag_id"`
	Height     OptInt                `json:"height"`
	Categories []PetCreateCategories `json:"categories"`
	Owner      PetCreateOwner        `json:"owner"`
}

// GetID returns the value of ID.
func (s *PetCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetCreate) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *PetCreate) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *PetCreate) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *PetCreate) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *PetCreate) GetHeight() OptInt {
	return s.Height
}

// GetCategories returns the value of Categories.
func (s *PetCreate) GetCategories() []PetCreateCategories {
	return s.Categories
}

// GetOwner returns the value of Owner.
func (s *PetCreate) GetOwner() PetCreateOwner {
	return s.Owner
}

// SetID sets the value of ID.
func (s *PetCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetCreate) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *PetCreate) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *PetCreate) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *PetCreate) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *PetCreate) SetHeight(val OptInt) {
	s.Height = val
}

// SetCategories sets the value of Categories.
func (s *PetCreate) SetCategories(val []PetCreateCategories) {
	s.Categories = val
}

// SetOwner sets the value of Owner.
func (s *PetCreate) SetOwner(val PetCreateOwner) {
	s.Owner = val
}

func (*PetCreate) createPetRes() {}

// Ref: #/components/schemas/PetCreate_Categories
type PetCreateCategories struct {
	ID       int       `json:"id"`
	Name     string    `json:"name"`
	Readonly OptString `json:"readonly"`
}

// GetID returns the value of ID.
func (s *PetCreateCategories) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetCreateCategories) GetName() string {
	return s.Name
}

// GetReadonly returns the value of Readonly.
func (s *PetCreateCategories) GetReadonly() OptString {
	return s.Readonly
}

// SetID sets the value of ID.
func (s *PetCreateCategories) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetCreateCategories) SetName(val string) {
	s.Name = val
}

// SetReadonly sets the value of Readonly.
func (s *PetCreateCategories) SetReadonly(val OptString) {
	s.Readonly = val
}

// Ref: #/components/schemas/PetCreate_Owner
type PetCreateOwner struct {
	ID                int                                `json:"id"`
	Name              string                             `json:"name"`
	Age               int64                              `json:"age"`
	Height            OptInt64                           `json:"height"`
	FavoriteCatBreed  PetCreateOwnerFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     PetCreateOwnerFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptPetCreateOwnerFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptPetCreateOwnerFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *PetCreateOwner) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetCreateOwner) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *PetCreateOwner) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *PetCreateOwner) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *PetCreateOwner) GetFavoriteCatBreed() PetCreateOwnerFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *PetCreateOwner) GetFavoriteColor() PetCreateOwnerFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *PetCreateOwner) GetFavoriteDogBreed() OptPetCreateOwnerFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *PetCreateOwner) GetFavoriteFishBreed() OptPetCreateOwnerFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *PetCreateOwner) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetCreateOwner) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *PetCreateOwner) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *PetCreateOwner) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *PetCreateOwner) SetFavoriteCatBreed(val PetCreateOwnerFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *PetCreateOwner) SetFavoriteColor(val PetCreateOwnerFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *PetCreateOwner) SetFavoriteDogBreed(val OptPetCreateOwnerFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *PetCreateOwner) SetFavoriteFishBreed(val OptPetCreateOwnerFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

type PetCreateOwnerFavoriteCatBreed string

const (
	PetCreateOwnerFavoriteCatBreedSiamese PetCreateOwnerFavoriteCatBreed = "siamese"
	PetCreateOwnerFavoriteCatBreedBengal  PetCreateOwnerFavoriteCatBreed = "bengal"
	PetCreateOwnerFavoriteCatBreedLion    PetCreateOwnerFavoriteCatBreed = "lion"
	PetCreateOwnerFavoriteCatBreedTiger   PetCreateOwnerFavoriteCatBreed = "tiger"
	PetCreateOwnerFavoriteCatBreedLeopard PetCreateOwnerFavoriteCatBreed = "leopard"
	PetCreateOwnerFavoriteCatBreedOther   PetCreateOwnerFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetCreateOwnerFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetCreateOwnerFavoriteCatBreedSiamese:
		return []byte(s), nil
	case PetCreateOwnerFavoriteCatBreedBengal:
		return []byte(s), nil
	case PetCreateOwnerFavoriteCatBreedLion:
		return []byte(s), nil
	case PetCreateOwnerFavoriteCatBreedTiger:
		return []byte(s), nil
	case PetCreateOwnerFavoriteCatBreedLeopard:
		return []byte(s), nil
	case PetCreateOwnerFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetCreateOwnerFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch PetCreateOwnerFavoriteCatBreed(data) {
	case PetCreateOwnerFavoriteCatBreedSiamese:
		*s = PetCreateOwnerFavoriteCatBreedSiamese
		return nil
	case PetCreateOwnerFavoriteCatBreedBengal:
		*s = PetCreateOwnerFavoriteCatBreedBengal
		return nil
	case PetCreateOwnerFavoriteCatBreedLion:
		*s = PetCreateOwnerFavoriteCatBreedLion
		return nil
	case PetCreateOwnerFavoriteCatBreedTiger:
		*s = PetCreateOwnerFavoriteCatBreedTiger
		return nil
	case PetCreateOwnerFavoriteCatBreedLeopard:
		*s = PetCreateOwnerFavoriteCatBreedLeopard
		return nil
	case PetCreateOwnerFavoriteCatBreedOther:
		*s = PetCreateOwnerFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetCreateOwnerFavoriteColor string

const (
	PetCreateOwnerFavoriteColorRed   PetCreateOwnerFavoriteColor = "red"
	PetCreateOwnerFavoriteColorGreen PetCreateOwnerFavoriteColor = "green"
	PetCreateOwnerFavoriteColorBlue  PetCreateOwnerFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetCreateOwnerFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case PetCreateOwnerFavoriteColorRed:
		return []byte(s), nil
	case PetCreateOwnerFavoriteColorGreen:
		return []byte(s), nil
	case PetCreateOwnerFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetCreateOwnerFavoriteColor) UnmarshalText(data []byte) error {
	switch PetCreateOwnerFavoriteColor(data) {
	case PetCreateOwnerFavoriteColorRed:
		*s = PetCreateOwnerFavoriteColorRed
		return nil
	case PetCreateOwnerFavoriteColorGreen:
		*s = PetCreateOwnerFavoriteColorGreen
		return nil
	case PetCreateOwnerFavoriteColorBlue:
		*s = PetCreateOwnerFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetCreateOwnerFavoriteDogBreed string

const (
	PetCreateOwnerFavoriteDogBreedKuro PetCreateOwnerFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetCreateOwnerFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetCreateOwnerFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetCreateOwnerFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch PetCreateOwnerFavoriteDogBreed(data) {
	case PetCreateOwnerFavoriteDogBreedKuro:
		*s = PetCreateOwnerFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetCreateOwnerFavoriteFishBreed string

const (
	PetCreateOwnerFavoriteFishBreedGold  PetCreateOwnerFavoriteFishBreed = "gold"
	PetCreateOwnerFavoriteFishBreedKoi   PetCreateOwnerFavoriteFishBreed = "koi"
	PetCreateOwnerFavoriteFishBreedShark PetCreateOwnerFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetCreateOwnerFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetCreateOwnerFavoriteFishBreedGold:
		return []byte(s), nil
	case PetCreateOwnerFavoriteFishBreedKoi:
		return []byte(s), nil
	case PetCreateOwnerFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetCreateOwnerFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch PetCreateOwnerFavoriteFishBreed(data) {
	case PetCreateOwnerFavoriteFishBreedGold:
		*s = PetCreateOwnerFavoriteFishBreedGold
		return nil
	case PetCreateOwnerFavoriteFishBreedKoi:
		*s = PetCreateOwnerFavoriteFishBreedKoi
		return nil
	case PetCreateOwnerFavoriteFishBreedShark:
		*s = PetCreateOwnerFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Pet_FriendsList
type PetFriendsList struct {
	ID       int         `json:"id"`
	Name     string      `json:"name"`
	Weight   OptInt      `json:"weight"`
	Birthday OptDateTime `json:"birthday"`
	TagID    []byte      `json:"tag_id"`
	Height   OptInt      `json:"height"`
}

// GetID returns the value of ID.
func (s *PetFriendsList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetFriendsList) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *PetFriendsList) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *PetFriendsList) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *PetFriendsList) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *PetFriendsList) GetHeight() OptInt {
	return s.Height
}

// SetID sets the value of ID.
func (s *PetFriendsList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetFriendsList) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *PetFriendsList) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *PetFriendsList) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *PetFriendsList) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *PetFriendsList) SetHeight(val OptInt) {
	s.Height = val
}

// Ref: #/components/schemas/PetList
type PetList struct {
	ID       int         `json:"id"`
	Name     string      `json:"name"`
	Weight   OptInt      `json:"weight"`
	Birthday OptDateTime `json:"birthday"`
	TagID    []byte      `json:"tag_id"`
	Height   OptInt      `json:"height"`
}

// GetID returns the value of ID.
func (s *PetList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetList) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *PetList) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *PetList) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *PetList) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *PetList) GetHeight() OptInt {
	return s.Height
}

// SetID sets the value of ID.
func (s *PetList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetList) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *PetList) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *PetList) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *PetList) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *PetList) SetHeight(val OptInt) {
	s.Height = val
}

// Ref: #/components/schemas/Pet_OwnerRead
type PetOwnerRead struct {
	ID                int                              `json:"id"`
	Name              string                           `json:"name"`
	Age               int64                            `json:"age"`
	Height            OptInt64                         `json:"height"`
	FavoriteCatBreed  PetOwnerReadFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     PetOwnerReadFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptPetOwnerReadFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptPetOwnerReadFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *PetOwnerRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetOwnerRead) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *PetOwnerRead) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *PetOwnerRead) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *PetOwnerRead) GetFavoriteCatBreed() PetOwnerReadFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *PetOwnerRead) GetFavoriteColor() PetOwnerReadFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *PetOwnerRead) GetFavoriteDogBreed() OptPetOwnerReadFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *PetOwnerRead) GetFavoriteFishBreed() OptPetOwnerReadFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *PetOwnerRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetOwnerRead) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *PetOwnerRead) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *PetOwnerRead) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *PetOwnerRead) SetFavoriteCatBreed(val PetOwnerReadFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *PetOwnerRead) SetFavoriteColor(val PetOwnerReadFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *PetOwnerRead) SetFavoriteDogBreed(val OptPetOwnerReadFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *PetOwnerRead) SetFavoriteFishBreed(val OptPetOwnerReadFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

func (*PetOwnerRead) readPetOwnerRes() {}

type PetOwnerReadFavoriteCatBreed string

const (
	PetOwnerReadFavoriteCatBreedSiamese PetOwnerReadFavoriteCatBreed = "siamese"
	PetOwnerReadFavoriteCatBreedBengal  PetOwnerReadFavoriteCatBreed = "bengal"
	PetOwnerReadFavoriteCatBreedLion    PetOwnerReadFavoriteCatBreed = "lion"
	PetOwnerReadFavoriteCatBreedTiger   PetOwnerReadFavoriteCatBreed = "tiger"
	PetOwnerReadFavoriteCatBreedLeopard PetOwnerReadFavoriteCatBreed = "leopard"
	PetOwnerReadFavoriteCatBreedOther   PetOwnerReadFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetOwnerReadFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetOwnerReadFavoriteCatBreedSiamese:
		return []byte(s), nil
	case PetOwnerReadFavoriteCatBreedBengal:
		return []byte(s), nil
	case PetOwnerReadFavoriteCatBreedLion:
		return []byte(s), nil
	case PetOwnerReadFavoriteCatBreedTiger:
		return []byte(s), nil
	case PetOwnerReadFavoriteCatBreedLeopard:
		return []byte(s), nil
	case PetOwnerReadFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetOwnerReadFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch PetOwnerReadFavoriteCatBreed(data) {
	case PetOwnerReadFavoriteCatBreedSiamese:
		*s = PetOwnerReadFavoriteCatBreedSiamese
		return nil
	case PetOwnerReadFavoriteCatBreedBengal:
		*s = PetOwnerReadFavoriteCatBreedBengal
		return nil
	case PetOwnerReadFavoriteCatBreedLion:
		*s = PetOwnerReadFavoriteCatBreedLion
		return nil
	case PetOwnerReadFavoriteCatBreedTiger:
		*s = PetOwnerReadFavoriteCatBreedTiger
		return nil
	case PetOwnerReadFavoriteCatBreedLeopard:
		*s = PetOwnerReadFavoriteCatBreedLeopard
		return nil
	case PetOwnerReadFavoriteCatBreedOther:
		*s = PetOwnerReadFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetOwnerReadFavoriteColor string

const (
	PetOwnerReadFavoriteColorRed   PetOwnerReadFavoriteColor = "red"
	PetOwnerReadFavoriteColorGreen PetOwnerReadFavoriteColor = "green"
	PetOwnerReadFavoriteColorBlue  PetOwnerReadFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetOwnerReadFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case PetOwnerReadFavoriteColorRed:
		return []byte(s), nil
	case PetOwnerReadFavoriteColorGreen:
		return []byte(s), nil
	case PetOwnerReadFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetOwnerReadFavoriteColor) UnmarshalText(data []byte) error {
	switch PetOwnerReadFavoriteColor(data) {
	case PetOwnerReadFavoriteColorRed:
		*s = PetOwnerReadFavoriteColorRed
		return nil
	case PetOwnerReadFavoriteColorGreen:
		*s = PetOwnerReadFavoriteColorGreen
		return nil
	case PetOwnerReadFavoriteColorBlue:
		*s = PetOwnerReadFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetOwnerReadFavoriteDogBreed string

const (
	PetOwnerReadFavoriteDogBreedKuro PetOwnerReadFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetOwnerReadFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetOwnerReadFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetOwnerReadFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch PetOwnerReadFavoriteDogBreed(data) {
	case PetOwnerReadFavoriteDogBreedKuro:
		*s = PetOwnerReadFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetOwnerReadFavoriteFishBreed string

const (
	PetOwnerReadFavoriteFishBreedGold  PetOwnerReadFavoriteFishBreed = "gold"
	PetOwnerReadFavoriteFishBreedKoi   PetOwnerReadFavoriteFishBreed = "koi"
	PetOwnerReadFavoriteFishBreedShark PetOwnerReadFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetOwnerReadFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetOwnerReadFavoriteFishBreedGold:
		return []byte(s), nil
	case PetOwnerReadFavoriteFishBreedKoi:
		return []byte(s), nil
	case PetOwnerReadFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetOwnerReadFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch PetOwnerReadFavoriteFishBreed(data) {
	case PetOwnerReadFavoriteFishBreedGold:
		*s = PetOwnerReadFavoriteFishBreedGold
		return nil
	case PetOwnerReadFavoriteFishBreedKoi:
		*s = PetOwnerReadFavoriteFishBreedKoi
		return nil
	case PetOwnerReadFavoriteFishBreedShark:
		*s = PetOwnerReadFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PetRead
type PetRead struct {
	ID       int         `json:"id"`
	Name     string      `json:"name"`
	Weight   OptInt      `json:"weight"`
	Birthday OptDateTime `json:"birthday"`
	TagID    []byte      `json:"tag_id"`
	Height   OptInt      `json:"height"`
}

// GetID returns the value of ID.
func (s *PetRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetRead) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *PetRead) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *PetRead) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *PetRead) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *PetRead) GetHeight() OptInt {
	return s.Height
}

// SetID sets the value of ID.
func (s *PetRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetRead) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *PetRead) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *PetRead) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *PetRead) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *PetRead) SetHeight(val OptInt) {
	s.Height = val
}

func (*PetRead) readPetRes() {}

// Ref: #/components/schemas/Pet_RescuerList
type PetRescuerList struct {
	ID                int                                `json:"id"`
	Name              string                             `json:"name"`
	Age               int64                              `json:"age"`
	Height            OptInt64                           `json:"height"`
	FavoriteCatBreed  PetRescuerListFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     PetRescuerListFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptPetRescuerListFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptPetRescuerListFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *PetRescuerList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetRescuerList) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *PetRescuerList) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *PetRescuerList) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *PetRescuerList) GetFavoriteCatBreed() PetRescuerListFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *PetRescuerList) GetFavoriteColor() PetRescuerListFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *PetRescuerList) GetFavoriteDogBreed() OptPetRescuerListFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *PetRescuerList) GetFavoriteFishBreed() OptPetRescuerListFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *PetRescuerList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetRescuerList) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *PetRescuerList) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *PetRescuerList) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *PetRescuerList) SetFavoriteCatBreed(val PetRescuerListFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *PetRescuerList) SetFavoriteColor(val PetRescuerListFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *PetRescuerList) SetFavoriteDogBreed(val OptPetRescuerListFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *PetRescuerList) SetFavoriteFishBreed(val OptPetRescuerListFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

type PetRescuerListFavoriteCatBreed string

const (
	PetRescuerListFavoriteCatBreedSiamese PetRescuerListFavoriteCatBreed = "siamese"
	PetRescuerListFavoriteCatBreedBengal  PetRescuerListFavoriteCatBreed = "bengal"
	PetRescuerListFavoriteCatBreedLion    PetRescuerListFavoriteCatBreed = "lion"
	PetRescuerListFavoriteCatBreedTiger   PetRescuerListFavoriteCatBreed = "tiger"
	PetRescuerListFavoriteCatBreedLeopard PetRescuerListFavoriteCatBreed = "leopard"
	PetRescuerListFavoriteCatBreedOther   PetRescuerListFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetRescuerListFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetRescuerListFavoriteCatBreedSiamese:
		return []byte(s), nil
	case PetRescuerListFavoriteCatBreedBengal:
		return []byte(s), nil
	case PetRescuerListFavoriteCatBreedLion:
		return []byte(s), nil
	case PetRescuerListFavoriteCatBreedTiger:
		return []byte(s), nil
	case PetRescuerListFavoriteCatBreedLeopard:
		return []byte(s), nil
	case PetRescuerListFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetRescuerListFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch PetRescuerListFavoriteCatBreed(data) {
	case PetRescuerListFavoriteCatBreedSiamese:
		*s = PetRescuerListFavoriteCatBreedSiamese
		return nil
	case PetRescuerListFavoriteCatBreedBengal:
		*s = PetRescuerListFavoriteCatBreedBengal
		return nil
	case PetRescuerListFavoriteCatBreedLion:
		*s = PetRescuerListFavoriteCatBreedLion
		return nil
	case PetRescuerListFavoriteCatBreedTiger:
		*s = PetRescuerListFavoriteCatBreedTiger
		return nil
	case PetRescuerListFavoriteCatBreedLeopard:
		*s = PetRescuerListFavoriteCatBreedLeopard
		return nil
	case PetRescuerListFavoriteCatBreedOther:
		*s = PetRescuerListFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetRescuerListFavoriteColor string

const (
	PetRescuerListFavoriteColorRed   PetRescuerListFavoriteColor = "red"
	PetRescuerListFavoriteColorGreen PetRescuerListFavoriteColor = "green"
	PetRescuerListFavoriteColorBlue  PetRescuerListFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetRescuerListFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case PetRescuerListFavoriteColorRed:
		return []byte(s), nil
	case PetRescuerListFavoriteColorGreen:
		return []byte(s), nil
	case PetRescuerListFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetRescuerListFavoriteColor) UnmarshalText(data []byte) error {
	switch PetRescuerListFavoriteColor(data) {
	case PetRescuerListFavoriteColorRed:
		*s = PetRescuerListFavoriteColorRed
		return nil
	case PetRescuerListFavoriteColorGreen:
		*s = PetRescuerListFavoriteColorGreen
		return nil
	case PetRescuerListFavoriteColorBlue:
		*s = PetRescuerListFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetRescuerListFavoriteDogBreed string

const (
	PetRescuerListFavoriteDogBreedKuro PetRescuerListFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetRescuerListFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetRescuerListFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetRescuerListFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch PetRescuerListFavoriteDogBreed(data) {
	case PetRescuerListFavoriteDogBreedKuro:
		*s = PetRescuerListFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetRescuerListFavoriteFishBreed string

const (
	PetRescuerListFavoriteFishBreedGold  PetRescuerListFavoriteFishBreed = "gold"
	PetRescuerListFavoriteFishBreedKoi   PetRescuerListFavoriteFishBreed = "koi"
	PetRescuerListFavoriteFishBreedShark PetRescuerListFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetRescuerListFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case PetRescuerListFavoriteFishBreedGold:
		return []byte(s), nil
	case PetRescuerListFavoriteFishBreedKoi:
		return []byte(s), nil
	case PetRescuerListFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetRescuerListFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch PetRescuerListFavoriteFishBreed(data) {
	case PetRescuerListFavoriteFishBreedGold:
		*s = PetRescuerListFavoriteFishBreedGold
		return nil
	case PetRescuerListFavoriteFishBreedKoi:
		*s = PetRescuerListFavoriteFishBreedKoi
		return nil
	case PetRescuerListFavoriteFishBreedShark:
		*s = PetRescuerListFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PetUpdate
type PetUpdate struct {
	ID       int         `json:"id"`
	Name     string      `json:"name"`
	Weight   OptInt      `json:"weight"`
	Birthday OptDateTime `json:"birthday"`
	TagID    []byte      `json:"tag_id"`
	Height   OptInt      `json:"height"`
}

// GetID returns the value of ID.
func (s *PetUpdate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PetUpdate) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *PetUpdate) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *PetUpdate) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *PetUpdate) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *PetUpdate) GetHeight() OptInt {
	return s.Height
}

// SetID sets the value of ID.
func (s *PetUpdate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PetUpdate) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *PetUpdate) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *PetUpdate) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *PetUpdate) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *PetUpdate) SetHeight(val OptInt) {
	s.Height = val
}

func (*PetUpdate) updatePetRes() {}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createAllTypesRes()       {}
func (*R400) createCategoryRes()       {}
func (*R400) createHatRes()            {}
func (*R400) createPetRes()            {}
func (*R400) createUserRes()           {}
func (*R400) deleteAllTypesRes()       {}
func (*R400) deleteCategoryRes()       {}
func (*R400) deleteHatRes()            {}
func (*R400) deletePetRes()            {}
func (*R400) deleteUserRes()           {}
func (*R400) listAllTypesRes()         {}
func (*R400) listCategoryPetsRes()     {}
func (*R400) listCategoryRes()         {}
func (*R400) listHatRes()              {}
func (*R400) listPetCategoriesRes()    {}
func (*R400) listPetFriendsRes()       {}
func (*R400) listPetRes()              {}
func (*R400) listPetRescuerRes()       {}
func (*R400) listUserAnimalsSavedRes() {}
func (*R400) listUserPetsRes()         {}
func (*R400) listUserRes()             {}
func (*R400) readAllTypesRes()         {}
func (*R400) readCategoryRes()         {}
func (*R400) readHatRes()              {}
func (*R400) readHatWearerRes()        {}
func (*R400) readPetOwnerRes()         {}
func (*R400) readPetRes()              {}
func (*R400) readUserBestFriendRes()   {}
func (*R400) readUserFavoriteHatRes()  {}
func (*R400) readUserRes()             {}
func (*R400) updateAllTypesRes()       {}
func (*R400) updateCategoryRes()       {}
func (*R400) updateHatRes()            {}
func (*R400) updatePetRes()            {}
func (*R400) updateUserRes()           {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deleteAllTypesRes()       {}
func (*R404) deleteCategoryRes()       {}
func (*R404) deleteHatRes()            {}
func (*R404) deletePetRes()            {}
func (*R404) deleteUserRes()           {}
func (*R404) listAllTypesRes()         {}
func (*R404) listCategoryPetsRes()     {}
func (*R404) listCategoryRes()         {}
func (*R404) listHatRes()              {}
func (*R404) listPetCategoriesRes()    {}
func (*R404) listPetFriendsRes()       {}
func (*R404) listPetRes()              {}
func (*R404) listPetRescuerRes()       {}
func (*R404) listUserAnimalsSavedRes() {}
func (*R404) listUserPetsRes()         {}
func (*R404) listUserRes()             {}
func (*R404) readAllTypesRes()         {}
func (*R404) readCategoryRes()         {}
func (*R404) readHatRes()              {}
func (*R404) readHatWearerRes()        {}
func (*R404) readPetOwnerRes()         {}
func (*R404) readPetRes()              {}
func (*R404) readUserBestFriendRes()   {}
func (*R404) readUserFavoriteHatRes()  {}
func (*R404) readUserRes()             {}
func (*R404) updateAllTypesRes()       {}
func (*R404) updateCategoryRes()       {}
func (*R404) updateHatRes()            {}
func (*R404) updatePetRes()            {}
func (*R404) updateUserRes()           {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createAllTypesRes()       {}
func (*R409) createCategoryRes()       {}
func (*R409) createHatRes()            {}
func (*R409) createPetRes()            {}
func (*R409) createUserRes()           {}
func (*R409) deleteAllTypesRes()       {}
func (*R409) deleteCategoryRes()       {}
func (*R409) deleteHatRes()            {}
func (*R409) deletePetRes()            {}
func (*R409) deleteUserRes()           {}
func (*R409) listAllTypesRes()         {}
func (*R409) listCategoryPetsRes()     {}
func (*R409) listCategoryRes()         {}
func (*R409) listHatRes()              {}
func (*R409) listPetCategoriesRes()    {}
func (*R409) listPetFriendsRes()       {}
func (*R409) listPetRes()              {}
func (*R409) listPetRescuerRes()       {}
func (*R409) listUserAnimalsSavedRes() {}
func (*R409) listUserPetsRes()         {}
func (*R409) listUserRes()             {}
func (*R409) readAllTypesRes()         {}
func (*R409) readCategoryRes()         {}
func (*R409) readHatRes()              {}
func (*R409) readHatWearerRes()        {}
func (*R409) readPetOwnerRes()         {}
func (*R409) readPetRes()              {}
func (*R409) readUserBestFriendRes()   {}
func (*R409) readUserFavoriteHatRes()  {}
func (*R409) readUserRes()             {}
func (*R409) updateAllTypesRes()       {}
func (*R409) updateCategoryRes()       {}
func (*R409) updateHatRes()            {}
func (*R409) updatePetRes()            {}
func (*R409) updateUserRes()           {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createAllTypesRes()       {}
func (*R500) createCategoryRes()       {}
func (*R500) createHatRes()            {}
func (*R500) createPetRes()            {}
func (*R500) createUserRes()           {}
func (*R500) deleteAllTypesRes()       {}
func (*R500) deleteCategoryRes()       {}
func (*R500) deleteHatRes()            {}
func (*R500) deletePetRes()            {}
func (*R500) deleteUserRes()           {}
func (*R500) listAllTypesRes()         {}
func (*R500) listCategoryPetsRes()     {}
func (*R500) listCategoryRes()         {}
func (*R500) listHatRes()              {}
func (*R500) listPetCategoriesRes()    {}
func (*R500) listPetFriendsRes()       {}
func (*R500) listPetRes()              {}
func (*R500) listPetRescuerRes()       {}
func (*R500) listUserAnimalsSavedRes() {}
func (*R500) listUserPetsRes()         {}
func (*R500) listUserRes()             {}
func (*R500) readAllTypesRes()         {}
func (*R500) readCategoryRes()         {}
func (*R500) readHatRes()              {}
func (*R500) readHatWearerRes()        {}
func (*R500) readPetOwnerRes()         {}
func (*R500) readPetRes()              {}
func (*R500) readUserBestFriendRes()   {}
func (*R500) readUserFavoriteHatRes()  {}
func (*R500) readUserRes()             {}
func (*R500) updateAllTypesRes()       {}
func (*R500) updateCategoryRes()       {}
func (*R500) updateHatRes()            {}
func (*R500) updatePetRes()            {}
func (*R500) updateUserRes()           {}

type UpdateAllTypesReq struct {
	Int        OptInt                    `json:"int"`
	Int8       OptInt32                  `json:"int8"`
	Int16      OptInt32                  `json:"int16"`
	Int32      OptInt32                  `json:"int32"`
	Int64      OptInt64                  `json:"int64"`
	Uint       OptInt64                  `json:"uint"`
	Uint8      OptInt32                  `json:"uint8"`
	Uint16     OptInt32                  `json:"uint16"`
	Uint32     OptInt64                  `json:"uint32"`
	Uint64     OptInt64                  `json:"uint64"`
	Float32    OptFloat32                `json:"float32"`
	Float64    OptFloat64                `json:"float64"`
	StringType OptString                 `json:"string_type"`
	Bool       OptBool                   `json:"bool"`
	UUID       OptUUID                   `json:"uuid"`
	Time       OptDateTime               `json:"time"`
	Text       OptString                 `json:"text"`
	State      OptUpdateAllTypesReqState `json:"state"`
	Bytes      []byte                    `json:"bytes"`
	Nilable    OptString                 `json:"nilable"`
}

// GetInt returns the value of Int.
func (s *UpdateAllTypesReq) GetInt() OptInt {
	return s.Int
}

// GetInt8 returns the value of Int8.
func (s *UpdateAllTypesReq) GetInt8() OptInt32 {
	return s.Int8
}

// GetInt16 returns the value of Int16.
func (s *UpdateAllTypesReq) GetInt16() OptInt32 {
	return s.Int16
}

// GetInt32 returns the value of Int32.
func (s *UpdateAllTypesReq) GetInt32() OptInt32 {
	return s.Int32
}

// GetInt64 returns the value of Int64.
func (s *UpdateAllTypesReq) GetInt64() OptInt64 {
	return s.Int64
}

// GetUint returns the value of Uint.
func (s *UpdateAllTypesReq) GetUint() OptInt64 {
	return s.Uint
}

// GetUint8 returns the value of Uint8.
func (s *UpdateAllTypesReq) GetUint8() OptInt32 {
	return s.Uint8
}

// GetUint16 returns the value of Uint16.
func (s *UpdateAllTypesReq) GetUint16() OptInt32 {
	return s.Uint16
}

// GetUint32 returns the value of Uint32.
func (s *UpdateAllTypesReq) GetUint32() OptInt64 {
	return s.Uint32
}

// GetUint64 returns the value of Uint64.
func (s *UpdateAllTypesReq) GetUint64() OptInt64 {
	return s.Uint64
}

// GetFloat32 returns the value of Float32.
func (s *UpdateAllTypesReq) GetFloat32() OptFloat32 {
	return s.Float32
}

// GetFloat64 returns the value of Float64.
func (s *UpdateAllTypesReq) GetFloat64() OptFloat64 {
	return s.Float64
}

// GetStringType returns the value of StringType.
func (s *UpdateAllTypesReq) GetStringType() OptString {
	return s.StringType
}

// GetBool returns the value of Bool.
func (s *UpdateAllTypesReq) GetBool() OptBool {
	return s.Bool
}

// GetUUID returns the value of UUID.
func (s *UpdateAllTypesReq) GetUUID() OptUUID {
	return s.UUID
}

// GetTime returns the value of Time.
func (s *UpdateAllTypesReq) GetTime() OptDateTime {
	return s.Time
}

// GetText returns the value of Text.
func (s *UpdateAllTypesReq) GetText() OptString {
	return s.Text
}

// GetState returns the value of State.
func (s *UpdateAllTypesReq) GetState() OptUpdateAllTypesReqState {
	return s.State
}

// GetBytes returns the value of Bytes.
func (s *UpdateAllTypesReq) GetBytes() []byte {
	return s.Bytes
}

// GetNilable returns the value of Nilable.
func (s *UpdateAllTypesReq) GetNilable() OptString {
	return s.Nilable
}

// SetInt sets the value of Int.
func (s *UpdateAllTypesReq) SetInt(val OptInt) {
	s.Int = val
}

// SetInt8 sets the value of Int8.
func (s *UpdateAllTypesReq) SetInt8(val OptInt32) {
	s.Int8 = val
}

// SetInt16 sets the value of Int16.
func (s *UpdateAllTypesReq) SetInt16(val OptInt32) {
	s.Int16 = val
}

// SetInt32 sets the value of Int32.
func (s *UpdateAllTypesReq) SetInt32(val OptInt32) {
	s.Int32 = val
}

// SetInt64 sets the value of Int64.
func (s *UpdateAllTypesReq) SetInt64(val OptInt64) {
	s.Int64 = val
}

// SetUint sets the value of Uint.
func (s *UpdateAllTypesReq) SetUint(val OptInt64) {
	s.Uint = val
}

// SetUint8 sets the value of Uint8.
func (s *UpdateAllTypesReq) SetUint8(val OptInt32) {
	s.Uint8 = val
}

// SetUint16 sets the value of Uint16.
func (s *UpdateAllTypesReq) SetUint16(val OptInt32) {
	s.Uint16 = val
}

// SetUint32 sets the value of Uint32.
func (s *UpdateAllTypesReq) SetUint32(val OptInt64) {
	s.Uint32 = val
}

// SetUint64 sets the value of Uint64.
func (s *UpdateAllTypesReq) SetUint64(val OptInt64) {
	s.Uint64 = val
}

// SetFloat32 sets the value of Float32.
func (s *UpdateAllTypesReq) SetFloat32(val OptFloat32) {
	s.Float32 = val
}

// SetFloat64 sets the value of Float64.
func (s *UpdateAllTypesReq) SetFloat64(val OptFloat64) {
	s.Float64 = val
}

// SetStringType sets the value of StringType.
func (s *UpdateAllTypesReq) SetStringType(val OptString) {
	s.StringType = val
}

// SetBool sets the value of Bool.
func (s *UpdateAllTypesReq) SetBool(val OptBool) {
	s.Bool = val
}

// SetUUID sets the value of UUID.
func (s *UpdateAllTypesReq) SetUUID(val OptUUID) {
	s.UUID = val
}

// SetTime sets the value of Time.
func (s *UpdateAllTypesReq) SetTime(val OptDateTime) {
	s.Time = val
}

// SetText sets the value of Text.
func (s *UpdateAllTypesReq) SetText(val OptString) {
	s.Text = val
}

// SetState sets the value of State.
func (s *UpdateAllTypesReq) SetState(val OptUpdateAllTypesReqState) {
	s.State = val
}

// SetBytes sets the value of Bytes.
func (s *UpdateAllTypesReq) SetBytes(val []byte) {
	s.Bytes = val
}

// SetNilable sets the value of Nilable.
func (s *UpdateAllTypesReq) SetNilable(val OptString) {
	s.Nilable = val
}

type UpdateAllTypesReqState string

const (
	UpdateAllTypesReqStateOn  UpdateAllTypesReqState = "on"
	UpdateAllTypesReqStateOff UpdateAllTypesReqState = "off"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateAllTypesReqState) MarshalText() ([]byte, error) {
	switch s {
	case UpdateAllTypesReqStateOn:
		return []byte(s), nil
	case UpdateAllTypesReqStateOff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateAllTypesReqState) UnmarshalText(data []byte) error {
	switch UpdateAllTypesReqState(data) {
	case UpdateAllTypesReqStateOn:
		*s = UpdateAllTypesReqStateOn
		return nil
	case UpdateAllTypesReqStateOff:
		*s = UpdateAllTypesReqStateOff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCategoryReq struct {
	Name OptString `json:"name"`
	Pets []int     `json:"pets"`
}

// GetName returns the value of Name.
func (s *UpdateCategoryReq) GetName() OptString {
	return s.Name
}

// GetPets returns the value of Pets.
func (s *UpdateCategoryReq) GetPets() []int {
	return s.Pets
}

// SetName sets the value of Name.
func (s *UpdateCategoryReq) SetName(val OptString) {
	s.Name = val
}

// SetPets sets the value of Pets.
func (s *UpdateCategoryReq) SetPets(val []int) {
	s.Pets = val
}

type UpdateHatReq struct {
	Name   OptString `json:"name"`
	Wearer OptInt    `json:"wearer"`
}

// GetName returns the value of Name.
func (s *UpdateHatReq) GetName() OptString {
	return s.Name
}

// GetWearer returns the value of Wearer.
func (s *UpdateHatReq) GetWearer() OptInt {
	return s.Wearer
}

// SetName sets the value of Name.
func (s *UpdateHatReq) SetName(val OptString) {
	s.Name = val
}

// SetWearer sets the value of Wearer.
func (s *UpdateHatReq) SetWearer(val OptInt) {
	s.Wearer = val
}

type UpdatePetReq struct {
	Name       OptString   `json:"name"`
	Weight     OptInt      `json:"weight"`
	Birthday   OptDateTime `json:"birthday"`
	TagID      []byte      `json:"tag_id"`
	Height     OptInt      `json:"height"`
	Categories []int       `json:"categories"`
	Owner      OptInt      `json:"owner"`
	Rescuer    []int       `json:"rescuer"`
	Friends    []int       `json:"friends"`
}

// GetName returns the value of Name.
func (s *UpdatePetReq) GetName() OptString {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *UpdatePetReq) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *UpdatePetReq) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *UpdatePetReq) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *UpdatePetReq) GetHeight() OptInt {
	return s.Height
}

// GetCategories returns the value of Categories.
func (s *UpdatePetReq) GetCategories() []int {
	return s.Categories
}

// GetOwner returns the value of Owner.
func (s *UpdatePetReq) GetOwner() OptInt {
	return s.Owner
}

// GetRescuer returns the value of Rescuer.
func (s *UpdatePetReq) GetRescuer() []int {
	return s.Rescuer
}

// GetFriends returns the value of Friends.
func (s *UpdatePetReq) GetFriends() []int {
	return s.Friends
}

// SetName sets the value of Name.
func (s *UpdatePetReq) SetName(val OptString) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *UpdatePetReq) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *UpdatePetReq) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *UpdatePetReq) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *UpdatePetReq) SetHeight(val OptInt) {
	s.Height = val
}

// SetCategories sets the value of Categories.
func (s *UpdatePetReq) SetCategories(val []int) {
	s.Categories = val
}

// SetOwner sets the value of Owner.
func (s *UpdatePetReq) SetOwner(val OptInt) {
	s.Owner = val
}

// SetRescuer sets the value of Rescuer.
func (s *UpdatePetReq) SetRescuer(val []int) {
	s.Rescuer = val
}

// SetFriends sets the value of Friends.
func (s *UpdatePetReq) SetFriends(val []int) {
	s.Friends = val
}

type UpdateUserReq struct {
	Name              OptString                         `json:"name"`
	Age               OptInt64                          `json:"age"`
	Height            OptInt64                          `json:"height"`
	FavoriteCatBreed  OptUpdateUserReqFavoriteCatBreed  `json:"favorite_cat_breed"`
	FavoriteDogBreed  OptUpdateUserReqFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptUpdateUserReqFavoriteFishBreed `json:"favorite_fish_breed"`
	Pets              []int                             `json:"pets"`
	AnimalsSaved      []int                             `json:"animals_saved"`
	BestFriend        OptInt                            `json:"best_friend"`
	FavoriteHat       OptInt                            `json:"favorite_hat"`
}

// GetName returns the value of Name.
func (s *UpdateUserReq) GetName() OptString {
	return s.Name
}

// GetAge returns the value of Age.
func (s *UpdateUserReq) GetAge() OptInt64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *UpdateUserReq) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *UpdateUserReq) GetFavoriteCatBreed() OptUpdateUserReqFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *UpdateUserReq) GetFavoriteDogBreed() OptUpdateUserReqFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *UpdateUserReq) GetFavoriteFishBreed() OptUpdateUserReqFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// GetPets returns the value of Pets.
func (s *UpdateUserReq) GetPets() []int {
	return s.Pets
}

// GetAnimalsSaved returns the value of AnimalsSaved.
func (s *UpdateUserReq) GetAnimalsSaved() []int {
	return s.AnimalsSaved
}

// GetBestFriend returns the value of BestFriend.
func (s *UpdateUserReq) GetBestFriend() OptInt {
	return s.BestFriend
}

// GetFavoriteHat returns the value of FavoriteHat.
func (s *UpdateUserReq) GetFavoriteHat() OptInt {
	return s.FavoriteHat
}

// SetName sets the value of Name.
func (s *UpdateUserReq) SetName(val OptString) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *UpdateUserReq) SetAge(val OptInt64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *UpdateUserReq) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *UpdateUserReq) SetFavoriteCatBreed(val OptUpdateUserReqFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *UpdateUserReq) SetFavoriteDogBreed(val OptUpdateUserReqFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *UpdateUserReq) SetFavoriteFishBreed(val OptUpdateUserReqFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

// SetPets sets the value of Pets.
func (s *UpdateUserReq) SetPets(val []int) {
	s.Pets = val
}

// SetAnimalsSaved sets the value of AnimalsSaved.
func (s *UpdateUserReq) SetAnimalsSaved(val []int) {
	s.AnimalsSaved = val
}

// SetBestFriend sets the value of BestFriend.
func (s *UpdateUserReq) SetBestFriend(val OptInt) {
	s.BestFriend = val
}

// SetFavoriteHat sets the value of FavoriteHat.
func (s *UpdateUserReq) SetFavoriteHat(val OptInt) {
	s.FavoriteHat = val
}

type UpdateUserReqFavoriteCatBreed string

const (
	UpdateUserReqFavoriteCatBreedSiamese UpdateUserReqFavoriteCatBreed = "siamese"
	UpdateUserReqFavoriteCatBreedBengal  UpdateUserReqFavoriteCatBreed = "bengal"
	UpdateUserReqFavoriteCatBreedLion    UpdateUserReqFavoriteCatBreed = "lion"
	UpdateUserReqFavoriteCatBreedTiger   UpdateUserReqFavoriteCatBreed = "tiger"
	UpdateUserReqFavoriteCatBreedLeopard UpdateUserReqFavoriteCatBreed = "leopard"
	UpdateUserReqFavoriteCatBreedOther   UpdateUserReqFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateUserReqFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case UpdateUserReqFavoriteCatBreedSiamese:
		return []byte(s), nil
	case UpdateUserReqFavoriteCatBreedBengal:
		return []byte(s), nil
	case UpdateUserReqFavoriteCatBreedLion:
		return []byte(s), nil
	case UpdateUserReqFavoriteCatBreedTiger:
		return []byte(s), nil
	case UpdateUserReqFavoriteCatBreedLeopard:
		return []byte(s), nil
	case UpdateUserReqFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateUserReqFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch UpdateUserReqFavoriteCatBreed(data) {
	case UpdateUserReqFavoriteCatBreedSiamese:
		*s = UpdateUserReqFavoriteCatBreedSiamese
		return nil
	case UpdateUserReqFavoriteCatBreedBengal:
		*s = UpdateUserReqFavoriteCatBreedBengal
		return nil
	case UpdateUserReqFavoriteCatBreedLion:
		*s = UpdateUserReqFavoriteCatBreedLion
		return nil
	case UpdateUserReqFavoriteCatBreedTiger:
		*s = UpdateUserReqFavoriteCatBreedTiger
		return nil
	case UpdateUserReqFavoriteCatBreedLeopard:
		*s = UpdateUserReqFavoriteCatBreedLeopard
		return nil
	case UpdateUserReqFavoriteCatBreedOther:
		*s = UpdateUserReqFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateUserReqFavoriteDogBreed string

const (
	UpdateUserReqFavoriteDogBreedKuro UpdateUserReqFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateUserReqFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case UpdateUserReqFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateUserReqFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch UpdateUserReqFavoriteDogBreed(data) {
	case UpdateUserReqFavoriteDogBreedKuro:
		*s = UpdateUserReqFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateUserReqFavoriteFishBreed string

const (
	UpdateUserReqFavoriteFishBreedGold  UpdateUserReqFavoriteFishBreed = "gold"
	UpdateUserReqFavoriteFishBreedKoi   UpdateUserReqFavoriteFishBreed = "koi"
	UpdateUserReqFavoriteFishBreedShark UpdateUserReqFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateUserReqFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case UpdateUserReqFavoriteFishBreedGold:
		return []byte(s), nil
	case UpdateUserReqFavoriteFishBreedKoi:
		return []byte(s), nil
	case UpdateUserReqFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateUserReqFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch UpdateUserReqFavoriteFishBreed(data) {
	case UpdateUserReqFavoriteFishBreedGold:
		*s = UpdateUserReqFavoriteFishBreedGold
		return nil
	case UpdateUserReqFavoriteFishBreedKoi:
		*s = UpdateUserReqFavoriteFishBreedKoi
		return nil
	case UpdateUserReqFavoriteFishBreedShark:
		*s = UpdateUserReqFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/User_AnimalsSavedList
type UserAnimalsSavedList struct {
	ID       int         `json:"id"`
	Name     string      `json:"name"`
	Weight   OptInt      `json:"weight"`
	Birthday OptDateTime `json:"birthday"`
	TagID    []byte      `json:"tag_id"`
	Height   OptInt      `json:"height"`
}

// GetID returns the value of ID.
func (s *UserAnimalsSavedList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserAnimalsSavedList) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *UserAnimalsSavedList) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *UserAnimalsSavedList) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *UserAnimalsSavedList) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *UserAnimalsSavedList) GetHeight() OptInt {
	return s.Height
}

// SetID sets the value of ID.
func (s *UserAnimalsSavedList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserAnimalsSavedList) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *UserAnimalsSavedList) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *UserAnimalsSavedList) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *UserAnimalsSavedList) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *UserAnimalsSavedList) SetHeight(val OptInt) {
	s.Height = val
}

// Ref: #/components/schemas/User_BestFriendRead
type UserBestFriendRead struct {
	ID                int                                    `json:"id"`
	Name              string                                 `json:"name"`
	Age               int64                                  `json:"age"`
	Height            OptInt64                               `json:"height"`
	FavoriteCatBreed  UserBestFriendReadFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     UserBestFriendReadFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptUserBestFriendReadFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptUserBestFriendReadFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *UserBestFriendRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserBestFriendRead) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *UserBestFriendRead) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *UserBestFriendRead) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *UserBestFriendRead) GetFavoriteCatBreed() UserBestFriendReadFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *UserBestFriendRead) GetFavoriteColor() UserBestFriendReadFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *UserBestFriendRead) GetFavoriteDogBreed() OptUserBestFriendReadFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *UserBestFriendRead) GetFavoriteFishBreed() OptUserBestFriendReadFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *UserBestFriendRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserBestFriendRead) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *UserBestFriendRead) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *UserBestFriendRead) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *UserBestFriendRead) SetFavoriteCatBreed(val UserBestFriendReadFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *UserBestFriendRead) SetFavoriteColor(val UserBestFriendReadFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *UserBestFriendRead) SetFavoriteDogBreed(val OptUserBestFriendReadFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *UserBestFriendRead) SetFavoriteFishBreed(val OptUserBestFriendReadFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

func (*UserBestFriendRead) readUserBestFriendRes() {}

type UserBestFriendReadFavoriteCatBreed string

const (
	UserBestFriendReadFavoriteCatBreedSiamese UserBestFriendReadFavoriteCatBreed = "siamese"
	UserBestFriendReadFavoriteCatBreedBengal  UserBestFriendReadFavoriteCatBreed = "bengal"
	UserBestFriendReadFavoriteCatBreedLion    UserBestFriendReadFavoriteCatBreed = "lion"
	UserBestFriendReadFavoriteCatBreedTiger   UserBestFriendReadFavoriteCatBreed = "tiger"
	UserBestFriendReadFavoriteCatBreedLeopard UserBestFriendReadFavoriteCatBreed = "leopard"
	UserBestFriendReadFavoriteCatBreedOther   UserBestFriendReadFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserBestFriendReadFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserBestFriendReadFavoriteCatBreedSiamese:
		return []byte(s), nil
	case UserBestFriendReadFavoriteCatBreedBengal:
		return []byte(s), nil
	case UserBestFriendReadFavoriteCatBreedLion:
		return []byte(s), nil
	case UserBestFriendReadFavoriteCatBreedTiger:
		return []byte(s), nil
	case UserBestFriendReadFavoriteCatBreedLeopard:
		return []byte(s), nil
	case UserBestFriendReadFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserBestFriendReadFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch UserBestFriendReadFavoriteCatBreed(data) {
	case UserBestFriendReadFavoriteCatBreedSiamese:
		*s = UserBestFriendReadFavoriteCatBreedSiamese
		return nil
	case UserBestFriendReadFavoriteCatBreedBengal:
		*s = UserBestFriendReadFavoriteCatBreedBengal
		return nil
	case UserBestFriendReadFavoriteCatBreedLion:
		*s = UserBestFriendReadFavoriteCatBreedLion
		return nil
	case UserBestFriendReadFavoriteCatBreedTiger:
		*s = UserBestFriendReadFavoriteCatBreedTiger
		return nil
	case UserBestFriendReadFavoriteCatBreedLeopard:
		*s = UserBestFriendReadFavoriteCatBreedLeopard
		return nil
	case UserBestFriendReadFavoriteCatBreedOther:
		*s = UserBestFriendReadFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserBestFriendReadFavoriteColor string

const (
	UserBestFriendReadFavoriteColorRed   UserBestFriendReadFavoriteColor = "red"
	UserBestFriendReadFavoriteColorGreen UserBestFriendReadFavoriteColor = "green"
	UserBestFriendReadFavoriteColorBlue  UserBestFriendReadFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserBestFriendReadFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case UserBestFriendReadFavoriteColorRed:
		return []byte(s), nil
	case UserBestFriendReadFavoriteColorGreen:
		return []byte(s), nil
	case UserBestFriendReadFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserBestFriendReadFavoriteColor) UnmarshalText(data []byte) error {
	switch UserBestFriendReadFavoriteColor(data) {
	case UserBestFriendReadFavoriteColorRed:
		*s = UserBestFriendReadFavoriteColorRed
		return nil
	case UserBestFriendReadFavoriteColorGreen:
		*s = UserBestFriendReadFavoriteColorGreen
		return nil
	case UserBestFriendReadFavoriteColorBlue:
		*s = UserBestFriendReadFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserBestFriendReadFavoriteDogBreed string

const (
	UserBestFriendReadFavoriteDogBreedKuro UserBestFriendReadFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserBestFriendReadFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserBestFriendReadFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserBestFriendReadFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch UserBestFriendReadFavoriteDogBreed(data) {
	case UserBestFriendReadFavoriteDogBreedKuro:
		*s = UserBestFriendReadFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserBestFriendReadFavoriteFishBreed string

const (
	UserBestFriendReadFavoriteFishBreedGold  UserBestFriendReadFavoriteFishBreed = "gold"
	UserBestFriendReadFavoriteFishBreedKoi   UserBestFriendReadFavoriteFishBreed = "koi"
	UserBestFriendReadFavoriteFishBreedShark UserBestFriendReadFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserBestFriendReadFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserBestFriendReadFavoriteFishBreedGold:
		return []byte(s), nil
	case UserBestFriendReadFavoriteFishBreedKoi:
		return []byte(s), nil
	case UserBestFriendReadFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserBestFriendReadFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch UserBestFriendReadFavoriteFishBreed(data) {
	case UserBestFriendReadFavoriteFishBreedGold:
		*s = UserBestFriendReadFavoriteFishBreedGold
		return nil
	case UserBestFriendReadFavoriteFishBreedKoi:
		*s = UserBestFriendReadFavoriteFishBreedKoi
		return nil
	case UserBestFriendReadFavoriteFishBreedShark:
		*s = UserBestFriendReadFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserCreate
type UserCreate struct {
	ID                int                            `json:"id"`
	Name              string                         `json:"name"`
	Age               int64                          `json:"age"`
	Height            OptInt64                       `json:"height"`
	FavoriteCatBreed  UserCreateFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     UserCreateFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptUserCreateFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptUserCreateFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *UserCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserCreate) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *UserCreate) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *UserCreate) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *UserCreate) GetFavoriteCatBreed() UserCreateFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *UserCreate) GetFavoriteColor() UserCreateFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *UserCreate) GetFavoriteDogBreed() OptUserCreateFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *UserCreate) GetFavoriteFishBreed() OptUserCreateFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *UserCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserCreate) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *UserCreate) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *UserCreate) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *UserCreate) SetFavoriteCatBreed(val UserCreateFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *UserCreate) SetFavoriteColor(val UserCreateFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *UserCreate) SetFavoriteDogBreed(val OptUserCreateFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *UserCreate) SetFavoriteFishBreed(val OptUserCreateFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

func (*UserCreate) createUserRes() {}

type UserCreateFavoriteCatBreed string

const (
	UserCreateFavoriteCatBreedSiamese UserCreateFavoriteCatBreed = "siamese"
	UserCreateFavoriteCatBreedBengal  UserCreateFavoriteCatBreed = "bengal"
	UserCreateFavoriteCatBreedLion    UserCreateFavoriteCatBreed = "lion"
	UserCreateFavoriteCatBreedTiger   UserCreateFavoriteCatBreed = "tiger"
	UserCreateFavoriteCatBreedLeopard UserCreateFavoriteCatBreed = "leopard"
	UserCreateFavoriteCatBreedOther   UserCreateFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserCreateFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserCreateFavoriteCatBreedSiamese:
		return []byte(s), nil
	case UserCreateFavoriteCatBreedBengal:
		return []byte(s), nil
	case UserCreateFavoriteCatBreedLion:
		return []byte(s), nil
	case UserCreateFavoriteCatBreedTiger:
		return []byte(s), nil
	case UserCreateFavoriteCatBreedLeopard:
		return []byte(s), nil
	case UserCreateFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserCreateFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch UserCreateFavoriteCatBreed(data) {
	case UserCreateFavoriteCatBreedSiamese:
		*s = UserCreateFavoriteCatBreedSiamese
		return nil
	case UserCreateFavoriteCatBreedBengal:
		*s = UserCreateFavoriteCatBreedBengal
		return nil
	case UserCreateFavoriteCatBreedLion:
		*s = UserCreateFavoriteCatBreedLion
		return nil
	case UserCreateFavoriteCatBreedTiger:
		*s = UserCreateFavoriteCatBreedTiger
		return nil
	case UserCreateFavoriteCatBreedLeopard:
		*s = UserCreateFavoriteCatBreedLeopard
		return nil
	case UserCreateFavoriteCatBreedOther:
		*s = UserCreateFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserCreateFavoriteColor string

const (
	UserCreateFavoriteColorRed   UserCreateFavoriteColor = "red"
	UserCreateFavoriteColorGreen UserCreateFavoriteColor = "green"
	UserCreateFavoriteColorBlue  UserCreateFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserCreateFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case UserCreateFavoriteColorRed:
		return []byte(s), nil
	case UserCreateFavoriteColorGreen:
		return []byte(s), nil
	case UserCreateFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserCreateFavoriteColor) UnmarshalText(data []byte) error {
	switch UserCreateFavoriteColor(data) {
	case UserCreateFavoriteColorRed:
		*s = UserCreateFavoriteColorRed
		return nil
	case UserCreateFavoriteColorGreen:
		*s = UserCreateFavoriteColorGreen
		return nil
	case UserCreateFavoriteColorBlue:
		*s = UserCreateFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserCreateFavoriteDogBreed string

const (
	UserCreateFavoriteDogBreedKuro UserCreateFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserCreateFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserCreateFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserCreateFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch UserCreateFavoriteDogBreed(data) {
	case UserCreateFavoriteDogBreedKuro:
		*s = UserCreateFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserCreateFavoriteFishBreed string

const (
	UserCreateFavoriteFishBreedGold  UserCreateFavoriteFishBreed = "gold"
	UserCreateFavoriteFishBreedKoi   UserCreateFavoriteFishBreed = "koi"
	UserCreateFavoriteFishBreedShark UserCreateFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserCreateFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserCreateFavoriteFishBreedGold:
		return []byte(s), nil
	case UserCreateFavoriteFishBreedKoi:
		return []byte(s), nil
	case UserCreateFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserCreateFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch UserCreateFavoriteFishBreed(data) {
	case UserCreateFavoriteFishBreedGold:
		*s = UserCreateFavoriteFishBreedGold
		return nil
	case UserCreateFavoriteFishBreedKoi:
		*s = UserCreateFavoriteFishBreedKoi
		return nil
	case UserCreateFavoriteFishBreedShark:
		*s = UserCreateFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/User_FavoriteHatRead
type UserFavoriteHatRead struct {
	ID   int                     `json:"id"`
	Name string                  `json:"name"`
	Type UserFavoriteHatReadType `json:"type"`
}

// GetID returns the value of ID.
func (s *UserFavoriteHatRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserFavoriteHatRead) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *UserFavoriteHatRead) GetType() UserFavoriteHatReadType {
	return s.Type
}

// SetID sets the value of ID.
func (s *UserFavoriteHatRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserFavoriteHatRead) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UserFavoriteHatRead) SetType(val UserFavoriteHatReadType) {
	s.Type = val
}

func (*UserFavoriteHatRead) readUserFavoriteHatRes() {}

type UserFavoriteHatReadType string

const (
	UserFavoriteHatReadTypeDad      UserFavoriteHatReadType = "dad"
	UserFavoriteHatReadTypeTrucker  UserFavoriteHatReadType = "trucker"
	UserFavoriteHatReadTypeSnapback UserFavoriteHatReadType = "snapback"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserFavoriteHatReadType) MarshalText() ([]byte, error) {
	switch s {
	case UserFavoriteHatReadTypeDad:
		return []byte(s), nil
	case UserFavoriteHatReadTypeTrucker:
		return []byte(s), nil
	case UserFavoriteHatReadTypeSnapback:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserFavoriteHatReadType) UnmarshalText(data []byte) error {
	switch UserFavoriteHatReadType(data) {
	case UserFavoriteHatReadTypeDad:
		*s = UserFavoriteHatReadTypeDad
		return nil
	case UserFavoriteHatReadTypeTrucker:
		*s = UserFavoriteHatReadTypeTrucker
		return nil
	case UserFavoriteHatReadTypeSnapback:
		*s = UserFavoriteHatReadTypeSnapback
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserList
type UserList struct {
	ID                int                          `json:"id"`
	Name              string                       `json:"name"`
	Age               int64                        `json:"age"`
	Height            OptInt64                     `json:"height"`
	FavoriteCatBreed  UserListFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     UserListFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptUserListFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptUserListFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *UserList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserList) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *UserList) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *UserList) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *UserList) GetFavoriteCatBreed() UserListFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *UserList) GetFavoriteColor() UserListFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *UserList) GetFavoriteDogBreed() OptUserListFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *UserList) GetFavoriteFishBreed() OptUserListFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *UserList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserList) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *UserList) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *UserList) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *UserList) SetFavoriteCatBreed(val UserListFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *UserList) SetFavoriteColor(val UserListFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *UserList) SetFavoriteDogBreed(val OptUserListFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *UserList) SetFavoriteFishBreed(val OptUserListFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

type UserListFavoriteCatBreed string

const (
	UserListFavoriteCatBreedSiamese UserListFavoriteCatBreed = "siamese"
	UserListFavoriteCatBreedBengal  UserListFavoriteCatBreed = "bengal"
	UserListFavoriteCatBreedLion    UserListFavoriteCatBreed = "lion"
	UserListFavoriteCatBreedTiger   UserListFavoriteCatBreed = "tiger"
	UserListFavoriteCatBreedLeopard UserListFavoriteCatBreed = "leopard"
	UserListFavoriteCatBreedOther   UserListFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserListFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserListFavoriteCatBreedSiamese:
		return []byte(s), nil
	case UserListFavoriteCatBreedBengal:
		return []byte(s), nil
	case UserListFavoriteCatBreedLion:
		return []byte(s), nil
	case UserListFavoriteCatBreedTiger:
		return []byte(s), nil
	case UserListFavoriteCatBreedLeopard:
		return []byte(s), nil
	case UserListFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserListFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch UserListFavoriteCatBreed(data) {
	case UserListFavoriteCatBreedSiamese:
		*s = UserListFavoriteCatBreedSiamese
		return nil
	case UserListFavoriteCatBreedBengal:
		*s = UserListFavoriteCatBreedBengal
		return nil
	case UserListFavoriteCatBreedLion:
		*s = UserListFavoriteCatBreedLion
		return nil
	case UserListFavoriteCatBreedTiger:
		*s = UserListFavoriteCatBreedTiger
		return nil
	case UserListFavoriteCatBreedLeopard:
		*s = UserListFavoriteCatBreedLeopard
		return nil
	case UserListFavoriteCatBreedOther:
		*s = UserListFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserListFavoriteColor string

const (
	UserListFavoriteColorRed   UserListFavoriteColor = "red"
	UserListFavoriteColorGreen UserListFavoriteColor = "green"
	UserListFavoriteColorBlue  UserListFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserListFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case UserListFavoriteColorRed:
		return []byte(s), nil
	case UserListFavoriteColorGreen:
		return []byte(s), nil
	case UserListFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserListFavoriteColor) UnmarshalText(data []byte) error {
	switch UserListFavoriteColor(data) {
	case UserListFavoriteColorRed:
		*s = UserListFavoriteColorRed
		return nil
	case UserListFavoriteColorGreen:
		*s = UserListFavoriteColorGreen
		return nil
	case UserListFavoriteColorBlue:
		*s = UserListFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserListFavoriteDogBreed string

const (
	UserListFavoriteDogBreedKuro UserListFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserListFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserListFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserListFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch UserListFavoriteDogBreed(data) {
	case UserListFavoriteDogBreedKuro:
		*s = UserListFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserListFavoriteFishBreed string

const (
	UserListFavoriteFishBreedGold  UserListFavoriteFishBreed = "gold"
	UserListFavoriteFishBreedKoi   UserListFavoriteFishBreed = "koi"
	UserListFavoriteFishBreedShark UserListFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserListFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserListFavoriteFishBreedGold:
		return []byte(s), nil
	case UserListFavoriteFishBreedKoi:
		return []byte(s), nil
	case UserListFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserListFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch UserListFavoriteFishBreed(data) {
	case UserListFavoriteFishBreedGold:
		*s = UserListFavoriteFishBreedGold
		return nil
	case UserListFavoriteFishBreedKoi:
		*s = UserListFavoriteFishBreedKoi
		return nil
	case UserListFavoriteFishBreedShark:
		*s = UserListFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/User_PetsList
type UserPetsList struct {
	ID       int         `json:"id"`
	Name     string      `json:"name"`
	Weight   OptInt      `json:"weight"`
	Birthday OptDateTime `json:"birthday"`
	TagID    []byte      `json:"tag_id"`
	Height   OptInt      `json:"height"`
}

// GetID returns the value of ID.
func (s *UserPetsList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserPetsList) GetName() string {
	return s.Name
}

// GetWeight returns the value of Weight.
func (s *UserPetsList) GetWeight() OptInt {
	return s.Weight
}

// GetBirthday returns the value of Birthday.
func (s *UserPetsList) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetTagID returns the value of TagID.
func (s *UserPetsList) GetTagID() []byte {
	return s.TagID
}

// GetHeight returns the value of Height.
func (s *UserPetsList) GetHeight() OptInt {
	return s.Height
}

// SetID sets the value of ID.
func (s *UserPetsList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserPetsList) SetName(val string) {
	s.Name = val
}

// SetWeight sets the value of Weight.
func (s *UserPetsList) SetWeight(val OptInt) {
	s.Weight = val
}

// SetBirthday sets the value of Birthday.
func (s *UserPetsList) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetTagID sets the value of TagID.
func (s *UserPetsList) SetTagID(val []byte) {
	s.TagID = val
}

// SetHeight sets the value of Height.
func (s *UserPetsList) SetHeight(val OptInt) {
	s.Height = val
}

// Ref: #/components/schemas/UserRead
type UserRead struct {
	ID                int                          `json:"id"`
	Name              string                       `json:"name"`
	Age               int64                        `json:"age"`
	Height            OptInt64                     `json:"height"`
	FavoriteCatBreed  UserReadFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     UserReadFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptUserReadFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptUserReadFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *UserRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserRead) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *UserRead) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *UserRead) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *UserRead) GetFavoriteCatBreed() UserReadFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *UserRead) GetFavoriteColor() UserReadFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *UserRead) GetFavoriteDogBreed() OptUserReadFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *UserRead) GetFavoriteFishBreed() OptUserReadFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *UserRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserRead) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *UserRead) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *UserRead) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *UserRead) SetFavoriteCatBreed(val UserReadFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *UserRead) SetFavoriteColor(val UserReadFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *UserRead) SetFavoriteDogBreed(val OptUserReadFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *UserRead) SetFavoriteFishBreed(val OptUserReadFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

func (*UserRead) readUserRes() {}

type UserReadFavoriteCatBreed string

const (
	UserReadFavoriteCatBreedSiamese UserReadFavoriteCatBreed = "siamese"
	UserReadFavoriteCatBreedBengal  UserReadFavoriteCatBreed = "bengal"
	UserReadFavoriteCatBreedLion    UserReadFavoriteCatBreed = "lion"
	UserReadFavoriteCatBreedTiger   UserReadFavoriteCatBreed = "tiger"
	UserReadFavoriteCatBreedLeopard UserReadFavoriteCatBreed = "leopard"
	UserReadFavoriteCatBreedOther   UserReadFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserReadFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserReadFavoriteCatBreedSiamese:
		return []byte(s), nil
	case UserReadFavoriteCatBreedBengal:
		return []byte(s), nil
	case UserReadFavoriteCatBreedLion:
		return []byte(s), nil
	case UserReadFavoriteCatBreedTiger:
		return []byte(s), nil
	case UserReadFavoriteCatBreedLeopard:
		return []byte(s), nil
	case UserReadFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserReadFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch UserReadFavoriteCatBreed(data) {
	case UserReadFavoriteCatBreedSiamese:
		*s = UserReadFavoriteCatBreedSiamese
		return nil
	case UserReadFavoriteCatBreedBengal:
		*s = UserReadFavoriteCatBreedBengal
		return nil
	case UserReadFavoriteCatBreedLion:
		*s = UserReadFavoriteCatBreedLion
		return nil
	case UserReadFavoriteCatBreedTiger:
		*s = UserReadFavoriteCatBreedTiger
		return nil
	case UserReadFavoriteCatBreedLeopard:
		*s = UserReadFavoriteCatBreedLeopard
		return nil
	case UserReadFavoriteCatBreedOther:
		*s = UserReadFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserReadFavoriteColor string

const (
	UserReadFavoriteColorRed   UserReadFavoriteColor = "red"
	UserReadFavoriteColorGreen UserReadFavoriteColor = "green"
	UserReadFavoriteColorBlue  UserReadFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserReadFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case UserReadFavoriteColorRed:
		return []byte(s), nil
	case UserReadFavoriteColorGreen:
		return []byte(s), nil
	case UserReadFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserReadFavoriteColor) UnmarshalText(data []byte) error {
	switch UserReadFavoriteColor(data) {
	case UserReadFavoriteColorRed:
		*s = UserReadFavoriteColorRed
		return nil
	case UserReadFavoriteColorGreen:
		*s = UserReadFavoriteColorGreen
		return nil
	case UserReadFavoriteColorBlue:
		*s = UserReadFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserReadFavoriteDogBreed string

const (
	UserReadFavoriteDogBreedKuro UserReadFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserReadFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserReadFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserReadFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch UserReadFavoriteDogBreed(data) {
	case UserReadFavoriteDogBreedKuro:
		*s = UserReadFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserReadFavoriteFishBreed string

const (
	UserReadFavoriteFishBreedGold  UserReadFavoriteFishBreed = "gold"
	UserReadFavoriteFishBreedKoi   UserReadFavoriteFishBreed = "koi"
	UserReadFavoriteFishBreedShark UserReadFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserReadFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserReadFavoriteFishBreedGold:
		return []byte(s), nil
	case UserReadFavoriteFishBreedKoi:
		return []byte(s), nil
	case UserReadFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserReadFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch UserReadFavoriteFishBreed(data) {
	case UserReadFavoriteFishBreedGold:
		*s = UserReadFavoriteFishBreedGold
		return nil
	case UserReadFavoriteFishBreedKoi:
		*s = UserReadFavoriteFishBreedKoi
		return nil
	case UserReadFavoriteFishBreedShark:
		*s = UserReadFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserUpdate
type UserUpdate struct {
	ID                int                            `json:"id"`
	Name              string                         `json:"name"`
	Age               int64                          `json:"age"`
	Height            OptInt64                       `json:"height"`
	FavoriteCatBreed  UserUpdateFavoriteCatBreed     `json:"favorite_cat_breed"`
	FavoriteColor     UserUpdateFavoriteColor        `json:"favorite_color"`
	FavoriteDogBreed  OptUserUpdateFavoriteDogBreed  `json:"favorite_dog_breed"`
	FavoriteFishBreed OptUserUpdateFavoriteFishBreed `json:"favorite_fish_breed"`
}

// GetID returns the value of ID.
func (s *UserUpdate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserUpdate) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *UserUpdate) GetAge() int64 {
	return s.Age
}

// GetHeight returns the value of Height.
func (s *UserUpdate) GetHeight() OptInt64 {
	return s.Height
}

// GetFavoriteCatBreed returns the value of FavoriteCatBreed.
func (s *UserUpdate) GetFavoriteCatBreed() UserUpdateFavoriteCatBreed {
	return s.FavoriteCatBreed
}

// GetFavoriteColor returns the value of FavoriteColor.
func (s *UserUpdate) GetFavoriteColor() UserUpdateFavoriteColor {
	return s.FavoriteColor
}

// GetFavoriteDogBreed returns the value of FavoriteDogBreed.
func (s *UserUpdate) GetFavoriteDogBreed() OptUserUpdateFavoriteDogBreed {
	return s.FavoriteDogBreed
}

// GetFavoriteFishBreed returns the value of FavoriteFishBreed.
func (s *UserUpdate) GetFavoriteFishBreed() OptUserUpdateFavoriteFishBreed {
	return s.FavoriteFishBreed
}

// SetID sets the value of ID.
func (s *UserUpdate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserUpdate) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *UserUpdate) SetAge(val int64) {
	s.Age = val
}

// SetHeight sets the value of Height.
func (s *UserUpdate) SetHeight(val OptInt64) {
	s.Height = val
}

// SetFavoriteCatBreed sets the value of FavoriteCatBreed.
func (s *UserUpdate) SetFavoriteCatBreed(val UserUpdateFavoriteCatBreed) {
	s.FavoriteCatBreed = val
}

// SetFavoriteColor sets the value of FavoriteColor.
func (s *UserUpdate) SetFavoriteColor(val UserUpdateFavoriteColor) {
	s.FavoriteColor = val
}

// SetFavoriteDogBreed sets the value of FavoriteDogBreed.
func (s *UserUpdate) SetFavoriteDogBreed(val OptUserUpdateFavoriteDogBreed) {
	s.FavoriteDogBreed = val
}

// SetFavoriteFishBreed sets the value of FavoriteFishBreed.
func (s *UserUpdate) SetFavoriteFishBreed(val OptUserUpdateFavoriteFishBreed) {
	s.FavoriteFishBreed = val
}

func (*UserUpdate) updateUserRes() {}

type UserUpdateFavoriteCatBreed string

const (
	UserUpdateFavoriteCatBreedSiamese UserUpdateFavoriteCatBreed = "siamese"
	UserUpdateFavoriteCatBreedBengal  UserUpdateFavoriteCatBreed = "bengal"
	UserUpdateFavoriteCatBreedLion    UserUpdateFavoriteCatBreed = "lion"
	UserUpdateFavoriteCatBreedTiger   UserUpdateFavoriteCatBreed = "tiger"
	UserUpdateFavoriteCatBreedLeopard UserUpdateFavoriteCatBreed = "leopard"
	UserUpdateFavoriteCatBreedOther   UserUpdateFavoriteCatBreed = "other"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserUpdateFavoriteCatBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserUpdateFavoriteCatBreedSiamese:
		return []byte(s), nil
	case UserUpdateFavoriteCatBreedBengal:
		return []byte(s), nil
	case UserUpdateFavoriteCatBreedLion:
		return []byte(s), nil
	case UserUpdateFavoriteCatBreedTiger:
		return []byte(s), nil
	case UserUpdateFavoriteCatBreedLeopard:
		return []byte(s), nil
	case UserUpdateFavoriteCatBreedOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserUpdateFavoriteCatBreed) UnmarshalText(data []byte) error {
	switch UserUpdateFavoriteCatBreed(data) {
	case UserUpdateFavoriteCatBreedSiamese:
		*s = UserUpdateFavoriteCatBreedSiamese
		return nil
	case UserUpdateFavoriteCatBreedBengal:
		*s = UserUpdateFavoriteCatBreedBengal
		return nil
	case UserUpdateFavoriteCatBreedLion:
		*s = UserUpdateFavoriteCatBreedLion
		return nil
	case UserUpdateFavoriteCatBreedTiger:
		*s = UserUpdateFavoriteCatBreedTiger
		return nil
	case UserUpdateFavoriteCatBreedLeopard:
		*s = UserUpdateFavoriteCatBreedLeopard
		return nil
	case UserUpdateFavoriteCatBreedOther:
		*s = UserUpdateFavoriteCatBreedOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserUpdateFavoriteColor string

const (
	UserUpdateFavoriteColorRed   UserUpdateFavoriteColor = "red"
	UserUpdateFavoriteColorGreen UserUpdateFavoriteColor = "green"
	UserUpdateFavoriteColorBlue  UserUpdateFavoriteColor = "blue"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserUpdateFavoriteColor) MarshalText() ([]byte, error) {
	switch s {
	case UserUpdateFavoriteColorRed:
		return []byte(s), nil
	case UserUpdateFavoriteColorGreen:
		return []byte(s), nil
	case UserUpdateFavoriteColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserUpdateFavoriteColor) UnmarshalText(data []byte) error {
	switch UserUpdateFavoriteColor(data) {
	case UserUpdateFavoriteColorRed:
		*s = UserUpdateFavoriteColorRed
		return nil
	case UserUpdateFavoriteColorGreen:
		*s = UserUpdateFavoriteColorGreen
		return nil
	case UserUpdateFavoriteColorBlue:
		*s = UserUpdateFavoriteColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserUpdateFavoriteDogBreed string

const (
	UserUpdateFavoriteDogBreedKuro UserUpdateFavoriteDogBreed = "Kuro"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserUpdateFavoriteDogBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserUpdateFavoriteDogBreedKuro:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserUpdateFavoriteDogBreed) UnmarshalText(data []byte) error {
	switch UserUpdateFavoriteDogBreed(data) {
	case UserUpdateFavoriteDogBreedKuro:
		*s = UserUpdateFavoriteDogBreedKuro
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserUpdateFavoriteFishBreed string

const (
	UserUpdateFavoriteFishBreedGold  UserUpdateFavoriteFishBreed = "gold"
	UserUpdateFavoriteFishBreedKoi   UserUpdateFavoriteFishBreed = "koi"
	UserUpdateFavoriteFishBreedShark UserUpdateFavoriteFishBreed = "shark"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserUpdateFavoriteFishBreed) MarshalText() ([]byte, error) {
	switch s {
	case UserUpdateFavoriteFishBreedGold:
		return []byte(s), nil
	case UserUpdateFavoriteFishBreedKoi:
		return []byte(s), nil
	case UserUpdateFavoriteFishBreedShark:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserUpdateFavoriteFishBreed) UnmarshalText(data []byte) error {
	switch UserUpdateFavoriteFishBreed(data) {
	case UserUpdateFavoriteFishBreedGold:
		*s = UserUpdateFavoriteFishBreedGold
		return nil
	case UserUpdateFavoriteFishBreedKoi:
		*s = UserUpdateFavoriteFishBreedKoi
		return nil
	case UserUpdateFavoriteFishBreedShark:
		*s = UserUpdateFavoriteFishBreedShark
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
