// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

// Ref: #/components/schemas/CategoryCreate
type CategoryCreate struct {
	ID   int    "json:\"id\""
	Name string "json:\"name\""
}

func (*CategoryCreate) createCategoryRes() {}

// Ref: #/components/schemas/CategoryList
type CategoryList struct {
	ID   int    "json:\"id\""
	Name string "json:\"name\""
}

// Ref: #/components/schemas/Category_PetsList
type CategoryPetsList struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
}

// Ref: #/components/schemas/CategoryRead
type CategoryRead struct {
	ID   int    "json:\"id\""
	Name string "json:\"name\""
}

func (*CategoryRead) readCategoryRes() {}

// Ref: #/components/schemas/CategoryUpdate
type CategoryUpdate struct {
	ID   int    "json:\"id\""
	Name string "json:\"name\""
}

func (*CategoryUpdate) updateCategoryRes() {}

type CreateCategoryReq struct {
	Name string "json:\"name\""
	Pets []int  "json:\"pets\""
}

type CreatePetReq struct {
	Name       string      "json:\"name\""
	Weight     OptInt      "json:\"weight\""
	Birthday   OptDateTime "json:\"birthday\""
	Categories []int       "json:\"categories\""
	Owner      int         "json:\"owner\""
	Friends    []int       "json:\"friends\""
}

type CreateUserReq struct {
	Name       string                 "json:\"name\""
	Age        int                    "json:\"age\""
	Sex        CreateUserReqSex       "json:\"sex\""
	Gender     OptCreateUserReqGender "json:\"gender\""
	Pets       []int                  "json:\"pets\""
	BestFriend OptInt                 "json:\"best_friend\""
}

type CreateUserReqGender string

const (
	CreateUserReqGenderMale    CreateUserReqGender = "male"
	CreateUserReqGenderFemale  CreateUserReqGender = "female"
	CreateUserReqGenderDiverse CreateUserReqGender = "diverse"
)

type CreateUserReqSex string

const (
	CreateUserReqSexMale   CreateUserReqSex = "male"
	CreateUserReqSexFemale CreateUserReqSex = "female"
)

// DeleteCategoryNoContent is response for DeleteCategory operation.
type DeleteCategoryNoContent struct{}

func (*DeleteCategoryNoContent) deleteCategoryRes() {}

// DeletePetNoContent is response for DeletePet operation.
type DeletePetNoContent struct{}

func (*DeletePetNoContent) deletePetRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

type ListCategoryOKApplicationJSON []CategoryList

func (ListCategoryOKApplicationJSON) listCategoryRes() {}

type ListCategoryPetsOKApplicationJSON []CategoryPetsList

func (ListCategoryPetsOKApplicationJSON) listCategoryPetsRes() {}

type ListPetCategoriesOKApplicationJSON []PetCategoriesList

func (ListPetCategoriesOKApplicationJSON) listPetCategoriesRes() {}

type ListPetFriendsOKApplicationJSON []PetFriendsList

func (ListPetFriendsOKApplicationJSON) listPetFriendsRes() {}

type ListPetOKApplicationJSON []PetList

func (ListPetOKApplicationJSON) listPetRes() {}

type ListUserOKApplicationJSON []UserList

func (ListUserOKApplicationJSON) listUserRes() {}

type ListUserPetsOKApplicationJSON []UserPetsList

func (ListUserPetsOKApplicationJSON) listUserPetsRes() {}

// NewOptCreateUserReqGender returns new OptCreateUserReqGender with value set to v.
func NewOptCreateUserReqGender(v CreateUserReqGender) OptCreateUserReqGender {
	return OptCreateUserReqGender{
		Value: v,
		Set:   true,
	}
}

// OptCreateUserReqGender is optional CreateUserReqGender.
type OptCreateUserReqGender struct {
	Value CreateUserReqGender
	Set   bool
}

// IsSet returns true if OptCreateUserReqGender was set.
func (o OptCreateUserReqGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateUserReqGender) Reset() {
	var v CreateUserReqGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateUserReqGender) SetTo(v CreateUserReqGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateUserReqGender) Get() (v CreateUserReqGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateUserReqGender) Or(d CreateUserReqGender) CreateUserReqGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetCreateOwnerGender returns new OptPetCreateOwnerGender with value set to v.
func NewOptPetCreateOwnerGender(v PetCreateOwnerGender) OptPetCreateOwnerGender {
	return OptPetCreateOwnerGender{
		Value: v,
		Set:   true,
	}
}

// OptPetCreateOwnerGender is optional PetCreateOwnerGender.
type OptPetCreateOwnerGender struct {
	Value PetCreateOwnerGender
	Set   bool
}

// IsSet returns true if OptPetCreateOwnerGender was set.
func (o OptPetCreateOwnerGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetCreateOwnerGender) Reset() {
	var v PetCreateOwnerGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetCreateOwnerGender) SetTo(v PetCreateOwnerGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetCreateOwnerGender) Get() (v PetCreateOwnerGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetCreateOwnerGender) Or(d PetCreateOwnerGender) PetCreateOwnerGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetOwnerReadGender returns new OptPetOwnerReadGender with value set to v.
func NewOptPetOwnerReadGender(v PetOwnerReadGender) OptPetOwnerReadGender {
	return OptPetOwnerReadGender{
		Value: v,
		Set:   true,
	}
}

// OptPetOwnerReadGender is optional PetOwnerReadGender.
type OptPetOwnerReadGender struct {
	Value PetOwnerReadGender
	Set   bool
}

// IsSet returns true if OptPetOwnerReadGender was set.
func (o OptPetOwnerReadGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetOwnerReadGender) Reset() {
	var v PetOwnerReadGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetOwnerReadGender) SetTo(v PetOwnerReadGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetOwnerReadGender) Get() (v PetOwnerReadGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetOwnerReadGender) Or(d PetOwnerReadGender) PetOwnerReadGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReqGender returns new OptUpdateUserReqGender with value set to v.
func NewOptUpdateUserReqGender(v UpdateUserReqGender) OptUpdateUserReqGender {
	return OptUpdateUserReqGender{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReqGender is optional UpdateUserReqGender.
type OptUpdateUserReqGender struct {
	Value UpdateUserReqGender
	Set   bool
}

// IsSet returns true if OptUpdateUserReqGender was set.
func (o OptUpdateUserReqGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReqGender) Reset() {
	var v UpdateUserReqGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReqGender) SetTo(v UpdateUserReqGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReqGender) Get() (v UpdateUserReqGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReqGender) Or(d UpdateUserReqGender) UpdateUserReqGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReqSex returns new OptUpdateUserReqSex with value set to v.
func NewOptUpdateUserReqSex(v UpdateUserReqSex) OptUpdateUserReqSex {
	return OptUpdateUserReqSex{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReqSex is optional UpdateUserReqSex.
type OptUpdateUserReqSex struct {
	Value UpdateUserReqSex
	Set   bool
}

// IsSet returns true if OptUpdateUserReqSex was set.
func (o OptUpdateUserReqSex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReqSex) Reset() {
	var v UpdateUserReqSex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReqSex) SetTo(v UpdateUserReqSex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReqSex) Get() (v UpdateUserReqSex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReqSex) Or(d UpdateUserReqSex) UpdateUserReqSex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBestFriendReadGender returns new OptUserBestFriendReadGender with value set to v.
func NewOptUserBestFriendReadGender(v UserBestFriendReadGender) OptUserBestFriendReadGender {
	return OptUserBestFriendReadGender{
		Value: v,
		Set:   true,
	}
}

// OptUserBestFriendReadGender is optional UserBestFriendReadGender.
type OptUserBestFriendReadGender struct {
	Value UserBestFriendReadGender
	Set   bool
}

// IsSet returns true if OptUserBestFriendReadGender was set.
func (o OptUserBestFriendReadGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBestFriendReadGender) Reset() {
	var v UserBestFriendReadGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBestFriendReadGender) SetTo(v UserBestFriendReadGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBestFriendReadGender) Get() (v UserBestFriendReadGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBestFriendReadGender) Or(d UserBestFriendReadGender) UserBestFriendReadGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCreateGender returns new OptUserCreateGender with value set to v.
func NewOptUserCreateGender(v UserCreateGender) OptUserCreateGender {
	return OptUserCreateGender{
		Value: v,
		Set:   true,
	}
}

// OptUserCreateGender is optional UserCreateGender.
type OptUserCreateGender struct {
	Value UserCreateGender
	Set   bool
}

// IsSet returns true if OptUserCreateGender was set.
func (o OptUserCreateGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCreateGender) Reset() {
	var v UserCreateGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCreateGender) SetTo(v UserCreateGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCreateGender) Get() (v UserCreateGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCreateGender) Or(d UserCreateGender) UserCreateGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserListGender returns new OptUserListGender with value set to v.
func NewOptUserListGender(v UserListGender) OptUserListGender {
	return OptUserListGender{
		Value: v,
		Set:   true,
	}
}

// OptUserListGender is optional UserListGender.
type OptUserListGender struct {
	Value UserListGender
	Set   bool
}

// IsSet returns true if OptUserListGender was set.
func (o OptUserListGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserListGender) Reset() {
	var v UserListGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserListGender) SetTo(v UserListGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserListGender) Get() (v UserListGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserListGender) Or(d UserListGender) UserListGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserReadGender returns new OptUserReadGender with value set to v.
func NewOptUserReadGender(v UserReadGender) OptUserReadGender {
	return OptUserReadGender{
		Value: v,
		Set:   true,
	}
}

// OptUserReadGender is optional UserReadGender.
type OptUserReadGender struct {
	Value UserReadGender
	Set   bool
}

// IsSet returns true if OptUserReadGender was set.
func (o OptUserReadGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserReadGender) Reset() {
	var v UserReadGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserReadGender) SetTo(v UserReadGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserReadGender) Get() (v UserReadGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserReadGender) Or(d UserReadGender) UserReadGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserUpdateGender returns new OptUserUpdateGender with value set to v.
func NewOptUserUpdateGender(v UserUpdateGender) OptUserUpdateGender {
	return OptUserUpdateGender{
		Value: v,
		Set:   true,
	}
}

// OptUserUpdateGender is optional UserUpdateGender.
type OptUserUpdateGender struct {
	Value UserUpdateGender
	Set   bool
}

// IsSet returns true if OptUserUpdateGender was set.
func (o OptUserUpdateGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserUpdateGender) Reset() {
	var v UserUpdateGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserUpdateGender) SetTo(v UserUpdateGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserUpdateGender) Get() (v UserUpdateGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserUpdateGender) Or(d UserUpdateGender) UserUpdateGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Pet_CategoriesList
type PetCategoriesList struct {
	ID   int    "json:\"id\""
	Name string "json:\"name\""
}

// Ref: #/components/schemas/PetCreate
type PetCreate struct {
	ID         int                   "json:\"id\""
	Name       string                "json:\"name\""
	Weight     OptInt                "json:\"weight\""
	Birthday   OptDateTime           "json:\"birthday\""
	Categories []PetCreateCategories "json:\"categories\""
	Owner      PetCreateOwner        "json:\"owner\""
}

func (*PetCreate) createPetRes() {}

// Ref: #/components/schemas/PetCreate_Categories
type PetCreateCategories struct {
	ID   int    "json:\"id\""
	Name string "json:\"name\""
}

// Ref: #/components/schemas/PetCreate_Owner
type PetCreateOwner struct {
	ID     int                     "json:\"id\""
	Name   string                  "json:\"name\""
	Age    int                     "json:\"age\""
	Sex    PetCreateOwnerSex       "json:\"sex\""
	Gender OptPetCreateOwnerGender "json:\"gender\""
}

type PetCreateOwnerGender string

const (
	PetCreateOwnerGenderMale    PetCreateOwnerGender = "male"
	PetCreateOwnerGenderFemale  PetCreateOwnerGender = "female"
	PetCreateOwnerGenderDiverse PetCreateOwnerGender = "diverse"
)

type PetCreateOwnerSex string

const (
	PetCreateOwnerSexMale   PetCreateOwnerSex = "male"
	PetCreateOwnerSexFemale PetCreateOwnerSex = "female"
)

// Ref: #/components/schemas/Pet_FriendsList
type PetFriendsList struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
}

// Ref: #/components/schemas/PetList
type PetList struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
}

// Ref: #/components/schemas/Pet_OwnerRead
type PetOwnerRead struct {
	ID     int                   "json:\"id\""
	Name   string                "json:\"name\""
	Age    int                   "json:\"age\""
	Sex    PetOwnerReadSex       "json:\"sex\""
	Gender OptPetOwnerReadGender "json:\"gender\""
}

func (*PetOwnerRead) readPetOwnerRes() {}

type PetOwnerReadGender string

const (
	PetOwnerReadGenderMale    PetOwnerReadGender = "male"
	PetOwnerReadGenderFemale  PetOwnerReadGender = "female"
	PetOwnerReadGenderDiverse PetOwnerReadGender = "diverse"
)

type PetOwnerReadSex string

const (
	PetOwnerReadSexMale   PetOwnerReadSex = "male"
	PetOwnerReadSexFemale PetOwnerReadSex = "female"
)

// Ref: #/components/schemas/PetRead
type PetRead struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
}

func (*PetRead) readPetRes() {}

// Ref: #/components/schemas/PetUpdate
type PetUpdate struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
}

func (*PetUpdate) updatePetRes() {}

type R400 struct {
	Code   int    "json:\"code\""
	Status string "json:\"status\""
	Errors jx.Raw "json:\"errors\""
}

func (*R400) createCategoryRes()     {}
func (*R400) createPetRes()          {}
func (*R400) createUserRes()         {}
func (*R400) deleteCategoryRes()     {}
func (*R400) deletePetRes()          {}
func (*R400) deleteUserRes()         {}
func (*R400) listCategoryPetsRes()   {}
func (*R400) listCategoryRes()       {}
func (*R400) listPetCategoriesRes()  {}
func (*R400) listPetFriendsRes()     {}
func (*R400) listPetRes()            {}
func (*R400) listUserPetsRes()       {}
func (*R400) listUserRes()           {}
func (*R400) readCategoryRes()       {}
func (*R400) readPetOwnerRes()       {}
func (*R400) readPetRes()            {}
func (*R400) readUserBestFriendRes() {}
func (*R400) readUserRes()           {}
func (*R400) updateCategoryRes()     {}
func (*R400) updatePetRes()          {}
func (*R400) updateUserRes()         {}

type R404 struct {
	Code   int    "json:\"code\""
	Status string "json:\"status\""
	Errors jx.Raw "json:\"errors\""
}

func (*R404) deleteCategoryRes()     {}
func (*R404) deletePetRes()          {}
func (*R404) deleteUserRes()         {}
func (*R404) listCategoryPetsRes()   {}
func (*R404) listCategoryRes()       {}
func (*R404) listPetCategoriesRes()  {}
func (*R404) listPetFriendsRes()     {}
func (*R404) listPetRes()            {}
func (*R404) listUserPetsRes()       {}
func (*R404) listUserRes()           {}
func (*R404) readCategoryRes()       {}
func (*R404) readPetOwnerRes()       {}
func (*R404) readPetRes()            {}
func (*R404) readUserBestFriendRes() {}
func (*R404) readUserRes()           {}
func (*R404) updateCategoryRes()     {}
func (*R404) updatePetRes()          {}
func (*R404) updateUserRes()         {}

type R409 struct {
	Code   int    "json:\"code\""
	Status string "json:\"status\""
	Errors jx.Raw "json:\"errors\""
}

func (*R409) createCategoryRes()     {}
func (*R409) createPetRes()          {}
func (*R409) createUserRes()         {}
func (*R409) deleteCategoryRes()     {}
func (*R409) deletePetRes()          {}
func (*R409) deleteUserRes()         {}
func (*R409) listCategoryPetsRes()   {}
func (*R409) listCategoryRes()       {}
func (*R409) listPetCategoriesRes()  {}
func (*R409) listPetFriendsRes()     {}
func (*R409) listPetRes()            {}
func (*R409) listUserPetsRes()       {}
func (*R409) listUserRes()           {}
func (*R409) readCategoryRes()       {}
func (*R409) readPetOwnerRes()       {}
func (*R409) readPetRes()            {}
func (*R409) readUserBestFriendRes() {}
func (*R409) readUserRes()           {}
func (*R409) updateCategoryRes()     {}
func (*R409) updatePetRes()          {}
func (*R409) updateUserRes()         {}

type R500 struct {
	Code   int    "json:\"code\""
	Status string "json:\"status\""
	Errors jx.Raw "json:\"errors\""
}

func (*R500) createCategoryRes()     {}
func (*R500) createPetRes()          {}
func (*R500) createUserRes()         {}
func (*R500) deleteCategoryRes()     {}
func (*R500) deletePetRes()          {}
func (*R500) deleteUserRes()         {}
func (*R500) listCategoryPetsRes()   {}
func (*R500) listCategoryRes()       {}
func (*R500) listPetCategoriesRes()  {}
func (*R500) listPetFriendsRes()     {}
func (*R500) listPetRes()            {}
func (*R500) listUserPetsRes()       {}
func (*R500) listUserRes()           {}
func (*R500) readCategoryRes()       {}
func (*R500) readPetOwnerRes()       {}
func (*R500) readPetRes()            {}
func (*R500) readUserBestFriendRes() {}
func (*R500) readUserRes()           {}
func (*R500) updateCategoryRes()     {}
func (*R500) updatePetRes()          {}
func (*R500) updateUserRes()         {}

type UpdateCategoryReq struct {
	Name OptString "json:\"name\""
	Pets []int     "json:\"pets\""
}

type UpdatePetReq struct {
	Name       OptString   "json:\"name\""
	Weight     OptInt      "json:\"weight\""
	Birthday   OptDateTime "json:\"birthday\""
	Categories []int       "json:\"categories\""
	Owner      OptInt      "json:\"owner\""
	Friends    []int       "json:\"friends\""
}

type UpdateUserReq struct {
	Name       OptString              "json:\"name\""
	Age        OptInt                 "json:\"age\""
	Sex        OptUpdateUserReqSex    "json:\"sex\""
	Gender     OptUpdateUserReqGender "json:\"gender\""
	Pets       []int                  "json:\"pets\""
	BestFriend OptInt                 "json:\"best_friend\""
}

type UpdateUserReqGender string

const (
	UpdateUserReqGenderMale    UpdateUserReqGender = "male"
	UpdateUserReqGenderFemale  UpdateUserReqGender = "female"
	UpdateUserReqGenderDiverse UpdateUserReqGender = "diverse"
)

type UpdateUserReqSex string

const (
	UpdateUserReqSexMale   UpdateUserReqSex = "male"
	UpdateUserReqSexFemale UpdateUserReqSex = "female"
)

// Ref: #/components/schemas/User_BestFriendRead
type UserBestFriendRead struct {
	ID     int                         "json:\"id\""
	Name   string                      "json:\"name\""
	Age    int                         "json:\"age\""
	Sex    UserBestFriendReadSex       "json:\"sex\""
	Gender OptUserBestFriendReadGender "json:\"gender\""
}

func (*UserBestFriendRead) readUserBestFriendRes() {}

type UserBestFriendReadGender string

const (
	UserBestFriendReadGenderMale    UserBestFriendReadGender = "male"
	UserBestFriendReadGenderFemale  UserBestFriendReadGender = "female"
	UserBestFriendReadGenderDiverse UserBestFriendReadGender = "diverse"
)

type UserBestFriendReadSex string

const (
	UserBestFriendReadSexMale   UserBestFriendReadSex = "male"
	UserBestFriendReadSexFemale UserBestFriendReadSex = "female"
)

// Ref: #/components/schemas/UserCreate
type UserCreate struct {
	ID     int                 "json:\"id\""
	Name   string              "json:\"name\""
	Age    int                 "json:\"age\""
	Sex    UserCreateSex       "json:\"sex\""
	Gender OptUserCreateGender "json:\"gender\""
}

func (*UserCreate) createUserRes() {}

type UserCreateGender string

const (
	UserCreateGenderMale    UserCreateGender = "male"
	UserCreateGenderFemale  UserCreateGender = "female"
	UserCreateGenderDiverse UserCreateGender = "diverse"
)

type UserCreateSex string

const (
	UserCreateSexMale   UserCreateSex = "male"
	UserCreateSexFemale UserCreateSex = "female"
)

// Ref: #/components/schemas/UserList
type UserList struct {
	ID     int               "json:\"id\""
	Name   string            "json:\"name\""
	Age    int               "json:\"age\""
	Sex    UserListSex       "json:\"sex\""
	Gender OptUserListGender "json:\"gender\""
}

type UserListGender string

const (
	UserListGenderMale    UserListGender = "male"
	UserListGenderFemale  UserListGender = "female"
	UserListGenderDiverse UserListGender = "diverse"
)

type UserListSex string

const (
	UserListSexMale   UserListSex = "male"
	UserListSexFemale UserListSex = "female"
)

// Ref: #/components/schemas/User_PetsList
type UserPetsList struct {
	ID       int         "json:\"id\""
	Name     string      "json:\"name\""
	Weight   OptInt      "json:\"weight\""
	Birthday OptDateTime "json:\"birthday\""
}

// Ref: #/components/schemas/UserRead
type UserRead struct {
	ID     int               "json:\"id\""
	Name   string            "json:\"name\""
	Age    int               "json:\"age\""
	Sex    UserReadSex       "json:\"sex\""
	Gender OptUserReadGender "json:\"gender\""
}

func (*UserRead) readUserRes() {}

type UserReadGender string

const (
	UserReadGenderMale    UserReadGender = "male"
	UserReadGenderFemale  UserReadGender = "female"
	UserReadGenderDiverse UserReadGender = "diverse"
)

type UserReadSex string

const (
	UserReadSexMale   UserReadSex = "male"
	UserReadSexFemale UserReadSex = "female"
)

// Ref: #/components/schemas/UserUpdate
type UserUpdate struct {
	ID     int                 "json:\"id\""
	Name   string              "json:\"name\""
	Age    int                 "json:\"age\""
	Sex    UserUpdateSex       "json:\"sex\""
	Gender OptUserUpdateGender "json:\"gender\""
}

func (*UserUpdate) updateUserRes() {}

type UserUpdateGender string

const (
	UserUpdateGenderMale    UserUpdateGender = "male"
	UserUpdateGenderFemale  UserUpdateGender = "female"
	UserUpdateGenderDiverse UserUpdateGender = "diverse"
)

type UserUpdateSex string

const (
	UserUpdateSexMale   UserUpdateSex = "male"
	UserUpdateSexFemale UserUpdateSex = "female"
)
