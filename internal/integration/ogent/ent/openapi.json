{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/all-types": {
      "get": {
        "tags": [
          "AllTypes"
        ],
        "summary": "List AllTypes",
        "description": "List AllTypes.",
        "operationId": "listAllTypes",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result AllTypes list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllTypesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "AllTypes"
        ],
        "summary": "Create a new AllTypes",
        "description": "Creates a new AllTypes and persists it to storage.",
        "operationId": "createAllTypes",
        "requestBody": {
          "description": "AllTypes to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "int": {
                    "type": "integer"
                  },
                  "int8": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 127,
                    "minimum": -128
                  },
                  "int16": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 32767,
                    "minimum": -32768
                  },
                  "int32": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "int64": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "uint": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4294967295,
                    "minimum": 0
                  },
                  "uint8": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 255,
                    "minimum": 0
                  },
                  "uint16": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 65535,
                    "minimum": 0
                  },
                  "uint32": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4294967295,
                    "minimum": 0
                  },
                  "uint64": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "float32": {
                    "type": "number",
                    "format": "float"
                  },
                  "float64": {
                    "type": "number",
                    "format": "double"
                  },
                  "string_type": {
                    "type": "string"
                  },
                  "bool": {
                    "type": "boolean"
                  },
                  "uuid": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "text": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "on",
                      "off"
                    ]
                  },
                  "bytes": {
                    "type": "string",
                    "format": "byte"
                  },
                  "nilable": {
                    "type": "string"
                  }
                },
                "required": [
                  "int",
                  "int8",
                  "int16",
                  "int32",
                  "int64",
                  "uint",
                  "uint8",
                  "uint16",
                  "uint32",
                  "uint64",
                  "float32",
                  "float64",
                  "string_type",
                  "bool",
                  "uuid",
                  "time",
                  "text",
                  "state",
                  "bytes",
                  "nilable"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "AllTypes created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllTypesCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/all-types/{id}": {
      "get": {
        "tags": [
          "AllTypes"
        ],
        "summary": "Find a AllTypes by ID",
        "description": "Finds the AllTypes with the requested ID and returns it.",
        "operationId": "readAllTypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AllTypes",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 4294967295,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AllTypes with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllTypesRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "AllTypes"
        ],
        "summary": "Deletes a AllTypes by ID",
        "description": "Deletes the AllTypes with the requested ID.",
        "operationId": "deleteAllTypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AllTypes",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 4294967295,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "AllTypes with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "AllTypes"
        ],
        "summary": "Updates a AllTypes",
        "description": "Updates a AllTypes and persists changes to storage.",
        "operationId": "updateAllTypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AllTypes",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 4294967295,
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "AllTypes properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "int": {
                    "type": "integer"
                  },
                  "int8": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 127,
                    "minimum": -128
                  },
                  "int16": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 32767,
                    "minimum": -32768
                  },
                  "int32": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "int64": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "uint": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4294967295,
                    "minimum": 0
                  },
                  "uint8": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 255,
                    "minimum": 0
                  },
                  "uint16": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 65535,
                    "minimum": 0
                  },
                  "uint32": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4294967295,
                    "minimum": 0
                  },
                  "uint64": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "float32": {
                    "type": "number",
                    "format": "float"
                  },
                  "float64": {
                    "type": "number",
                    "format": "double"
                  },
                  "string_type": {
                    "type": "string"
                  },
                  "bool": {
                    "type": "boolean"
                  },
                  "uuid": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "text": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "on",
                      "off"
                    ]
                  },
                  "bytes": {
                    "type": "string",
                    "format": "byte"
                  },
                  "nilable": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "AllTypes updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllTypesUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "List Categories",
        "description": "List Categories.",
        "operationId": "listCategory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Category list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Create a new Category",
        "description": "Creates a new Category and persists it to storage.",
        "operationId": "createCategory",
        "requestBody": {
          "description": "Category to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "pets": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Category created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Find a Category by ID",
        "description": "Finds the Category with the requested ID and returns it.",
        "operationId": "readCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Deletes a Category by ID",
        "description": "Deletes the Category with the requested ID.",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Category"
        ],
        "summary": "Updates a Category",
        "description": "Updates a Category and persists changes to storage.",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Category properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "pets": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Category updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories/{id}/pets": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "List attached Pets",
        "description": "List attached Pets.",
        "operationId": "listCategoryPets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Category",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Categories list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category_PetsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hats": {
      "get": {
        "tags": [
          "Hat"
        ],
        "summary": "List Hats",
        "description": "List Hats.",
        "operationId": "listHat",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Hat list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HatList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Hat"
        ],
        "summary": "Create a new Hat",
        "description": "Creates a new Hat and persists it to storage.",
        "operationId": "createHat",
        "requestBody": {
          "description": "Hat to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "dad",
                      "trucker",
                      "snapback"
                    ]
                  },
                  "wearer": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Hat created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HatCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hats/{id}": {
      "get": {
        "tags": [
          "Hat"
        ],
        "summary": "Find a Hat by ID",
        "description": "Finds the Hat with the requested ID and returns it.",
        "operationId": "readHat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hat",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hat with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HatRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Hat"
        ],
        "summary": "Deletes a Hat by ID",
        "description": "Deletes the Hat with the requested ID.",
        "operationId": "deleteHat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hat",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Hat with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Hat"
        ],
        "summary": "Updates a Hat",
        "description": "Updates a Hat and persists changes to storage.",
        "operationId": "updateHat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hat",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Hat properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "wearer": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Hat updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HatUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hats/{id}/wearer": {
      "get": {
        "tags": [
          "Hat"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Hat with the given ID",
        "operationId": "readHatWearer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hat",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Hat with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hat_WearerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets": {
      "get": {
        "tags": [
          "Pet"
        ],
        "summary": "List Pets",
        "description": "List Pets.",
        "operationId": "listPet",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Pet list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PetList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Pet"
        ],
        "summary": "Create a new Pet",
        "description": "Creates a new Pet and persists it to storage.",
        "operationId": "createPet",
        "requestBody": {
          "description": "Pet to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "weight": {
                    "type": "integer"
                  },
                  "birthday": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "tag_id": {
                    "type": "string",
                    "format": "byte"
                  },
                  "height": {
                    "type": "integer"
                  },
                  "categories": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "owner": {
                    "type": "integer"
                  },
                  "rescuer": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "friends": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "name",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pet created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets/{id}": {
      "get": {
        "tags": [
          "Pet"
        ],
        "summary": "Find a Pet by ID",
        "description": "Finds the Pet with the requested ID and returns it.",
        "operationId": "readPet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Pet"
        ],
        "summary": "Deletes a Pet by ID",
        "description": "Deletes the Pet with the requested ID.",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pet with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Pet"
        ],
        "summary": "Updates a Pet",
        "description": "Updates a Pet and persists changes to storage.",
        "operationId": "updatePet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Pet properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "weight": {
                    "type": "integer"
                  },
                  "birthday": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "tag_id": {
                    "type": "string",
                    "format": "byte"
                  },
                  "height": {
                    "type": "integer"
                  },
                  "categories": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "owner": {
                    "type": "integer"
                  },
                  "rescuer": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "friends": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pet updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets/{id}/categories": {
      "get": {
        "tags": [
          "Pet"
        ],
        "summary": "List attached Categories",
        "description": "List attached Categories.",
        "operationId": "listPetCategories",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Pets list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet_CategoriesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets/{id}/friends": {
      "get": {
        "tags": [
          "Pet"
        ],
        "summary": "List attached Friends",
        "description": "List attached Friends.",
        "operationId": "listPetFriends",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Pets list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet_FriendsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets/{id}/owner": {
      "get": {
        "tags": [
          "Pet"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Pet with the given ID",
        "operationId": "readPetOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Pet with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pets/{id}/rescuer": {
      "get": {
        "tags": [
          "Pet"
        ],
        "summary": "List attached Rescuers",
        "description": "List attached Rescuers.",
        "operationId": "listPetRescuer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Pet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Pets list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet_RescuerList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "age": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4294967295,
                    "minimum": 0
                  },
                  "height": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4294967295,
                    "minimum": 0
                  },
                  "favorite_cat_breed": {
                    "type": "string",
                    "enum": [
                      "siamese",
                      "bengal",
                      "lion",
                      "tiger",
                      "leopard",
                      "other"
                    ]
                  },
                  "favorite_color": {
                    "type": "string",
                    "enum": [
                      "red",
                      "green",
                      "blue"
                    ],
                    "default": "red"
                  },
                  "favorite_dog_breed": {
                    "type": "string",
                    "enum": [
                      "Kuro"
                    ]
                  },
                  "favorite_fish_breed": {
                    "type": "string",
                    "enum": [
                      "gold",
                      "koi",
                      "shark"
                    ]
                  },
                  "pets": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "animals_saved": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "best_friend": {
                    "type": "integer"
                  },
                  "favorite_hat": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "age",
                  "favorite_cat_breed",
                  "favorite_color"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "age": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4294967295,
                    "minimum": 0
                  },
                  "height": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4294967295,
                    "minimum": 0
                  },
                  "favorite_cat_breed": {
                    "type": "string",
                    "enum": [
                      "siamese",
                      "bengal",
                      "lion",
                      "tiger",
                      "leopard",
                      "other"
                    ]
                  },
                  "favorite_dog_breed": {
                    "type": "string",
                    "enum": [
                      "Kuro"
                    ]
                  },
                  "favorite_fish_breed": {
                    "type": "string",
                    "enum": [
                      "gold",
                      "koi",
                      "shark"
                    ]
                  },
                  "pets": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "animals_saved": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "best_friend": {
                    "type": "integer"
                  },
                  "favorite_hat": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/animals-saved": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached AnimalsSaveds",
        "description": "List attached AnimalsSaveds.",
        "operationId": "listUserAnimalsSaved",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_AnimalsSavedList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/best-friend": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the User with the given ID",
        "operationId": "readUserBestFriend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_BestFriendRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/favorite-hat": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find the attached Hat",
        "description": "Find the attached Hat of the User with the given ID",
        "operationId": "readUserFavoriteHat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hat attached to User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_FavoriteHatRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/pets": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Pets",
        "description": "List attached Pets.",
        "operationId": "listUserPets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_PetsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AllTypes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "int": {
            "type": "integer"
          },
          "int8": {
            "type": "integer",
            "format": "int32",
            "maximum": 127,
            "minimum": -128
          },
          "int16": {
            "type": "integer",
            "format": "int32",
            "maximum": 32767,
            "minimum": -32768
          },
          "int32": {
            "type": "integer",
            "format": "int32"
          },
          "int64": {
            "type": "integer",
            "format": "int64"
          },
          "uint": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint8": {
            "type": "integer",
            "format": "int32",
            "maximum": 255,
            "minimum": 0
          },
          "uint16": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "uint32": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint64": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "float32": {
            "type": "number",
            "format": "float"
          },
          "float64": {
            "type": "number",
            "format": "double"
          },
          "string_type": {
            "type": "string"
          },
          "bool": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "on",
              "off"
            ]
          },
          "bytes": {
            "type": "string",
            "format": "byte"
          },
          "nilable": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "int",
          "int8",
          "int16",
          "int32",
          "int64",
          "uint",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "float32",
          "float64",
          "string_type",
          "bool",
          "uuid",
          "time",
          "text",
          "state",
          "bytes"
        ]
      },
      "AllTypesCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "int": {
            "type": "integer"
          },
          "int8": {
            "type": "integer",
            "format": "int32",
            "maximum": 127,
            "minimum": -128
          },
          "int16": {
            "type": "integer",
            "format": "int32",
            "maximum": 32767,
            "minimum": -32768
          },
          "int32": {
            "type": "integer",
            "format": "int32"
          },
          "int64": {
            "type": "integer",
            "format": "int64"
          },
          "uint": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint8": {
            "type": "integer",
            "format": "int32",
            "maximum": 255,
            "minimum": 0
          },
          "uint16": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "uint32": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint64": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "float32": {
            "type": "number",
            "format": "float"
          },
          "float64": {
            "type": "number",
            "format": "double"
          },
          "string_type": {
            "type": "string"
          },
          "bool": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "on",
              "off"
            ]
          },
          "bytes": {
            "type": "string",
            "format": "byte"
          },
          "nilable": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "int",
          "int8",
          "int16",
          "int32",
          "int64",
          "uint",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "float32",
          "float64",
          "string_type",
          "bool",
          "uuid",
          "time",
          "text",
          "state",
          "bytes"
        ]
      },
      "AllTypesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "int": {
            "type": "integer"
          },
          "int8": {
            "type": "integer",
            "format": "int32",
            "maximum": 127,
            "minimum": -128
          },
          "int16": {
            "type": "integer",
            "format": "int32",
            "maximum": 32767,
            "minimum": -32768
          },
          "int32": {
            "type": "integer",
            "format": "int32"
          },
          "int64": {
            "type": "integer",
            "format": "int64"
          },
          "uint": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint8": {
            "type": "integer",
            "format": "int32",
            "maximum": 255,
            "minimum": 0
          },
          "uint16": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "uint32": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint64": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "float32": {
            "type": "number",
            "format": "float"
          },
          "float64": {
            "type": "number",
            "format": "double"
          },
          "string_type": {
            "type": "string"
          },
          "bool": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "on",
              "off"
            ]
          },
          "bytes": {
            "type": "string",
            "format": "byte"
          },
          "nilable": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "int",
          "int8",
          "int16",
          "int32",
          "int64",
          "uint",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "float32",
          "float64",
          "string_type",
          "bool",
          "uuid",
          "time",
          "text",
          "state",
          "bytes"
        ]
      },
      "AllTypesRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "int": {
            "type": "integer"
          },
          "int8": {
            "type": "integer",
            "format": "int32",
            "maximum": 127,
            "minimum": -128
          },
          "int16": {
            "type": "integer",
            "format": "int32",
            "maximum": 32767,
            "minimum": -32768
          },
          "int32": {
            "type": "integer",
            "format": "int32"
          },
          "int64": {
            "type": "integer",
            "format": "int64"
          },
          "uint": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint8": {
            "type": "integer",
            "format": "int32",
            "maximum": 255,
            "minimum": 0
          },
          "uint16": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "uint32": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint64": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "float32": {
            "type": "number",
            "format": "float"
          },
          "float64": {
            "type": "number",
            "format": "double"
          },
          "string_type": {
            "type": "string"
          },
          "bool": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "on",
              "off"
            ]
          },
          "bytes": {
            "type": "string",
            "format": "byte"
          },
          "nilable": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "int",
          "int8",
          "int16",
          "int32",
          "int64",
          "uint",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "float32",
          "float64",
          "string_type",
          "bool",
          "uuid",
          "time",
          "text",
          "state",
          "bytes"
        ]
      },
      "AllTypesUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "int": {
            "type": "integer"
          },
          "int8": {
            "type": "integer",
            "format": "int32",
            "maximum": 127,
            "minimum": -128
          },
          "int16": {
            "type": "integer",
            "format": "int32",
            "maximum": 32767,
            "minimum": -32768
          },
          "int32": {
            "type": "integer",
            "format": "int32"
          },
          "int64": {
            "type": "integer",
            "format": "int64"
          },
          "uint": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint8": {
            "type": "integer",
            "format": "int32",
            "maximum": 255,
            "minimum": 0
          },
          "uint16": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "uint32": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "uint64": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "float32": {
            "type": "number",
            "format": "float"
          },
          "float64": {
            "type": "number",
            "format": "double"
          },
          "string_type": {
            "type": "string"
          },
          "bool": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "on",
              "off"
            ]
          },
          "bytes": {
            "type": "string",
            "format": "byte"
          },
          "nilable": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "int",
          "int8",
          "int16",
          "int32",
          "int64",
          "uint",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "float32",
          "float64",
          "string_type",
          "bool",
          "uuid",
          "time",
          "text",
          "state",
          "bytes"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "readonly": {
            "type": "string"
          },
          "pets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CategoryCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "readonly": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CategoryList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "readonly": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CategoryRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "readonly": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CategoryUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "readonly": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Category_PetsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Hat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dad",
              "trucker",
              "snapback"
            ]
          },
          "wearer": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "HatCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dad",
              "trucker",
              "snapback"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "HatList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dad",
              "trucker",
              "snapback"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "HatRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dad",
              "trucker",
              "snapback"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "HatUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dad",
              "trucker",
              "snapback"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "Hat_WearerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "Pet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "rescuer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ]
      },
      "PetCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PetCreate_Categories"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/PetCreate_Owner"
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ]
      },
      "PetCreate_Categories": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "readonly": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "PetCreate_Owner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "PetList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "PetRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "PetUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Pet_CategoriesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "readonly": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Pet_FriendsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Pet_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "Pet_RescuerList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          },
          "pets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "animals_saved": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "best_friend": {
            "$ref": "#/components/schemas/User"
          },
          "favorite_hat": {
            "$ref": "#/components/schemas/Hat"
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "User_AnimalsSavedList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "User_BestFriendRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "maximum": 4294967295,
            "minimum": 0
          },
          "favorite_cat_breed": {
            "type": "string",
            "enum": [
              "siamese",
              "bengal",
              "lion",
              "tiger",
              "leopard",
              "other"
            ]
          },
          "favorite_color": {
            "type": "string",
            "enum": [
              "red",
              "green",
              "blue"
            ],
            "default": "red"
          },
          "favorite_dog_breed": {
            "type": "string",
            "enum": [
              "Kuro"
            ]
          },
          "favorite_fish_breed": {
            "type": "string",
            "enum": [
              "gold",
              "koi",
              "shark"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "age",
          "favorite_cat_breed",
          "favorite_color"
        ]
      },
      "User_FavoriteHatRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dad",
              "trucker",
              "snapback"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "User_PetsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "integer"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "tag_id": {
            "type": "string",
            "format": "byte"
          },
          "height": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}