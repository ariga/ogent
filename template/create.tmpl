{{ define "ogent/ogent/helper/create" }}{{/* gotype: entgo.io/ent/entc/gen.Type */}}
	p := GetPolicyFromContext(ctx)
	b := h.client.{{ $.Name }}.Create()
	// Add all fields.!
	{{- range $f := $.Fields }}
		{{- if $f.Optional }}
			if v, ok := req.{{ $f.StructField}}.Get(); ok {
				{{- $x := "v" }}
				{{- if $f.IsEnum }}{{ $x = convertTo $f.Type.String $x }}{{ end }}
				b.Set{{ $f.StructField }}({{ $x }})
			}
		{{- else }}
			{{- $x := print "req." $f.StructField }}
			{{- if $f.IsEnum }}{{ $x = convertTo $f.Type.String $x }}{{ end }}
			if p.IsAllowed(PrivIdCreate{{ $.Name }}Req{{ $f.StructField }}) {
				b.Set{{ $f.StructField }}({{ $x }})
			}
		{{- end }}
	{{- end }}
	// Add all edges.
	{{- range $e := $.Edges }}
		{{- if not $e.Unique }}
			b.{{ $e.MutationAdd }}(req.{{ $e.StructField }}...)
		{{- else }}
			{{- if $e.Optional }}
				if v, ok := req.{{ $e.StructField }}.Get(); ok && !p.IsAllowed(PrivIdCreate{{ $.Name }}Req{{ $e.StructField }}){
					b.{{ $e.MutationSet }}(v)
				}
			{{- else }}
				b.{{ $e.MutationSet }}(req.{{ $e.StructField }})
			{{- end }}
		{{- end }}
	{{- end }}
	// Persist to storage.
	e, err := b.Save(ctx)
	{{-
		template "ogent/ogent/helper/error"
		extend $
		"Errors" (list "not-singular" "constraint")
	-}}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.{{ $.Name }}.Query().Where({{ $.Package }}.ID(e.{{ $.ID.StructField }}))
	{{- with eagerLoad $ "create" }}
		// Eager load edges that are required on create operation.
		q{{ . }}
	{{- end }}
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	r := New{{ viewName $ "create"  }}(e)
	if r == nil{
		return nil, nil
	}
	v := &{{ viewName $ "create"  }}{}
	v.ID = r.ID
	{{- range $f := $.Fields }}
		{{- if $f.Optional }}
			if v, ok := req.{{ $f.StructField}}.Get(); ok {
				{{- $x := "v" }}
				{{- if $f.IsEnum }}{{ $x = convertTo $f.Type.String $x }}{{ end }}
				v.{{ $f.StructField }} = r.{{ $f.StructField }}
			}
		{{- else }}
			{{- $x := print "req." $f.StructField }}
			{{- if $f.IsEnum }}{{ $x = convertTo $f.Type.String $x }}{{ end }}
			if p.IsAllowed(PrivIdCreate{{ $.Name }}Res{{ $f.StructField }}) {
				v.{{ $f.StructField }} = r.{{ $f.StructField }}
		}
		{{- end }}
	{{- end }}
	return v, nil

{{- end }}