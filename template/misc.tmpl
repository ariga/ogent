{{ define "ogent/ogent/helper/error" }}{{/* gotype: entgo.io/ent/entc/gen.typeScope */}}
if err != nil {
	switch {
	{{- range $err := $.Scope.Errors }}
		{{- if eq $err "not-found" }}
			case {{ $.Type.Config.Package | base }}.IsNotFound(err):
				return &R400{
					Code: http.StatusNotFound,
					Status: http.StatusText(http.StatusNotFound),
					Errors: NewOptString(err.Error()),
				}, nil
		{{- else if eq $err "not-singular" }}
			case {{ $.Type.Config.Package | base }}.IsNotSingular(err):
				return &R409{
						Code: http.StatusNotFound,
						Status: http.StatusText(http.StatusNotFound),
						Errors: NewOptString(err.Error()),
					}, nil
		{{- else if eq $err "privacy" }}
			// Privacy error
		{{- end }}
	{{- end }}
	default:
		// Let the server handle the error.
		return nil, err
	}
}
{{ end }}