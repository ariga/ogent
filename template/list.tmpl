{{ define "ogent/ogent/helper/list" }}{{/* gotype: entgo.io/ent/entc/gen.Type */}}
	p := GetPolicyFromContext(ctx)
	q := h.client.{{ $.Name }}.Query(){{ with eagerLoad $ "list" }}{{ . }}{{ end }}
	{{- template "ogent/ogent/helper/list/paginate-and-sort" $ -}}
	{{- template "ogent/ogent/helper/list/filter" $ -}}
	{{- template "ogent/ogent/helper/list/execute-query" $ -}}
	//Response policy
	r :=  New{{ viewName $ "list" | plural }}(es)
    var v []{{ viewName $ "list" }}
	for _, c := range r {
		o := {{ viewName $ "list" }}{}
		o.ID = c.ID
		{{- range $f := $.Fields }}
			{{- if $f.Optional }}
				if v, ok := req.{{ $f.StructField}}.Get(); ok {
				{{- $x := "v" }}
				{{- if $f.IsEnum }}{{ $x = convertTo $f.Type.String $x }}{{ end }}
					o.{{ $f.StructField }} = c.{{ $f.StructField }}
				}
			{{- else }}
				{{- $x := print "req." $f.StructField }}
				{{- if $f.IsEnum }}{{ $x = convertTo $f.Type.String $x }}{{ end }}
				if p.IsAllowed(PrivIdRead{{ $.Name }}Res{{ $f.StructField }}) {
					o.{{ $f.StructField }} = c.{{ $f.StructField }}
				}
			{{- end }}
		{{- end }}
		v = append(v, o)
	}
	return (*List{{ $.Name }}OKApplicationJSON)(&v), nil
{{- end }}

{{ define "ogent/ogent/helper/list/sub" }}{{/* gotype: entgo.io/ent/entc/gen.typeScope */}}
	p := GetPolicyFromContext(ctx)
	q := h.client.{{ $.Type.Name }}.Query().Where({{ $.Type.Package }}.IDEQ(params.{{ $.Type.ID.StructField }})).Query{{ $.Scope.Edge.Name | pascal }}()
	{{- with eagerLoad $.Type "list" }}{{ . }}{{ end }}
	{{- template "ogent/ogent/helper/list/paginate-and-sort" $.Type -}}
	{{- template "ogent/ogent/helper/list/execute-query" $ -}}
	//Response policy
	r := New{{ replaceAll (edgeViewName $.Type $.Scope.Edge "list") "_" "" | plural }}(es)
	var v []{{ replaceAll (edgeViewName $.Type $.Scope.Edge "list") "_" "" }}
	for _, c := range r {
		o := {{ replaceAll (edgeViewName $.Type $.Scope.Edge "list") "_" "" }}{}
		o.ID = c.ID
		{{- range $f := $.Scope.Edge.Type.Fields }}
			{{- if $f.Optional }}
				if v, ok := req.{{ $f.StructField}}.Get(); ok {
					{{- $x := "v" }}
					{{- if $f.IsEnum }}{{ $x = convertTo $f.Type.String $x }}{{ end }}
					o.{{ $f.StructField }} = c.{{ $f.StructField }}
				}
			{{- else }}
				{{- $x := print "req." $f.StructField }}
				{{- if $f.IsEnum }}{{ $x = convertTo $f.Type.String $x }}{{ end }}
				if p.IsAllowed(PrivIdRead{{ $.Scope.Edge.Type.Name }}Res{{ $f.StructField }}) {
					o.{{ $f.StructField }} = c.{{ $f.StructField }}
				}
			{{- end }}
		{{- end }}
		v = append(v, o)
	}
	return (*List{{ $.Type.Name }}{{ $.Scope.Edge.Name | pascal }}OKApplicationJSON)(&v), nil
{{ end }}

{{ define "ogent/ogent/helper/list/paginate-and-sort" }}
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	//Sort the fetched data in either ascending or descending
	if v, ok := params.OrderBy.Get(); ok {
		for _, p := range strings.Split(v, ",") {
			f := strings.Fields(p)
			column := f[0]
			if len(f) > 1 && f[1] == "desc"{
				q.Order(ent.Desc(column))
			} else {
				q.Order(ent.Asc(column))
			}
		}
	}
{{ end }}

{{ define "ogent/ogent/helper/list/filter" }}
	//Filter operations
	if v, ok := params.Filter.Get(); ok {
		exp := &Expression{}
		err := SqlParser.ParseString(v, exp)
		if err != nil {
			return &R400{
				Code:   http.StatusBadRequest,
				Status: http.StatusText(http.StatusBadRequest),
				Errors: rawError(err),
			}, nil
		} else {
			//parse filter
			q.Where(func(s *sql.Selector) {
				ParseExpression(exp, s, createColumnMap({{lower $.Name}}.Columns))
				//{{hasPrefix "cat" "catch"}}
			})
		}
	}
{{ end }}

{{ define "ogent/ogent/helper/list/execute-query" }}
	//run the query
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(ctx)
	{{-
		template "ogent/ogent/helper/error"
		extend $
		"Errors" (list "not-found" "not-singular")
	-}}
{{ end }}