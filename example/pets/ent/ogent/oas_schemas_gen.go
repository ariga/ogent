// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

// Ref: #/components/schemas/CategoryCreate
type CategoryCreate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

func (*CategoryCreate) createCategoryRes() {}

// Ref: #/components/schemas/CategoryList
type CategoryList struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// Ref: #/components/schemas/Category_PetsList
type CategoryPetsList struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	Weight   OptInt  `json:"weight"`
	Birthday OptTime `json:"birthday"`
}

// Ref: #/components/schemas/CategoryRead
type CategoryRead struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

func (*CategoryRead) readCategoryRes() {}

// Ref: #/components/schemas/CategoryUpdate
type CategoryUpdate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

func (*CategoryUpdate) updateCategoryRes() {}

type CreateCategoryReq struct {
	Name string `json:"name"`
	Pets []int  `json:"pets"`
}

type CreatePetReq struct {
	Name       string  `json:"name"`
	Weight     OptInt  `json:"weight"`
	Birthday   OptTime `json:"birthday"`
	Categories []int   `json:"categories"`
	Owner      int     `json:"owner"`
	Friends    []int   `json:"friends"`
}

type CreateUserReq struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
	Pets []int  `json:"pets"`
}

// DBHealthNoContent is response for DBHealth operation.
type DBHealthNoContent struct{}

func (*DBHealthNoContent) dBHealthRes() {}

// DBHealthServiceUnavailable is response for DBHealth operation.
type DBHealthServiceUnavailable struct{}

func (*DBHealthServiceUnavailable) dBHealthRes() {}

// DeleteCategoryNoContent is response for DeleteCategory operation.
type DeleteCategoryNoContent struct{}

func (*DeleteCategoryNoContent) deleteCategoryRes() {}

// DeletePetNoContent is response for DeletePet operation.
type DeletePetNoContent struct{}

func (*DeletePetNoContent) deletePetRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

type ListCategoryOKApplicationJSON []CategoryList

func (ListCategoryOKApplicationJSON) listCategoryRes() {}

type ListCategoryPetsOKApplicationJSON []CategoryPetsList

func (ListCategoryPetsOKApplicationJSON) listCategoryPetsRes() {}

type ListPetCategoriesOKApplicationJSON []PetCategoriesList

func (ListPetCategoriesOKApplicationJSON) listPetCategoriesRes() {}

type ListPetFriendsOKApplicationJSON []PetFriendsList

func (ListPetFriendsOKApplicationJSON) listPetFriendsRes() {}

type ListPetOKApplicationJSON []PetList

func (ListPetOKApplicationJSON) listPetRes() {}

type ListUserOKApplicationJSON []UserList

func (ListUserOKApplicationJSON) listUserRes() {}

type ListUserPetsOKApplicationJSON []UserPetsList

func (ListUserPetsOKApplicationJSON) listUserPetsRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTime returns new OptTime with value set to v.
func NewOptTime(v time.Time) OptTime {
	return OptTime{
		Value: v,
		Set:   true,
	}
}

// OptTime is optional time.Time.
type OptTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptTime was set.
func (o OptTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Pet_CategoriesList
type PetCategoriesList struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// Ref: #/components/schemas/PetCreate
type PetCreate struct {
	ID         int                   `json:"id"`
	Name       string                `json:"name"`
	Weight     OptInt                `json:"weight"`
	Birthday   OptTime               `json:"birthday"`
	Categories []PetCreateCategories `json:"categories"`
	Owner      PetCreateOwner        `json:"owner"`
}

func (*PetCreate) createPetRes() {}

// Ref: #/components/schemas/PetCreate_Categories
type PetCreateCategories struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// Ref: #/components/schemas/PetCreate_Owner
type PetCreateOwner struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

// Ref: #/components/schemas/Pet_FriendsList
type PetFriendsList struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	Weight   OptInt  `json:"weight"`
	Birthday OptTime `json:"birthday"`
}

// Ref: #/components/schemas/PetList
type PetList struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	Weight   OptInt  `json:"weight"`
	Birthday OptTime `json:"birthday"`
}

// Ref: #/components/schemas/Pet_OwnerRead
type PetOwnerRead struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

func (*PetOwnerRead) readPetOwnerRes() {}

// Ref: #/components/schemas/PetRead
type PetRead struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	Weight   OptInt  `json:"weight"`
	Birthday OptTime `json:"birthday"`
}

func (*PetRead) readPetRes() {}

// Ref: #/components/schemas/PetUpdate
type PetUpdate struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	Weight   OptInt  `json:"weight"`
	Birthday OptTime `json:"birthday"`
}

func (*PetUpdate) updatePetRes() {}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

func (*R400) createCategoryRes()    {}
func (*R400) createPetRes()         {}
func (*R400) createUserRes()        {}
func (*R400) deleteCategoryRes()    {}
func (*R400) deletePetRes()         {}
func (*R400) deleteUserRes()        {}
func (*R400) listCategoryPetsRes()  {}
func (*R400) listCategoryRes()      {}
func (*R400) listPetCategoriesRes() {}
func (*R400) listPetFriendsRes()    {}
func (*R400) listPetRes()           {}
func (*R400) listUserPetsRes()      {}
func (*R400) listUserRes()          {}
func (*R400) readCategoryRes()      {}
func (*R400) readPetOwnerRes()      {}
func (*R400) readPetRes()           {}
func (*R400) readUserRes()          {}
func (*R400) updateCategoryRes()    {}
func (*R400) updatePetRes()         {}
func (*R400) updateUserRes()        {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

func (*R404) deleteCategoryRes()    {}
func (*R404) deletePetRes()         {}
func (*R404) deleteUserRes()        {}
func (*R404) listCategoryPetsRes()  {}
func (*R404) listCategoryRes()      {}
func (*R404) listPetCategoriesRes() {}
func (*R404) listPetFriendsRes()    {}
func (*R404) listPetRes()           {}
func (*R404) listUserPetsRes()      {}
func (*R404) listUserRes()          {}
func (*R404) readCategoryRes()      {}
func (*R404) readPetOwnerRes()      {}
func (*R404) readPetRes()           {}
func (*R404) readUserRes()          {}
func (*R404) updateCategoryRes()    {}
func (*R404) updatePetRes()         {}
func (*R404) updateUserRes()        {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

func (*R409) createCategoryRes()    {}
func (*R409) createPetRes()         {}
func (*R409) createUserRes()        {}
func (*R409) deleteCategoryRes()    {}
func (*R409) deletePetRes()         {}
func (*R409) deleteUserRes()        {}
func (*R409) listCategoryPetsRes()  {}
func (*R409) listCategoryRes()      {}
func (*R409) listPetCategoriesRes() {}
func (*R409) listPetFriendsRes()    {}
func (*R409) listPetRes()           {}
func (*R409) listUserPetsRes()      {}
func (*R409) listUserRes()          {}
func (*R409) readCategoryRes()      {}
func (*R409) readPetOwnerRes()      {}
func (*R409) readPetRes()           {}
func (*R409) readUserRes()          {}
func (*R409) updateCategoryRes()    {}
func (*R409) updatePetRes()         {}
func (*R409) updateUserRes()        {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

func (*R500) createCategoryRes()    {}
func (*R500) createPetRes()         {}
func (*R500) createUserRes()        {}
func (*R500) deleteCategoryRes()    {}
func (*R500) deletePetRes()         {}
func (*R500) deleteUserRes()        {}
func (*R500) listCategoryPetsRes()  {}
func (*R500) listCategoryRes()      {}
func (*R500) listPetCategoriesRes() {}
func (*R500) listPetFriendsRes()    {}
func (*R500) listPetRes()           {}
func (*R500) listUserPetsRes()      {}
func (*R500) listUserRes()          {}
func (*R500) readCategoryRes()      {}
func (*R500) readPetOwnerRes()      {}
func (*R500) readPetRes()           {}
func (*R500) readUserRes()          {}
func (*R500) updateCategoryRes()    {}
func (*R500) updatePetRes()         {}
func (*R500) updateUserRes()        {}

type UpdateCategoryReq struct {
	Name OptString `json:"name"`
	Pets []int     `json:"pets"`
}

type UpdatePetReq struct {
	Name       OptString `json:"name"`
	Weight     OptInt    `json:"weight"`
	Birthday   OptTime   `json:"birthday"`
	Categories []int     `json:"categories"`
	Owner      OptInt    `json:"owner"`
	Friends    []int     `json:"friends"`
}

type UpdateUserReq struct {
	Name OptString `json:"name"`
	Age  OptInt    `json:"age"`
	Pets []int     `json:"pets"`
}

// Ref: #/components/schemas/UserCreate
type UserCreate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

func (*UserCreate) createUserRes() {}

// Ref: #/components/schemas/UserList
type UserList struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

// Ref: #/components/schemas/User_PetsList
type UserPetsList struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	Weight   OptInt  `json:"weight"`
	Birthday OptTime `json:"birthday"`
}

// Ref: #/components/schemas/UserRead
type UserRead struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

func (*UserRead) readUserRes() {}

// Ref: #/components/schemas/UserUpdate
type UserUpdate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

func (*UserUpdate) updateUserRes() {}
